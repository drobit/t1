dn: inum=BABA-CACA,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Authentication script for Gluu Casa
displayName: casa
oxEnabled: true
inum: BABA-CACA
oxConfigurationProperty: {"value1":"supergluu_app_id","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal/casa","description":""}
oxConfigurationProperty: {"value1":"u2f_app_id","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal","description":""}
oxConfigurationProperty: {"value1":"mobile_methods","value2":"otp, twilio_sms, super_gluu","description":""}
oxLevel: 1
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=DAA9-F7F8,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Gluu Casa Client Registration script
displayName: casa_client_registration
oxEnabled: true
inum: DAA9-F7F8
oxLevel: 1
oxConfigurationProperty: {"value1":"client_redirect_uris","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal/casa","description":""}
oxConfigurationProperty: {"value1":"scopes","value2":"openid, profile, user_name, clientinfo, oxd","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE4LCBHbHV1CiMKIyBBdXRob3I6IEpvc2UgR29uemFsZXoKCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLmNsaWVudCBpbXBvcnQgQ2xpZW50UmVnaXN0cmF0aW9uVHlwZQpmcm9tIG9yZy5nbHV1LnNlcnZpY2UuY2RpLnV0aWwgaW1wb3J0IENkaVV0aWwKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZSBpbXBvcnQgU2NvcGVTZXJ2aWNlCmZyb20gb3JnLmdsdXUudXRpbCBpbXBvcnQgU3RyaW5nSGVscGVyLCBBcnJheUhlbHBlcgpmcm9tIGphdmEudXRpbCBpbXBvcnQgQXJyYXlzLCBBcnJheUxpc3QsIEhhc2hTZXQsIERhdGUsIEdyZWdvcmlhbkNhbGVuZGFyCgppbXBvcnQgamF2YQoKY2xhc3MgQ2xpZW50UmVnaXN0cmF0aW9uKENsaWVudFJlZ2lzdHJhdGlvblR5cGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToKICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMKCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ2FzYSBjbGllbnQgcmVnaXN0cmF0aW9uLiBJbml0aWFsaXphdGlvbiIKICAgICAgICBzZWxmLmNsaWVudFJlZGlyZWN0VXJpc1NldCA9IHNlbGYucHJlcGFyZUNsaWVudFJlZGlyZWN0VXJpcyhjb25maWd1cmF0aW9uQXR0cmlidXRlcykKICAgICAgICBwcmludCAiQ2FzYSBjbGllbnQgcmVnaXN0cmF0aW9uLiBJbml0aWFsaXplZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUgICAKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkNhc2EgY2xpZW50IHJlZ2lzdHJhdGlvbi4gRGVzdHJveSIKICAgICAgICBwcmludCAiQ2FzYSBjbGllbnQgcmVnaXN0cmF0aW9uLiBEZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHJldHVybiBUcnVlICAgCgogICAgIyBVcGRhdGUgY2xpZW50IGVudHJ5IGJlZm9yZSBwZXJzaXN0ZW50IGl0CiAgICAjICAgcmVnaXN0ZXJSZXF1ZXN0IGlzIG9yZy5nbHV1Lm94YXV0aC5jbGllbnQuUmVnaXN0ZXJSZXF1ZXN0CiAgICAjICAgY2xpZW50IGlzIG9yZy5nbHV1Lm94YXV0aC5tb2RlbC5yZWdpc3RyYXRpb24uQ2xpZW50CiAgICAjICAgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFNpbXBsZUN1c3RvbVByb3BlcnR5PgogICAgZGVmIGNyZWF0ZUNsaWVudChzZWxmLCByZWdpc3RlclJlcXVlc3QsIGNsaWVudCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgoKICAgICAgICBwcmludCAiQ2FzYSBjbGllbnQgcmVnaXN0cmF0aW9uLiBDcmVhdGVDbGllbnQgbWV0aG9kIgogICAgICAgIHJlZGlyZWN0VXJpcyA9IGNsaWVudC5nZXRSZWRpcmVjdFVyaXMoKQogICAgICAgIHByaW50ICJDYXNhIGNsaWVudCByZWdpc3RyYXRpb24uIFJlZGlyZWN0IFVyaXM6ICVzIiAlIHJlZGlyZWN0VXJpcwoKICAgICAgICBjcmVkTWFuYWdlckNsaWVudCA9IEZhbHNlCiAgICAgICAgZm9yIHJlZGlyZWN0VXJpIGluIHJlZGlyZWN0VXJpczoKICAgICAgICAgICAgaWYgc2VsZi5jbGllbnRSZWRpcmVjdFVyaXNTZXQuY29udGFpbnMocmVkaXJlY3RVcmkpOgogICAgICAgICAgICAgICAgY3JlZE1hbmFnZXJDbGllbnQgPSBUcnVlCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIAogICAgICAgIGlmIG5vdCBjcmVkTWFuYWdlckNsaWVudDoKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICAgICAgcHJpbnQgIkNhc2EgY2xpZW50IHJlZ2lzdHJhdGlvbi4gQ2xpZW50IGlzIEdsdXUgQ2FzYSIKICAgICAgICBzZWxmLnNldENsaWVudFNjb3BlcyhjbGllbnQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgic2NvcGVzIikpCiAgICAgICAgI0V4dGVuZCBjbGllbnQgbGlmZXRpbWUgZm9yIG9uZSB5ZWFyCiAgICAgICAgY2FsPUdyZWdvcmlhbkNhbGVuZGFyKCkKICAgICAgICBjYWwuYWRkKDEsMTApCiAgICAgICAgY2xpZW50LnNldENsaWVudFNlY3JldEV4cGlyZXNBdChEYXRlKGNhbC5nZXRUaW1lSW5NaWxsaXMoKSkpCiAgICAgICAgY2xpZW50LnNldFRydXN0ZWRDbGllbnQoVHJ1ZSkKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICMgVXBkYXRlIGNsaWVudCBlbnRyeSBiZWZvcmUgcGVyc2lzdGVudCBpdAogICAgIyAgIHJlZ2lzdGVyUmVxdWVzdCBpcyBvcmcuZ2x1dS5veGF1dGguY2xpZW50LlJlZ2lzdGVyUmVxdWVzdAogICAgIyAgIGNsaWVudCBpcyBvcmcuZ2x1dS5veGF1dGgubW9kZWwucmVnaXN0cmF0aW9uLkNsaWVudAogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiB1cGRhdGVDbGllbnQoc2VsZiwgcmVnaXN0ZXJSZXF1ZXN0LCBjbGllbnQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ2FzYSBjbGllbnQgcmVnaXN0cmF0aW9uLiBVcGRhdGVDbGllbnQgbWV0aG9kIiAgICAgICAKICAgICAgICBzZWxmLnNldENsaWVudFNjb3BlcyhjbGllbnQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgic2NvcGVzIikpCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICBkZWYgc2V0Q2xpZW50U2NvcGVzKHNlbGYsIGNsaWVudCwgcmVxdWlyZWRTY29wZXMpOgogICAgICAgIAogICAgICAgIGlmIHJlcXVpcmVkU2NvcGVzID09IE5vbmU6CiAgICAgICAgICAgIHByaW50ICJDYXNhIGNsaWVudCByZWdpc3RyYXRpb24uIE5vIGxpc3Qgb2Ygc2NvcGVzIHdhcyBwYXNzZWQgaW4gc2NyaXB0IHBhcmFtZXRlcnMiCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICByZXF1aXJlZFNjb3BlcyA9IFN0cmluZ0hlbHBlci5zcGxpdChyZXF1aXJlZFNjb3Blcy5nZXRWYWx1ZTIoKSwgIiwiKQogICAgICAgIG5ld1Njb3BlcyA9IGNsaWVudC5nZXRTY29wZXMoKQogICAgICAgIHNjb3BlU2VydmljZSA9IENkaVV0aWwuYmVhbihTY29wZVNlcnZpY2UpCgogICAgICAgIGZvciBzY29wZU5hbWUgaW4gcmVxdWlyZWRTY29wZXM6CiAgICAgICAgICAgIHNjb3BlID0gc2NvcGVTZXJ2aWNlLmdldFNjb3BlQnlJZChzY29wZU5hbWUpCiAgICAgICAgICAgIGlmIG5vdCBzY29wZS5pc0RlZmF1bHRTY29wZSgpOgogICAgICAgICAgICAgICAgcHJpbnQgIkNhc2EgY2xpZW50IHJlZ2lzdHJhdGlvbi4gQWRkaW5nIHNjb3BlICclcyciICUgc2NvcGVOYW1lCiAgICAgICAgICAgICAgICBuZXdTY29wZXMgPSBBcnJheUhlbHBlci5hZGRJdGVtVG9TdHJpbmdBcnJheShuZXdTY29wZXMsIHNjb3BlLmdldERuKCkpCgogICAgICAgIHByaW50ICJDYXNhIGNsaWVudCByZWdpc3RyYXRpb24uIFJlc3VsdCBzY29wZXMgYXJlOiAlcyIgJSBuZXdTY29wZXMKICAgICAgICBjbGllbnQuc2V0U2NvcGVzKG5ld1Njb3BlcykKICAgICAgICAKICAgICAgICAKICAgIGRlZiBwcmVwYXJlQ2xpZW50UmVkaXJlY3RVcmlzKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBjbGllbnRSZWRpcmVjdFVyaXNTZXQgPSBIYXNoU2V0KCkKICAgICAgICBpZiBub3QgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuY29udGFpbnNLZXkoImNsaWVudF9yZWRpcmVjdF91cmlzIik6CiAgICAgICAgICAgIHJldHVybiBjbGllbnRSZWRpcmVjdFVyaXNTZXQKCiAgICAgICAgY2xpZW50UmVkaXJlY3RVcmlzTGlzdCA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgiY2xpZW50X3JlZGlyZWN0X3VyaXMiKS5nZXRWYWx1ZTIoKQogICAgICAgIGlmIFN0cmluZ0hlbHBlci5pc0VtcHR5KGNsaWVudFJlZGlyZWN0VXJpc0xpc3QpOgogICAgICAgICAgICBwcmludCAiQ2FzYSBjbGllbnQgcmVnaXN0cmF0aW9uLiBUaGUgcHJvcGVydHkgY2xpZW50X3JlZGlyZWN0X3VyaXMgaXMgZW1wdHkiCiAgICAgICAgICAgIHJldHVybiBjbGllbnRSZWRpcmVjdFVyaXNTZXQgICAgCgogICAgICAgIGNsaWVudFJlZGlyZWN0VXJpc0FycmF5ID0gU3RyaW5nSGVscGVyLnNwbGl0KGNsaWVudFJlZGlyZWN0VXJpc0xpc3QsICIsIikKICAgICAgICBpZiBBcnJheUhlbHBlci5pc0VtcHR5KGNsaWVudFJlZGlyZWN0VXJpc0FycmF5KToKICAgICAgICAgICAgcHJpbnQgIkNhc2EgY2xpZW50IHJlZ2lzdHJhdGlvbi4gTm8gY2xpZW50cyBzcGVjaWZpZWQgaW4gY2xpZW50X3JlZGlyZWN0X3VyaXMgcHJvcGVydHkiCiAgICAgICAgICAgIHJldHVybiBjbGllbnRSZWRpcmVjdFVyaXNTZXQKICAgICAgICAKICAgICAgICAjIENvbnZlcnQgdG8gSGFzaFNldCB0byBxdWljayBzZWFyY2gKICAgICAgICBpID0gMAogICAgICAgIGNvdW50ID0gbGVuKGNsaWVudFJlZGlyZWN0VXJpc0FycmF5KQogICAgICAgIHdoaWxlIGkgPCBjb3VudDoKICAgICAgICAgICAgdXJpcyA9IGNsaWVudFJlZGlyZWN0VXJpc0FycmF5W2ldCiAgICAgICAgICAgIGNsaWVudFJlZGlyZWN0VXJpc1NldC5hZGQodXJpcykKICAgICAgICAgICAgaSA9IGkgKyAxCgogICAgICAgIHJldHVybiBjbGllbnRSZWRpcmVjdFVyaXNTZXQK
oxScriptType: client_registration
programmingLanguage: python

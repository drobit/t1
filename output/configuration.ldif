dn: ou=configuration,o=gluu
objectClass: top
objectClass: gluuConfiguration
ou: configuration
gluuMaxLogSize: 200
gluuWhitePagesEnabled: disabled
gluuOrgProfileMgt: false
gluuManageIdentityPermission: true
gluuFederationHostingEnabled: disabled
gluuVdsCacheRefreshEnabled: false
gluuScimEnabled: true
oxAuthenticationMode: simple_password_auth
oxTrustAuthenticationMode: simple_password_auth
gluuPassportEnabled: true
gluuRadiusEnabled: true
gluuSamlEnabled: true
oxCacheConfiguration: {"cacheProviderType": "NATIVE_PERSISTENCE", "memcachedConfiguration": {"servers":"localhost:11211", "maxOperationQueueLength":100000, "bufferSize":32768, "defaultPutExpiration":60, "connectionFactoryType": "DEFAULT"}, "inMemoryConfiguration": {"defaultPutExpiration":60}, "nativePersistenceConfiguration": {"defaultPutExpiration":60, "defaultCleanupBatchSize": 10000}, "redisConfiguration":{"servers":"localhost:6379", "defaultPutExpiration": 60}}
oxDocumentStoreConfiguration: {"documentStoreType":"LOCAL","localConfiguration":{"baseLocation":"/"},"jcaConfiguration":{"serverUrl":"http://localhost:8080/rmi","workspaceName":"default","connectionTimeout":15,"userId":"admin","password":""},"webDavConfiguration":null}
oxTrustStoreConf: {"useJreCertificates":true}
oxTrustCacheRefreshServerIpAddress: 255.255.255.255
oxIDPAuthentication: {"type": "auth",
  "name": null,
  "level": 0,
  "priority": 1,
  "enabled": false,
  "version": 0,
  "config": {"configId": "auth_ldap_server",
            "servers": ["localhost:1636"],
            "maxConnections": 1000,
            "bindDN": "cn=directory manager",
            "bindPassword": "LlUToSf1bR23mGolDdmM+w==",
            "useSSL": "true",
            "baseDNs": ["ou=people,o=gluu"],
            "primaryKey": "uid",
            "localPrimaryKey": "uid",
            "useAnonymousBind": false,
            "enabled": false}
  }
oxLogViewerConfig: {
  "log_template":[
    {
      "value1":"oxAuth logs",
      "value2":"/opt/gluu/jetty/oxauth/logs/*.log",
      "description":""
    },
    {
      "value1":"oxTrust logs",
      "value2":"/opt/gluu/jetty/identity/logs/*.log",
      "description":""
    }
  ]}

######################################

# SAML Trust Relationships - Level 2
dn: ou=trustRelationships,o=gluu
objectClass: top
objectClass: organizationalUnit
ou: trustRelationships

######################################

# SAML2 Federations - LEVEL 2
# WARNING ! This feature is deprecated! Use Jagger: http://www.gluu.co/jag
dn: ou=federations,o=gluu
objectClass: top
objectClass: organizationalUnit
ou: federations

dn: ou=oxauth,ou=configuration,o=gluu
objectClass: oxAuthConfiguration
objectClass: top
ou: oxauth
oxAuthConfDynamic:: 
oxAuthConfStatic:: ewogICAgImJhc2VEbiI6ewogICAgICAgICJjb25maWd1cmF0aW9uIjoib3U9Y29uZmlndXJhdGlvbixvPWdsdXUiLAogICAgICAgICJwZW9wbGUiOiJvdT1wZW9wbGUsbz1nbHV1IiwKICAgICAgICAiZ3JvdXBzIjoib3U9Z3JvdXBzLG89Z2x1dSIsCiAgICAgICAgImNsaWVudHMiOiJvdT1jbGllbnRzLG89Z2x1dSIsCiAgICAgICAgInNlc3Npb25zIjoib3U9c2Vzc2lvbnMsbz1nbHV1IiwKICAgICAgICAidG9rZW5zIjoib3U9dG9rZW5zLG89Z2x1dSIsCiAgICAgICAgImF1dGhvcml6YXRpb25zIjogIm91PWF1dGhvcml6YXRpb25zLG89Z2x1dSIsCiAgICAgICAgInNjb3BlcyI6Im91PXNjb3BlcyxvPWdsdXUiLAogICAgICAgICJhdHRyaWJ1dGVzIjoib3U9YXR0cmlidXRlcyxvPWdsdXUiLAogICAgICAgICJzY3JpcHRzIjogIm91PXNjcmlwdHMsbz1nbHV1IiwKICAgICAgICAidW1hQmFzZSI6Im91PXVtYSxvPWdsdXUiLAogICAgICAgICJ1bWFQb2xpY3kiOiJvdT1wb2xpY2llcyxvdT11bWEsbz1nbHV1IiwKICAgICAgICAidTJmQmFzZSI6Im91PXUyZixvPWdsdXUiLAogICAgICAgICJtZXRyaWMiOiJvdT1zdGF0aXN0aWMsbz1tZXRyaWMiLAogICAgICAgICJzZWN0b3JJZGVudGlmaWVycyI6ICJvdT1zZWN0b3JfaWRlbnRpZmllcnMsbz1nbHV1IiwKICAgICAgICAiY2liYSI6ICJvdT1jaWJhLG89Z2x1dSIKICAgIH0KfQo=
oxAuthConfWebKeys:: ewogICJrZXlzIiA6IFsgewogICAgImt0eSIgOiAiUlNBIiwKICAgICJlIiA6ICJBUUFCIiwKICAgICJ1c2UiIDogInNpZyIsCiAgICAiY3J2IiA6ICIiLAogICAgImtpZCIgOiAiMWI2ODY5MDQtMGM2Yi00MjgyLWExMGItYWRhMWZhZGExMzg1X3NpZ19yczI1NiIsCiAgICAieDVjIiA6IFsgIk1JSURBekNDQWV1Z0F3SUJBZ0lnRFcwaWt6YXk4MWVIb2dwS1h4dE1Mb3ZvL0RBVi9vclRUa0NXc0w5SVY5a3dEUVlKS29aSWh2Y05BUUVMQlFBd0lURWZNQjBHQTFVRUF3d1diM2hCZFhSb0lFTkJJRU5sY25ScFptbGpZWFJsY3pBZUZ3MHlNREE0TWpFeE5EUXhOVFJhRncweU1EQTRNak14TkRReU1ETmFNQ0V4SHpBZEJnTlZCQU1NRm05NFFYVjBhQ0JEUVNCRFpYSjBhV1pwWTJGMFpYTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDaDZmZjlwVXZ1Nko2MDQ5NzBhajBWZ3R4VVAvWW5lWFBIQU9nNlFSbE1HcWk2U0pacm5JWXpneGtHRDlMZkZXYU9GaGFkenJLaStZVjlkSjFmcGxuVDQ0cFNvRXVkR3RzY3F0YnZIcmNlbHNCdkZEOHhEM2NXOE0xUEIvR1JwOHZIZmtuOHpVRnV3WTVJQ0tkenpLVzJ0L1hSL1p5OUtsSG1oZzlsYVdrQnBzZXgybTdtVFFreGtncytrTEVjYzJKYzFaSnk5WlJ1Y2N1NXNuOXNHc3YwbHJJMkxTK1V5ZS9PZ3k2R25rV21wbE1LUkRzbGpLUFAwUkl2OFN4TjRGUG9XZ1JTN0UxQlVRVUJmSU55aGNQdkFlYm95QWE3ajhKMmR0cUZVbjZnQkQ3T3RkUDhXUWwrL0Rpc2FJSENOeGlPSlYzQWNkNDNEbDNBTktBVmZEZGpBZ01CQUFHakp6QWxNQ01HQTFVZEpRUWNNQm9HQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWdZRVZSMGxBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBUmpjUWtXSU04Rk1nVVVqbFQ0Sld3TzQ3cUJsa2w4UlB0YUlPQ3VKSWFwN0RYT2dVWCs5ZHg1Uk5FZVJXcTU2bFZxeFNwbVpmT25VUzF5RldLL3VWenRYSFFETE5rcmdORjZ0VkpJanhLS0E5Y2ZYQjNEM0lPcG5kZmRlbU5UVUhrck83R3FrVmpybFFXNHRSbTVjVSsrc2g4Tzg3Q0EyUjBVQkdkQVNZMlUwOHdFU2o3QlpoYjFnSWVZRGV1ZEVxWitkZW5EbHJ1M2FFNzRmNGllM09FVU80OVpKK2dwanRGZHBGUWJ3UnZJclNmbDh5enJ4aDVTcnE5M1FMNTJ3SkVjMitTcjA4RHdFMkZHcDJLU0RpOXJjaE5ROTB0RlAraG1INklJMmFWaTFUM0UxRmZrbDIvL0hTS2pnbk9EdExrOGVvS2JJaU43QkY5Y0J1eXkydm5nPT0iIF0sCiAgICAiZXhwIiA6IDE1OTgxOTM3MjM2NzEsCiAgICAiYWxnIiA6ICJSUzI1NiIsCiAgICAibiIgOiAib2VuM19hVkw3dWlldE9QZTlHbzlGWUxjVkRfMkozbHp4d0RvT2tFWlRCcW91a2lXYTV5R000TVpCZ19TM3hWbWpoWVduYzZ5b3ZtRmZYU2RYNlpaMC1PS1VxQkxuUnJiSEtyVzd4NjNIcGJBYnhRX01ROTNGdkROVHdmeGthZkx4MzVKX00xQmJzR09TQWluYzh5bHRyZjEwZjJjdlNwUjVvWVBaV2xwQWFiSHNkcHU1azBKTVpJTFBwQ3hISE5pWE5XU2N2V1VibkhMdWJKX2JCckw5SmF5TmkwdmxNbnZ6b011aHA1RnBxWlRDa1E3Sll5ano5RVNMX0VzVGVCVDZGb0VVdXhOUVZFRkFYeURjb1hEN3dIbTZNZ0d1NF9DZG5iYWhWSi1vQVEtenJYVF9Ga0pmdnc0ckdpQndqY1lqaVZkd0hIZU53NWR3RFNnRlh3M1l3IgogIH0sIHsKICAgICJrdHkiIDogIlJTQSIsCiAgICAiZSIgOiAiQVFBQiIsCiAgICAidXNlIiA6ICJzaWciLAogICAgImNydiIgOiAiIiwKICAgICJraWQiIDogImUxMzkyNDUxLTUwYTAtNGYyMy1hZDEwLTRiYWJhZGZkNGQ3ZF9zaWdfcnMzODQiLAogICAgIng1YyIgOiBbICJNSUlEQXpDQ0FldWdBd0lCQWdJZ0svQ25BYStqQ0JZMzN5Sm94SXA5aTdaeUM4bXo2Uk1sOWtOQkIxYURUVkl3RFFZSktvWklodmNOQVFFTUJRQXdJVEVmTUIwR0ExVUVBd3dXYjNoQmRYUm9JRU5CSUVObGNuUnBabWxqWVhSbGN6QWVGdzB5TURBNE1qRXhORFF4TlRSYUZ3MHlNREE0TWpNeE5EUXlNRE5hTUNFeEh6QWRCZ05WQkFNTUZtOTRRWFYwYUNCRFFTQkRaWEowYVdacFkyRjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2ZRRTBCMm9zMHZybWFEYXdwSUdJVlVUM0lMRkFtQmtzSldvUy9MUDRvOXBrNEdzK1ZkLytRR05LWlI5Z2UzRCtieElSM09jbDJpZlB2ZFE0anBqZWJIbWlLdGVJOGplVVBhcWNmaDhmZDBaZ1pacm5XYXBDdkgvR1VFeDE4QVBVMml4eUNUbVJJTVhFYmZQMDJ1UDhVTGN0c2FYUnBuNHNDRFhKZ0N2WU5OSVF1Sk96TWNKaDhYUVRia3NKN3RsVnFlUlozRGV1bkwwMTE0YnBJSHNxUzVVQ0ljQnIxR3JCSHgveFpPdXQ2MzkvTmJyNnhHWHcwM2FZSDZGTmtTZ2JmaGpXL2FCa0hSZTJZT1NXcHJjTlNKYURqbUhtNlgzNVkxMlpzallmWDRDSHFHMUNnVzc3VDZqT3oxNEZRVTNKNUhTbnNEd21VYk5Sd3NSWjZhb3pwQWdNQkFBR2pKekFsTUNNR0ExVWRKUVFjTUJvR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFnWUVWUjBsQURBTkJna3Foa2lHOXcwQkFRd0ZBQU9DQVFFQVlaTEd2Tkg0QXFVeXJ0b1ZzTGtYUDluWVZVSUlVL1VPZjdUV3J4RWU1OGppdGR3VUpmL1ZhZ3hPbExtM2JKM2pYSUdtVm9TZHJremNhUk9jdjdwZjJtQytmSDZGc3A5RHRPK0czc1VMNUdkYkpreThNSjdjM2JYVkE3MkRoMlBBOEppM1Q4cTFUUUgzY05uTHMxRjQxcDhWbkN4QzJMRFh3NjdRaTdyTDY4aklTRTNwTWY5OTVudFZha0VwWWhRZ1dheFl6V2ZKNGdYdmRiWEJBLzIwMmNTRThSWGEzTkNhZmUzcGhDVHdBcFczTEhkUGEvWThENHdUa1lVSUF3ejFoNVJMTTVDRFVlMUpDYjhWbnVxcWlEZSttU3JDZVR1Y1QxUlI5NlJRSW9sVEdhWWo3ZzN6a1BwazRxMkNWdkRKM3pTT0crQ0dTZWhSeXFoeG1ScXVQZz09IiBdLAogICAgImV4cCIgOiAxNTk4MTkzNzIzNjcxLAogICAgImFsZyIgOiAiUlMzODQiLAogICAgIm4iIDogIm4wQk5BZHFMTkw2NW1nMnNLU0JpRlZFOXlDeFFKZ1pMQ1ZxRXZ5ei1LUGFaT0JyUGxYZl9rQmpTbVVmWUh0d19tOFNFZHpuSmRvbno3M1VPSTZZM214NW9pclhpUEkzbEQycW5INGZIM2RHWUdXYTUxbXFRcnhfeGxCTWRmQUQxTm9zY2drNWtTREZ4RzN6OU5yal9GQzNMYkdsMGFaLUxBZzF5WUFyMkRUU0VMaVRzekhDWWZGMEUyNUxDZTdaVmFua1dkdzNycHk5TmRlRzZTQjdLa3VWQWlIQWE5UnF3UjhmOFdUcnJldF9melc2LXNSbDhOTjJtQi1oVFpFb0czNFkxdjJnWkIwWHRtRGtscWEzRFVpV2c0NWg1dWw5LVdOZG1iSTJIMS1BaDZodFFvRnUtMC1venM5ZUJVRk55ZVIwcDdBOEpsR3pVY0xFV2VtcU02USIKICB9LCB7CiAgICAia3R5IiA6ICJSU0EiLAogICAgImUiIDogIkFRQUIiLAogICAgInVzZSIgOiAic2lnIiwKICAgICJjcnYiIDogIiIsCiAgICAia2lkIiA6ICI1N2JlZjg0NS04NGRhLTQyOGQtYjlhZi1jODZhNDBmM2M3ZGFfc2lnX3JzNTEyIiwKICAgICJ4NWMiIDogWyAiTUlJREF6Q0NBZXVnQXdJQkFnSWdmOFNyZnE4cWs4U2dVSWZiZjFaZlNXNERZWXdpWmtHbEpZczJSMXM1eU1Jd0RRWUpLb1pJaHZjTkFRRU5CUUF3SVRFZk1CMEdBMVVFQXd3V2IzaEJkWFJvSUVOQklFTmxjblJwWm1sallYUmxjekFlRncweU1EQTRNakV4TkRReE5UVmFGdzB5TURBNE1qTXhORFF5TUROYU1DRXhIekFkQmdOVkJBTU1GbTk0UVhWMGFDQkRRU0JEWlhKMGFXWnBZMkYwWlhNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURMNTNaZkMyZjhYOGtvRXBLOTN6c0dwL2RVYTBwa0kwT0NJQ0lXZCtZWDBzTG1RWVQxODdBQUpWSDhMT25iUWxRTWMrRzhmK1locjJSUm5nclIyaU4xU25kalhOcFd6UDVSQ1JJYjFteEl2TjNyZFNxMndFTTg5dHJ4S1lzcW5tTHo3UG50R3JhQnFTT1VRaGl1RUdJUFFiY0MxVHFkbktIK0ZoYXIzM3E5ei8vRzc3aEpwZXRDRFlUbVN4UldQcWJhaUpFZVh1TTduc1NvVmIxcU1IT3lmbitsK3dYMUQxSGRyMHNva2FqNG5vQzZMMUdua0VJcGFKRFUvMXU5c1FjWWs2YW1XRUJHak5peDBHZHVGT3FzanBqVzhJZnpwV1M2aWIzNXJiNHRIT3NxUy9YaHUwVlF5QmozbXJDWHRaQWtQRENIUTAzc1dyc0tuTGhxa21iWkFnTUJBQUdqSnpBbE1DTUdBMVVkSlFRY01Cb0dDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBZ1lFVlIwbEFEQU5CZ2txaGtpRzl3MEJBUTBGQUFPQ0FRRUFJdnVZM1VoRVpsRllCVnM1L2tOTXNuUU5MMXlsNkRhN2RoeHhxcDdRTGlSN1Q3bmg0VlRtTDZ1YWpTVzRFemFJN2llTDI3WmJvQ3c4L0xFZk9QY2ZwcmY4b3JPaFlUZ3V0aHpYRVJXT1YzN0dMRVVXM2JWWW1QaHVXSC9wc1V0WjFDZTJMRzZpa2dpN25aeExuU1N0WVphbGxwMTFBanpGZ2gvT2lUQk05YnErWCtHVUNacjNkc1g0YXZNRXIxS3N0RUJqUnM0TDdhMmYyNVNacVA4aDJoUm15T0FiY1VqaHAxZ3dKbkQyMDRCdERyaC9wbmZkNVZnRlhjeUlhcEEydnp3Q0VMT2RzVDJGN3NiTU8rWjhNeEtNVG13bGhiM0RPaktPMU42WnFCOW5SeDlEYm5HTUJENW1iUkdTa3ZVOWlYbmpRbzg1ZklBMnFyRnp1US8rUUE9PSIgXSwKICAgICJleHAiIDogMTU5ODE5MzcyMzY3MSwKICAgICJhbGciIDogIlJTNTEyIiwKICAgICJuIiA6ICJ5LWQyWHd0bl9GX0pLQktTdmQ4N0JxZjNWR3RLWkNORGdpQWlGbmZtRjlMQzVrR0U5Zk93QUNWUl9DenAyMEpVREhQaHZIX21JYTlrVVo0SzBkb2pkVXAzWTF6YVZzei1VUWtTRzlac1NMemQ2M1VxdHNCRFBQYmE4U21MS3A1aTgtejU3UnEyZ2FramxFSVlyaEJpRDBHM0F0VTZuWnloX2hZV3E5OTZ2Y19feHUtNFNhWHJRZzJFNWtzVVZqNm0yb2lSSGw3ak81N0VxRlc5YWpCenNuNV9wZnNGOVE5UjNhOUxLSkdvLUo2QXVpOVJwNUJDS1dpUTFQOWJ2YkVIR0pPbXBsaEFSb3pZc2RCbmJoVHFySTZZMXZDSDg2Vmt1b205LWEyLUxSenJLa3YxNGJ0RlVNZ1k5NXF3bDdXUUpEd3doME5ON0ZxN0NweTRhcEptMlEiCiAgfSwgewogICAgImt0eSIgOiAiRUMiLAogICAgInVzZSIgOiAic2lnIiwKICAgICJjcnYiIDogIlAtMjU2IiwKICAgICJraWQiIDogImUxZmU2MjBhLWY4YjYtNDBlMi1iMzAwLTAxMmFmNWVjZTU3OV9zaWdfZXMyNTYiLAogICAgIng1YyIgOiBbICJNSUlCZURDQ0FSNmdBd0lCQWdJaEFPOGMvVUV1cDJJNjZXS2s4MGs4RWY2ZWVFK2tVT0llSjN2UWtsM3JubDVLTUFvR0NDcUdTTTQ5QkFNQ01DRXhIekFkQmdOVkJBTU1GbTk0UVhWMGFDQkRRU0JEWlhKMGFXWnBZMkYwWlhNd0hoY05NakF3T0RJeE1UUTBNVFUxV2hjTk1qQXdPREl6TVRRME1qQXpXakFoTVI4d0hRWURWUVFEREJadmVFRjFkR2dnUTBFZ1EyVnlkR2xtYVdOaGRHVnpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUV3b1ZBRkNlY0FFOTJvVFA3MERDWitrRjZUdStyeWdKMS9tRCt1aWdEemNscm0rSHlZenJqU2tKeTRrRzBWb0pBMmVlZ2VtazRGVU1HWHNNMEpDSTNhNk1uTUNVd0l3WURWUjBsQkJ3d0dnWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNCZ1JWSFNVQU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lGN2pvRG95Y3pEbzRkc2ZWUWQ0cXg5TmJUNUV3UjNEY0ZmY3dsMHZHQUVxQWlFQXZWdElWOHFWaDJJaVJmNWJWQ0xaSGJtOVpTa0dEdnhtaVdyMkhsSHBKMjA9IiBdLAogICAgIngiIDogIndvVkFGQ2VjQUU5Mm9UUDcwRENaLWtGNlR1LXJ5Z0oxX21ELXVpZ0R6Y2siLAogICAgInkiIDogImE1dmg4bU02NDBwQ2N1SkJ0RmFDUU5ubm9IcHBPQlZEQmw3RE5DUWlOMnMiLAogICAgImV4cCIgOiAxNTk4MTkzNzIzNjcxLAogICAgImFsZyIgOiAiRVMyNTYiCiAgfSwgewogICAgImt0eSIgOiAiRUMiLAogICAgInVzZSIgOiAic2lnIiwKICAgICJjcnYiIDogIlAtMzg0IiwKICAgICJraWQiIDogImY1YmZiODY4LTc1OTEtNDc0Yy04YTc4LWUwNzdkN2RlYjFiNF9zaWdfZXMzODQiLAogICAgIng1YyIgOiBbICJNSUlCdERDQ0FUcWdBd0lCQWdJZ2JVQVFSdW9QSEMwV3NPck0vOW5mWGYra1lwV2dyZW5tYmYxYUh2UzFCWDh3Q2dZSUtvWkl6ajBFQXdNd0lURWZNQjBHQTFVRUF3d1diM2hCZFhSb0lFTkJJRU5sY25ScFptbGpZWFJsY3pBZUZ3MHlNREE0TWpFeE5EUXhOVFphRncweU1EQTRNak14TkRReU1ETmFNQ0V4SHpBZEJnTlZCQU1NRm05NFFYVjBhQ0JEUVNCRFpYSjBhV1pwWTJGMFpYTXdkakFRQmdjcWhrak9QUUlCQmdVcmdRUUFJZ05pQUFROEt1d2ZSVkRleldiaU91VHhLRmI4WFBPeDRFaE9mZ1dkZTVmRGxqTnB3Vy9jZ2VFWDBJTUxFU1E1ZjZWS3NSTWtXNExDUXMwcEhGOWhjZ2lOcmlzRnFCcG5qYzZaVHFweFliQldHcXAvck9TMUlLY24yYzJlcXBGMWJhWGV1a09qSnpBbE1DTUdBMVVkSlFRY01Cb0dDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBZ1lFVlIwbEFEQUtCZ2dxaGtqT1BRUURBd05vQURCbEFqQm5DRFBGd016enljZjFPdnFmU25ZRng3akcvWkxhSXQ4cm5YNU9KUHdjUlE4SFpPd0NRZ2ExTEhPdlpHT3VVSEVDTVFDTEVyZ0lETGp4NFJIa0duQVJLUFRlNzlKUkpqbjhUNjRRbGNjaCtKLzVKWnlVNGF4UDU3d0tiN1JnU1BrSHl1Zz0iIF0sCiAgICAieCIgOiAiUENyc0gwVlEzczFtNGpyazhTaFdfRnp6c2VCSVRuNEZuWHVYdzVZemFjRnYzSUhoRjlDREN4RWtPWC1sU3JFVCIsCiAgICAieSIgOiAiSkZ1Q3drTE5LUnhmWVhJSWphNHJCYWdhWjQzT21VNnFjV0d3VmhxcWY2emt0U0NuSjluTm5xcVJkVzJsM3JwRCIsCiAgICAiZXhwIiA6IDE1OTgxOTM3MjM2NzEsCiAgICAiYWxnIiA6ICJFUzM4NCIKICB9LCB7CiAgICAia3R5IiA6ICJFQyIsCiAgICAidXNlIiA6ICJzaWciLAogICAgImNydiIgOiAiUC01MjEiLAogICAgImtpZCIgOiAiMTM3ZTMyMTktMDhmYi00MmM0LWJkMTItNmMxMTI3MjlhZTUxX3NpZ19lczUxMiIsCiAgICAieDVjIiA6IFsgIk1JSUIvekNDQVdDZ0F3SUJBZ0lnZC9GMGFZMnYyeWFLRDlXdWZ6aWRpUGxJRXpYdnp1M2RJS0EvK1Q1Ym9NZ3dDZ1lJS29aSXpqMEVBd1F3SVRFZk1CMEdBMVVFQXd3V2IzaEJkWFJvSUVOQklFTmxjblJwWm1sallYUmxjekFlRncweU1EQTRNakV4TkRReE5UWmFGdzB5TURBNE1qTXhORFF5TUROYU1DRXhIekFkQmdOVkJBTU1GbTk0UVhWMGFDQkRRU0JEWlhKMGFXWnBZMkYwWlhNd2dac3dFQVlIS29aSXpqMENBUVlGSzRFRUFDTURnWVlBQkFGdGVvQk91YXpkY3BETWtNeS9LSmUvUHZNZmQvb1pOV0ZGenFPbmwwd28vR1Q5VkhxOTMwcCtML0Fld0dvd0hwazlZNDZSOTlBNHd5c0svR0Y5SUZwcmpnQi83YXYwSzFPdXNIQjlSZ2tWWHVvTW9WWG9WVDdZdHZCQm9PaFhXSlR4MlZXZHRUTjhyamoweDcyWFVOM1YzOVBHMTJvdTdteEhNQk1aWGpPWjkraEVOS01uTUNVd0l3WURWUjBsQkJ3d0dnWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNCZ1JWSFNVQU1Bb0dDQ3FHU000OUJBTUVBNEdNQURDQmlBSkNBZjd4bXNYb004RjBjbk1oYnZSampuTzhlR0pwaGF3ZXl5RmtXbURKSGhUTHkyeTAwM2JOWVkvOWtKZTlBMHRqQjV5NzBFNEhjaE5vL01HOXdGN0pSVmIvQWtJQmphdDBzeDM0eWNFbzI2TGNSWFF0T0E2a09oa2graVNZLy9seFV2Rml0Nkp0aDBZRUVTMUFZQndyM2tCK3VLVUVRc1lrK2JxUkxNUkx6eUtyOVNyWmNKUT0iIF0sCiAgICAieCIgOiAiQVcxNmdFNjVyTjF5a015UXpMOG9sNzgtOHg5My1oazFZVVhPbzZlWFRDajhaUDFVZXIzZlNuNHY4QjdBYWpBZW1UMWpqcEgzMERqREt3cjhZWDBnV211TyIsCiAgICAieSIgOiAiZi0ycjlDdFRyckJ3ZlVZSkZWN3FES0ZWNkZVLTJMYndRYURvVjFpVThkbFZuYlV6Zks0NDlNZTlsMURkMWRfVHh0ZHFMdTVzUnpBVEdWNHptZmZvUkRRIiwKICAgICJleHAiIDogMTU5ODE5MzcyMzY3MSwKICAgICJhbGciIDogIkVTNTEyIgogIH0sIHsKICAgICJrdHkiIDogIlJTQSIsCiAgICAiZSIgOiAiQVFBQiIsCiAgICAidXNlIiA6ICJzaWciLAogICAgImNydiIgOiAiIiwKICAgICJraWQiIDogImFlYTVmYzRmLTYxNGEtNDVlYS05OWMzLTEwNmI5N2JjNGI3N19zaWdfcHMyNTYiLAogICAgIng1YyIgOiBbICJNSUlEYkRDQ0FpQ2dBd0lCQWdJaEFNbmVXZ3pOUnhrS2tKeWNyK2NjNHV3K2tRNnM1d2x2eDhrQm4rdjhtSzArTUVFR0NTcUdTSWIzRFFFQkNqQTBvQTh3RFFZSllJWklBV1VEQkFJQkJRQ2hIREFhQmdrcWhraUc5dzBCQVFnd0RRWUpZSVpJQVdVREJBSUJCUUNpQXdJQklEQWhNUjh3SFFZRFZRUUREQlp2ZUVGMWRHZ2dRMEVnUTJWeWRHbG1hV05oZEdWek1CNFhEVEl3TURneU1URTBOREUxTmxvWERUSXdNRGd5TXpFME5ESXdNMW93SVRFZk1CMEdBMVVFQXd3V2IzaEJkWFJvSUVOQklFTmxjblJwWm1sallYUmxjekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLallOVzBTMXFZaXZBSVoxRkVNQ2FrRWRhQ0Nxa0tEWWNpZzVoSGVOMWNWRE8yaUpKb2ZSdEhCRGhhZE9CVUZSTFFlV0MvRldBVVgxU1JsTHM2OWNPaDk3Sy9wdllUbEtDY1NFQS9LUi9yMm9pYlY2NU01NTdjVmpUcWxPZS9jNVJsWDNNMWdwMFBQT1ZEemVmcUlsSHgzaVlCM2ZuZUFVUkJ6VXdmbVpOd2lGaEtkZFlNL2g3M3RuazFIUFArWElpUFRvOStkUWI5NHI3U2NQaG5uU3hWWkZ4c3NweFBtSjJIR3FnVlVrdFFIdDd4T1VCQVVaclYrOU5DS21WZGVNYm9ONGUrTlZ6aUo2c09jNXpYaHc5bmIwdElHd3JDZWh4R3hyOHJ5YmxIZjAwaUJ5VFNQMldDVHpCS1BuS3VoZEtLV3R1bld3TFZqd21LZ0VFakV0REVDQXdFQUFhTW5NQ1V3SXdZRFZSMGxCQnd3R2dZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ0JnUlZIU1VBTUVFR0NTcUdTSWIzRFFFQkNqQTBvQTh3RFFZSllJWklBV1VEQkFJQkJRQ2hIREFhQmdrcWhraUc5dzBCQVFnd0RRWUpZSVpJQVdVREJBSUJCUUNpQXdJQklBT0NBUUVBQisrQ3FieWowcForeWYzS0ZsTzBnWlRZdWUvSkVrME11cHlSOENtTUw1MDd5RStxdE5Vd3paeGZvTkh4cWdiZUIwa09xditlTTFOeEVKZzdqdjhEamptTDFnS2dSVlU3NjVFR2l6NjZpQVJmOHREZDM2dTl6ZjREYjNjUjhaRjltWk5WdkxZSmw2a21XMy9mUWIzTGdZVHhVNkg0dXJ3V3RkSjRvajVRRlZDOXAvVjRjanN5OU9VeDlMakVtaFNvQzBKdGdKZHdkWjYzNVZNcWI2WGVnVzdJL0xIRllvbXJUc1JsZVFUcVJUS2tCKzVSOFA0OFU5RWc0V055MVFOdE1FRWtWUDM3K2tCMEdPM2tqWlgrSFNobXN4WFBOampmcVBLK1EwSEFnNUtWa0ViTGhvbFBkSUNoa0NrcXh5UkdxWFB2aUJIVW5ndG04K3lkZXZsTjZ3PT0iIF0sCiAgICAiZXhwIiA6IDE1OTgxOTM3MjM2NzEsCiAgICAiYWxnIiA6ICJQUzI1NiIsCiAgICAibiIgOiAicU5nMWJSTFdwaUs4QWhuVVVRd0pxUVIxb0lLcVFvTmh5S0RtRWQ0M1Z4VU03YUlrbWg5RzBjRU9GcDA0RlFWRXRCNVlMOFZZQlJmVkpHVXV6cjF3Nkgzc3ItbTloT1VvSnhJUUQ4cEgtdmFpSnRYcmt6bm50eFdOT3FVNTc5emxHVmZjeldDblE4ODVVUE41LW9pVWZIZUpnSGQtZDRCUkVITlRCLVprM0NJV0VwMTFnei1IdmUyZVRVYzhfNWNpSTlPajM1MUJ2M2l2dEp3LUdlZExGVmtYR3l5bkUtWW5ZY2FxQlZTUzFBZTN2RTVRRUJSbXRYNzAwSXFaVjE0eHVnM2g3NDFYT0lucXc1em5OZUhEMmR2UzBnYkNzSjZIRWJHdnl2SnVVZF9UU0lISk5JX1pZSlBNRW8tY3E2RjBvcGEyNmRiQXRXUENZcUFRU01TME1RIgogIH0sIHsKICAgICJrdHkiIDogIlJTQSIsCiAgICAiZSIgOiAiQVFBQiIsCiAgICAidXNlIiA6ICJzaWciLAogICAgImNydiIgOiAiIiwKICAgICJraWQiIDogIjA2NDhmMGYxLTVlMTAtNDFhYi1iYzc5LTJlYjQ4YjE1NzI5M19zaWdfcHMzODQiLAogICAgIng1YyIgOiBbICJNSUlEYXpDQ0FoK2dBd0lCQWdJZ2RkRndvRkYrTHNJS0p0SVhsNVN2RkJqcGY5VjVtTjladFlpeGJxY1FYMVV3UVFZSktvWklodmNOQVFFS01EU2dEekFOQmdsZ2hrZ0JaUU1FQWdJRkFLRWNNQm9HQ1NxR1NJYjNEUUVCQ0RBTkJnbGdoa2dCWlFNRUFnSUZBS0lEQWdFd01DRXhIekFkQmdOVkJBTU1GbTk0UVhWMGFDQkRRU0JEWlhKMGFXWnBZMkYwWlhNd0hoY05NakF3T0RJeE1UUTBNVFUzV2hjTk1qQXdPREl6TVRRME1qQXpXakFoTVI4d0hRWURWUVFEREJadmVFRjFkR2dnUTBFZ1EyVnlkR2xtYVdOaGRHVnpNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQWxxVVNZU2FaMG1wcVB4MVZET2Q3dEsvQVVqTm80VmdpSlNWUVgyMmUvSGFRb2lrMmZOWHNkOU9maDN6MkJOcytUcFp2T2tucHJaYWVKL1FPQkNObUl6WEttdmpYUHlpVXBoZHJvdS9jVmdLc0tDbWcwTGxVaVVKbVNKMzFHbXhkMUMvVThwV0F3YlRkUEluZHJZdHcxYU96OFh4S3l5VkVtZ2VIcE9peGgzYkNicmk4NmJXekxJQzcxT1o4R280THJON0Nxd0FqeUp6MHFRbnh1V1BXaWU5WkI0N0RMM0E2VjdyWUFmMVlqRGNSZ0p5ZktLSUkwc2dPYzdmZTZlbnpEcXVCbUUvQ3p0MUUxOW1DRDZOV0ZsdTFCMXErcHpHQldLRmo5RHkrbWY1WmprNkpKQ0pWN1BKMDBpc21zbnVUVUhTR3F3QWU1NEN0RkZxcFpOK2Mzd0lEQVFBQm95Y3dKVEFqQmdOVkhTVUVIREFhQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJR0JGVWRKUUF3UVFZSktvWklodmNOQVFFS01EU2dEekFOQmdsZ2hrZ0JaUU1FQWdJRkFLRWNNQm9HQ1NxR1NJYjNEUUVCQ0RBTkJnbGdoa2dCWlFNRUFnSUZBS0lEQWdFd0E0SUJBUUFqeXpXNUxEaEM3R2dvOEVZaGhSbURHK3JPQ3VuUVZNM1dyc2FrMWxtWkp0NUEzL0RGYnVyZzYzOTZ1UEs1UmRYRFIrbHIrTzl1SjN2Sy9EWkoyNGkySkdpVFhCMG4yWnltdE80dnJOclIrbG5DZUY5dHhlR2Y0Ui9tOVhpMmNOdWZHU2Q0ZjM3aTZjZGhEMWh5ME1PVC9EbHg3TzY3cHVCcTRTdWl5dkdieVFXNWJJdHJmUnBoL3dyQzhQQkxjWEJOQ0xZV3p3bGNoaHNoOFVKQytPVTB3S294bVFwbVhiQ3FWVEt3VEY1RCtiZEFZYk9qSURyTkpHZjA4ZXdtdmNQVHMvTzd4MmxxU1pTWDJ3ejFWQTdKR25kSVJmTE9JallpWmhQdXlTcTk2YVFZa2swMUJJL0lESHR6dFpkcVlJa3lyZTdXa3RrVTJIREdJT0F2R2xXUSIgXSwKICAgICJleHAiIDogMTU5ODE5MzcyMzY3MSwKICAgICJhbGciIDogIlBTMzg0IiwKICAgICJuIiA6ICJscVVTWVNhWjBtcHFQeDFWRE9kN3RLX0FVak5vNFZnaUpTVlFYMjJlX0hhUW9pazJmTlhzZDlPZmgzejJCTnMtVHBadk9rbnByWmFlSl9RT0JDTm1JelhLbXZqWFB5aVVwaGRyb3VfY1ZnS3NLQ21nMExsVWlVSm1TSjMxR214ZDFDX1U4cFdBd2JUZFBJbmRyWXR3MWFPejhYeEt5eVZFbWdlSHBPaXhoM2JDYnJpODZiV3pMSUM3MU9aOEdvNExyTjdDcXdBanlKejBxUW54dVdQV2llOVpCNDdETDNBNlY3cllBZjFZakRjUmdKeWZLS0lJMHNnT2M3ZmU2ZW56RHF1Qm1FX0N6dDFFMTltQ0Q2TldGbHUxQjFxLXB6R0JXS0ZqOUR5LW1mNVpqazZKSkNKVjdQSjAwaXNtc251VFVIU0dxd0FlNTRDdEZGcXBaTi1jM3ciCiAgfSwgewogICAgImt0eSIgOiAiUlNBIiwKICAgICJlIiA6ICJBUUFCIiwKICAgICJ1c2UiIDogInNpZyIsCiAgICAiY3J2IiA6ICIiLAogICAgImtpZCIgOiAiYTdkOWM2OTAtNDhjYi00NDMwLTk2MGYtODVjODQwNjIwYThlX3NpZ19wczUxMiIsCiAgICAieDVjIiA6IFsgIk1JSURhekNDQWgrZ0F3SUJBZ0lnRFZDQS9mT1kxemk5YjQrM3pVSnVkdHpDSkFIbHdtK05RVWcreENKVG1WY3dRUVlKS29aSWh2Y05BUUVLTURTZ0R6QU5CZ2xnaGtnQlpRTUVBZ01GQUtFY01Cb0dDU3FHU0liM0RRRUJDREFOQmdsZ2hrZ0JaUU1FQWdNRkFLSURBZ0ZBTUNFeEh6QWRCZ05WQkFNTUZtOTRRWFYwYUNCRFFTQkRaWEowYVdacFkyRjBaWE13SGhjTk1qQXdPREl4TVRRME1UVTNXaGNOTWpBd09ESXpNVFEwTWpBeldqQWhNUjh3SFFZRFZRUUREQlp2ZUVGMWRHZ2dRMEVnUTJWeWRHbG1hV05oZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcUNXNy9TYVVDY2JsVkg1NFJkRDlxSkNTMDZHS1N3QlVPZ0JhQjVGcE93T0NRY3JlUFpTaVZqcFJvd2phK1B2VDlLRVByY1VyUG4wUldFQUdBZXJGeDRCZEUxdUJYMUx2QVlZZXcyQWRjdzRSYjJ1R1BoL0dEQndydnpwY0hmQURQb1lVaDlzWkdwQm5ySVduS1E1RWdlREFMUkl2eU13eEtFV0pCcnlmMG1jVHpjblZDazlBS0pOSEp0bWxyM29Dd3ZsVWR1blArVFZvWDNjV2NWUVNiZFBLSVVHaFJtTzJKQ01EZmVzc2FmMkdlY05ETi9QLzQzb3VBc045VE1iTjBrdlBHNm5JenJ6VzloWGRVOHZoK0h0T0F4TjhqaWZxYmFKelgyQ2lLc2M1QVhmSHpuWGxWR0kwNUlSdkJCSEloS3EvTG10RkRKSGJCRjBRb0RIQW13SURBUUFCb3ljd0pUQWpCZ05WSFNVRUhEQWFCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0lHQkZVZEpRQXdRUVlKS29aSWh2Y05BUUVLTURTZ0R6QU5CZ2xnaGtnQlpRTUVBZ01GQUtFY01Cb0dDU3FHU0liM0RRRUJDREFOQmdsZ2hrZ0JaUU1FQWdNRkFLSURBZ0ZBQTRJQkFRQVh4ZXZZZ1RNMW1VeWNLbFZQcFh5VVJNT3Zkb3A1UzI3c3QrTitWd1g4eXk4NkhwZ0NyalRUNWVZK0JzdDJEeVI0VENqK1FSRnlCTEJHdmFDS2pDVjNWWWVzQWwrem1MemdsRWFEN2hjM281eXc4SEVEWlJyVGFSUzNyVGxHck9NUWRCQXB4clFnZTc2em9XYlJZZXNOemwwcHR4MXZnK0xTL2NzUDBhblFCQkVNeTVKNmhrUkRPRDRNck9Cb2ZCT1ZocmRjcnBrUjNOMVJrT0JOdjNCRDN1aGx2UjJvY1ljZTZQcXgxZnJicVoxYXgrNzljVjNpSzluamxYQXR1T2Zlam1kNi80djZWUGRhalR5TTFHU0U2RUtBaGpwYkVWcUFwMFp1NWZPaHZ5OUpubnloN3dFN0lkMzV4QnJ2anlveU12Q1AvY0VtK0UvZjhjQWxOTXNaIiBdLAogICAgImV4cCIgOiAxNTk4MTkzNzIzNjcxLAogICAgImFsZyIgOiAiUFM1MTIiLAogICAgIm4iIDogInFDVzdfU2FVQ2NibFZINTRSZEQ5cUpDUzA2R0tTd0JVT2dCYUI1RnBPd09DUWNyZVBaU2lWanBSb3dqYS1QdlQ5S0VQcmNVclBuMFJXRUFHQWVyRng0QmRFMXVCWDFMdkFZWWV3MkFkY3c0UmIydUdQaF9HREJ3cnZ6cGNIZkFEUG9ZVWg5c1pHcEJucklXbktRNUVnZURBTFJJdnlNd3hLRVdKQnJ5ZjBtY1R6Y25WQ2s5QUtKTkhKdG1scjNvQ3d2bFVkdW5QLVRWb1gzY1djVlFTYmRQS0lVR2hSbU8ySkNNRGZlc3NhZjJHZWNORE5fUF80M291QXNOOVRNYk4wa3ZQRzZuSXpyelc5aFhkVTh2aC1IdE9BeE44amlmcWJhSnpYMkNpS3NjNUFYZkh6blhsVkdJMDVJUnZCQkhJaEtxX0xtdEZESkhiQkYwUW9ESEFtdyIKICB9LCB7CiAgICAia3R5IiA6ICJSU0EiLAogICAgImUiIDogIkFRQUIiLAogICAgInVzZSIgOiAiZW5jIiwKICAgICJjcnYiIDogIiIsCiAgICAia2lkIiA6ICI2YzAxMjgyNS03YTAzLTQ1MzItYmU2ZC0zNTdjMjJiYzE4OGVfZW5jX3JzYTFfNSIsCiAgICAieDVjIiA6IFsgIk1JSURBekNDQWV1Z0F3SUJBZ0lnYUxnMW9JWlEvekEzT2Vsa0ordkpsUGVibG1qcTVLbjh3RmhXSXhzZndWMHdEUVlKS29aSWh2Y05BUUVMQlFBd0lURWZNQjBHQTFVRUF3d1diM2hCZFhSb0lFTkJJRU5sY25ScFptbGpZWFJsY3pBZUZ3MHlNREE0TWpFeE5EUXhOVGRhRncweU1EQTRNak14TkRReU1ETmFNQ0V4SHpBZEJnTlZCQU1NRm05NFFYVjBhQ0JEUVNCRFpYSjBhV1pwWTJGMFpYTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDbEtxZkxBSVVyT2VQeGk1K2tyQk1rcXBNbEp5cjdqaURQcDcrNnE0K2dxbk9iakMwU1Z3MWhWY2ttc3prZlQzSk5XQklSTDd3TVBsNm52Wi85RTFSTHI5K2gzRjNQcjlSTHFiaWNSTkZvNk5ycFRlT1JrbUdLb2Y2UGROcTRCWlJqNEgrMHlpanhlRDkwMFYxa1lrTkwxWXhIUFA4NUZ4ZmxPbm0xN1NuZ3ExUEEvSnI3cHZRSVYrNlZnMG0wSHdmSzBaWjdTVnBNZ1dHM3JoVnNMWXpjbGQxMUo0bjhkQU5TK0VINDg1OVVrWmtTT0hINFU2Y0ZMc3VINTNQUGo5TlJXVEVmL2I1Z0pqN1I0YXZvNEd3ZFRTZUZ2RklUek5URWRUZkFVMU4xWDhiWVRPSnhiMGo3NFp4L0hsVHN6K1hUUzZyTUdVM1hrcnVyNXZjTWlITUxBZ01CQUFHakp6QWxNQ01HQTFVZEpRUWNNQm9HQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWdZRVZSMGxBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBQWxHYlV2SXlDTmtmODNpbDY2MHVST00yUjZWMlpHSDJFN0NNU2hCTWswdUU5Vk1NWEdmOVBwWUxoVE1wM1FHTllpeDdoZGFXYUZJQnlPeStuWmVyVXMwaE53bTFraTEwdno2VXA3MFZHc1Q0L0x3UnFLT21iU1lJUlpmQXJhWHJiaVJlTW8ya1NEbzBrenRlemhvM29GNUxZSDk1QjNLZkJwcVdINmtMa3dLeEpESElLd0oxem1SbGpvUlFWc2lISHRIWXQyN3c4aDFpRXNZaDJZQitacDhsMFNTdlhpUGtISWRpMHZJWHU1WitNMndYZnhyZUNscER1K01sMXJVMUZEK1FqM2FUMjM3MVV4dFRFWW5FbHF2a0UrMllMMTBjazJQMFlCck80VUFKaVpBaWNVRXZYdUJTVTNoaXN4NHZ4SnFzTXhRTEp4Slo2RkpURFVGSzBBPT0iIF0sCiAgICAiZXhwIiA6IDE1OTgxOTM3MjM2NzEsCiAgICAiYWxnIiA6ICJSU0ExXzUiLAogICAgIm4iIDogInBTcW55d0NGS3puajhZdWZwS3dUSktxVEpTY3EtNDRnejZlX3VxdVBvS3B6bTR3dEVsY05ZVlhKSnJNNUgwOXlUVmdTRVMtOERENWVwNzJmX1JOVVM2X2ZvZHhkejZfVVM2bTRuRVRSYU9qYTZVM2prWkpoaXFILWozVGF1QVdVWS1CX3RNb284WGdfZE5GZFpHSkRTOVdNUnp6X09SY1g1VHA1dGUwcDRLdFR3UHlhLTZiMENGZnVsWU5KdEI4SHl0R1dlMGxhVElGaHQ2NFZiQzJNM0pYZGRTZUpfSFFEVXZoQi1QT2ZWSkdaRWpoeC1GT25CUzdMaC1keno0X1RVVmt4SF8yLVlDWS0wZUdyNk9Cc0hVMG5oYnhTRTh6VXhIVTN3Rk5UZFZfRzJFemljVzlJLS1HY2Z4NVU3TV9sMDB1cXpCbE4xNUs3cS1iM0RJaHpDdyIKICB9LCB7CiAgICAia3R5IiA6ICJSU0EiLAogICAgImUiIDogIkFRQUIiLAogICAgInVzZSIgOiAiZW5jIiwKICAgICJjcnYiIDogIiIsCiAgICAia2lkIiA6ICIyOTRlMzIyYy0zMTYyLTQ2OTktOWU1Mi1jMzY4Yjc3ZWQ3ZmZfZW5jX3JzYS1vYWVwIiwKICAgICJ4NWMiIDogWyAiTUlJREJEQ0NBZXlnQXdJQkFnSWhBSXpyNEVyTVBObEc0amF0R0R6S2xwTEUza2lvZmNFbmIwdFdnZ295d3BjS01BMEdDU3FHU0liM0RRRUJDd1VBTUNFeEh6QWRCZ05WQkFNTUZtOTRRWFYwYUNCRFFTQkRaWEowYVdacFkyRjBaWE13SGhjTk1qQXdPREl4TVRRME1UVTRXaGNOTWpBd09ESXpNVFEwTWpBeldqQWhNUjh3SFFZRFZRUUREQlp2ZUVGMWRHZ2dRMEVnUTJWeWRHbG1hV05oZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcll0SWtmSEkraHZVUGhzbHVQUjRFemxLNlY0KzhDOWp4SnJDTkxMajI3amxQaklmRG0xeWNPclVRa1ZuYmRGKzNTaEw1ZEN6VERkRGhTZEJjS1BVS2xPVGdsNXdZT1IzeE5xVGRFKzhUZ21LemNRVDI2L0llYjFlc0Y1VlNWWEY3eEVEWlNQUUdXQ3pYaFFrVmM3QTRkWmp1VzRGbWtzR2d6MWd5RFBiOFFPOEs0bVA3TnVVZ3hHOWNmaURiekNLUWdUcmlkdDU5cjZlYUsvZ2NmYkt4S3NOTW5UcVFlOXozUzVJVTAyOFhjRXZraUJ3R21qZGFFaFptNVUrbVJ2eVA0QTJnelpsQUtGMnBFQ1B6OUpkVk5EZHhUUzdrcENob3RjejlML3Q3TnhRN2hFb2lNdjZod1UvWEFwaGlvRFp0QXlhTmx1Yzg4NFVQN2dWaGhnTlJRSURBUUFCb3ljd0pUQWpCZ05WSFNVRUhEQWFCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0lHQkZVZEpRQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR0xMTGx0TU5kWVNXZktnNnpjUUFxZ0thSnI0bnNsYWZSTTFKWVh1RXdRdlR6aDFER29HN3FsZ2ZXaEJUYnJpRndvdHZnSkpsS3l6NjcwWjBOUEZpMjNVSmFncmhKSEc1ZVJFVFpmOW9SVTVvSGJ1L2pVaDlhbTJIQmZNa29QT0dyeVhuU0pFOGlHRC9GbGw3dzFoQzZkell5b09YRGNQNHpHOHY2WUFBNklOQkorN1dhQ2ZmWmdIOVZGZllBS1BFaTdUWHl5UDBwdFl1enJYWWFKalYvc3BzcGhnOFUrdjJtM1p1eUpUcVV2c0Y5V3FZb0prdlJXWGNVUkxIT2lHRTNLNC9PdWQxamhYRThFaWZkdFQ0L1h3THQ2czltYjhUV2xBSUg5TXFSd2lnV3ZYejllbmtKQkdZMi9STUEvK2ZjNkxLblp5VjBNamhYckJTbXNxWFNnPSIgXSwKICAgICJleHAiIDogMTU5ODE5MzcyMzY3MSwKICAgICJhbGciIDogIlJTQS1PQUVQIiwKICAgICJuIiA6ICJyWXRJa2ZISS1odlVQaHNsdVBSNEV6bEs2VjQtOEM5anhKckNOTExqMjdqbFBqSWZEbTF5Y09yVVFrVm5iZEYtM1NoTDVkQ3pURGREaFNkQmNLUFVLbE9UZ2w1d1lPUjN4TnFUZEUtOFRnbUt6Y1FUMjZfSWViMWVzRjVWU1ZYRjd4RURaU1BRR1dDelhoUWtWYzdBNGRaanVXNEZta3NHZ3oxZ3lEUGI4UU84SzRtUDdOdVVneEc5Y2ZpRGJ6Q0tRZ1RyaWR0NTlyNmVhS19nY2ZiS3hLc05NblRxUWU5ejNTNUlVMDI4WGNFdmtpQndHbWpkYUVoWm01VS1tUnZ5UDRBMmd6WmxBS0YycEVDUHo5SmRWTkRkeFRTN2twQ2hvdGN6OUxfdDdOeFE3aEVvaU12Nmh3VV9YQXBoaW9EWnRBeWFObHVjODg0VVA3Z1ZoaGdOUlEiCiAgfSBdCn0=
oxAuthConfErrors:: 
oxRevision: 1

dn: ou=oxtrust,ou=configuration,o=gluu
objectClass: top
objectClass: oxTrustConfiguration
ou: oxtrust
oxTrustConfApplication:: ewogICJvcmdJbmFtZSI6ICIiLAogICJvcmdTdXBwb3J0RW1haWwiOiAidHR0QG1haWwucnUiLAogICJiYXNlRE4iOiAibz1nbHV1IiwKICAiYmFzZUVuZHBvaW50IjogImh0dHBzOi8vaW5zdGFuY2UtMy9pZGVudGl0eS9yZXN0djEiLAogICJpZHBVcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0zIiwKICAiYXBwbGljYXRpb25VcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0zIiwKICAia2V5c3RvcmVQYXRoIjogIi9ldGMvY2VydHMvc2hpYklEUC5qa3MiLAogICJrZXlzdG9yZVBhc3N3b3JkIjogIlc3dlBXZkwyclRQMyIsCiAgInBlcnNvbk9iamVjdENsYXNzVHlwZXMiOiBbCiAgICAiZ2x1dUN1c3RvbVBlcnNvbiIsCiAgICAiZ2x1dVBlcnNvbiIsCiAgICAiZWR1UGVyc29uIgogIF0sCiAgInBlcnNvbk9iamVjdENsYXNzRGlzcGxheU5hbWVzIjogWwogICAgImdsdXVDdXN0b21QZXJzb24iLAogICAgImdsdXVQZXJzb24iLAogICAgImVkdVBlcnNvbiIKICBdLAogICJzdm5Db25maWd1cmF0aW9uU3RvcmVSb290IjogInVudXNlZCIsCiAgInN2bkNvbmZpZ3VyYXRpb25TdG9yZVBhc3N3b3JkIjogInVudXNlZCIsCiAgInBlcnNpc3RTVk4iOiBmYWxzZSwKICAiYWxsb3dQZXJzb25Nb2RpZmljYXRpb24iOiB0cnVlLAogICJ1cGRhdGVTdGF0dXMiOiB0cnVlLAogICJjbGllbnRBc3NvY2lhdGlvbkF0dHJpYnV0ZSI6ICJpbnVtIiwKICAicGVyc29uQ3VzdG9tT2JqZWN0Q2xhc3MiOiAiZ2x1dUN1c3RvbVBlcnNvbiIsCiAgImNvbnRhY3RPYmplY3RDbGFzc1R5cGVzIjogW10sCiAgImNvbnRhY3RPYmplY3RDbGFzc0Rpc3BsYXlOYW1lcyI6IFtdLAogICJwaG90b1JlcG9zaXRvcnlSb290RGlyIjogIi92YXIvZ2x1dS9waG90b3MiLAogICJwaG90b1JlcG9zaXRvcnlUaHVtYldpZHRoIjogMzAwLAogICJwaG90b1JlcG9zaXRvcnlUaHVtYkhlaWdodCI6IDMwMCwKICAicGhvdG9SZXBvc2l0b3J5Q291bnRMZXZlbGVzIjogMywKICAicGhvdG9SZXBvc2l0b3J5Q291bnRGb2xkZXJzUGVyTGV2ZWwiOiAyMCwKICAic2hpYmJvbGV0aDNGZWRlcmF0aW9uUm9vdERpciI6ICIvb3B0L3NoaWJib2xldGgtZmVkZXJhdGlvbiIsCiAgInNwTWV0YWRhdGFQYXRoIjogIiIsCiAgImxvZ29Mb2NhdGlvbiI6ICIvdmFyL2dsdXUvcGhvdG9zIiwKICAiZ2x1dVNwQXR0cmlidXRlcyI6IFtdLAogICJjb25maWdHZW5lcmF0aW9uIjogdHJ1ZSwKICAiaWdub3JlVmFsaWRhdGlvbiI6IGZhbHNlLAogICJpZHBTZWN1cml0eUNlcnQiOiAiL2V0Yy9jZXJ0cy9zaGliSURQLmNydCIsCiAgImlkcFNlY3VyaXR5S2V5IjogIi9ldGMvY2VydHMvc2hpYklEUC5rZXkiLAogICJpZHBTZWN1cml0eUtleVBhc3N3b3JkIjogImJjSk1idWZPeWVpTXQrTXVmdW12VlE9PSIsCiAgImdsdXVTcENlcnQiOiAiL2V0Yy9jZXJ0cy9zaGliSURQLmNydCIsCiAgImlkcEJpbmREbiI6ICJjbj1EaXJlY3RvcnkgTWFuYWdlciIsCiAgImlkcEJpbmRQYXNzd29yZCI6ICJMbFVUb1NmMWJSMjNtR29sRGRtTSt3PT0iLAogICJpZHBMZGFwUHJvdG9jb2wiOiAibGRhcHMiLAogICJpZHBMZGFwU2VydmVyIjogImxvY2FsaG9zdDoxNjM2IiwKICAiaWRwVXNlckZpZWxkcyI6ICIiLAogICJsZGlmU3RvcmUiOiAiL3Zhci9nbHV1L2lkZW50aXR5L3JlbW92ZWQiLAogICJjYUNlcnRzTG9jYXRpb24iOiAiL3Vzci9qYXZhL2xhdGVzdC9qcmUvbGliL3NlY3VyaXR5L2NhY2VydHMiLAogICJjYUNlcnRzUGFzc3BocmFzZSI6ICIiLAogICJjZXJ0RGlyIjogIi9ldGMvY2VydHMvIiwKICAidGVtcENlcnREaXIiOiAiL2V0Yy9jZXJ0cy90ZW1wIiwKICAiY2x1c3RlcmVkSW51bXMiOiBbXSwKICAic2VydmljZXNSZXN0YXJ0VHJpZ2dlciI6ICIvb3B0L2dsdXUvZXNzZW50aWFsX2ZpbGVzL3RyaWdnZXJfcmVzdGFydF9vZl9zZXJ2aWNlc19kZWxldGVfbWVfdG9fZG9fc28iLAogICJveEF1dGhJc3N1ZXIiOiAiaHR0cHM6Ly9pbnN0YW5jZS0zIiwKICAib3hBdXRoU2VjdG9ySWRlbnRpZmllclVybCI6ICJodHRwczovL2luc3RhbmNlLTMvb3hhdXRoL3NlY3RvcmlkZW50aWZpZXIiLAogICJveEF1dGhDbGllbnRJZCI6ICIxMDAxLjJhNTAzNmMzLWYwMmYtNGQ0OC05ZGZlLTVhZjgwYjBmZTUyZCIsCiAgIm94QXV0aENsaWVudFBhc3N3b3JkIjogIkVNa011VjdJNWJmRld5OEVXcnNxbXc9PSIsCiAgIm94QXV0aENsaWVudFNjb3BlIjogIm9wZW5pZCtwcm9maWxlK2VtYWlsK3VzZXJfbmFtZSIsCiAgImxvZ2luUmVkaXJlY3RVcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0zL2lkZW50aXR5L2F1dGhjb2RlLmh0bSIsCiAgImxvZ291dFJlZGlyZWN0VXJsIjogImh0dHBzOi8vaW5zdGFuY2UtMy9pZGVudGl0eS9maW5pc2hsb2dvdXQuaHRtIiwKICAidW1hSXNzdWVyIjogImh0dHBzOi8vaW5zdGFuY2UtMyIsCiAgInNjaW1VbWFDbGllbnRJZCI6ICIxMjAxLjI4YmZlOTgxLTA3OGEtNDNjNS04YWVhLWZiN2Q2Y2QxN2JkNyIsCiAgInNjaW1VbWFDbGllbnRLZXlJZCI6ICIiLAogICJzY2ltVW1hUmVzb3VyY2VJZCI6ICIxMjAzLmRkNDE3ZmI3LTM1YTctNDFmNy1iY2U0LTJjMWNhNWRhMjBjYSIsCiAgInNjaW1VbWFTY29wZSI6ICJodHRwczovL2luc3RhbmNlLTMvb3hhdXRoL3Jlc3R2MS91bWEvc2NvcGVzL3NjaW1fYWNjZXNzIiwKICAic2NpbVVtYUNsaWVudEtleVN0b3JlRmlsZSI6ICIvZXRjL2NlcnRzL3NjaW0tcnMuamtzIiwKICAic2NpbVVtYUNsaWVudEtleVN0b3JlUGFzc3dvcmQiOiAiaTYyUk1EUTYzMlVxWGFBcmw0YmVlQT09IiwKICAiYXBpVW1hQ2xpZW50SWQiOiAiMTQwMS45OGNkZTE5NC01YzI5LTRjNDAtOWZkYi01YTI3YTk2MjFkZGIiLAogICJhcGlVbWFDbGllbnRLZXlJZCI6ICIiLAogICJhcGlVbWFSZXNvdXJjZUlkIjogIjE0MDMuMGY4MTJjODAtNWRkZS00NjljLWI1YzctYzM1MGQ4YmQ2ZGFlIiwKICAiYXBpVW1hU2NvcGUiOiAiaHR0cHM6Ly9pbnN0YW5jZS0zL294YXV0aC9yZXN0djEvdW1hL3Njb3Blcy9veHRydXN0LWFwaS1yZWFkIiwKICAiYXBpVW1hQ2xpZW50S2V5U3RvcmVGaWxlIjogIi9ldGMvY2VydHMvYXBpLXJzLmprcyIsCiAgImFwaVVtYUNsaWVudEtleVN0b3JlUGFzc3dvcmQiOiAiTkJYc0ExYUpFQ1k9IiwKICAiY3NzTG9jYXRpb24iOiAiIiwKICAianNMb2NhdGlvbiI6ICIiLAogICJycHRDb25uZWN0aW9uUG9vbFVzZUNvbm5lY3Rpb25Qb29saW5nIjogdHJ1ZSwKICAicnB0Q29ubmVjdGlvblBvb2xNYXhUb3RhbCI6IDIwMCwKICAicnB0Q29ubmVjdGlvblBvb2xEZWZhdWx0TWF4UGVyUm91dGUiOiAyMCwKICAicnB0Q29ubmVjdGlvblBvb2xWYWxpZGF0ZUFmdGVySW5hY3Rpdml0eSI6IDEwLAogICJycHRDb25uZWN0aW9uUG9vbEN1c3RvbUtlZXBBbGl2ZVRpbWVvdXQiOiA1LAogICJzaGliYm9sZXRoVmVyc2lvbiI6ICJ2MyIsCiAgInNoaWJib2xldGgzSWRwUm9vdERpciI6ICIvb3B0L3NoaWJib2xldGgtaWRwIiwKICAic2hpYmJvbGV0aDNTcENvbmZEaXIiOiAiL29wdC9zaGliYm9sZXRoLWlkcC9zcCIsCiAgIm9yZ2FuaXphdGlvbk5hbWUiOiAidHR0IiwKICAiaWRwM1NpZ25pbmdDZXJ0IjogIi9ldGMvY2VydHMvaWRwLXNpZ25pbmcuY3J0IiwKICAiaWRwM0VuY3J5cHRpb25DZXJ0IjogIi9ldGMvY2VydHMvaWRwLWVuY3J5cHRpb24uY3J0IiwKICAiY2xpZW50V2hpdGVMaXN0IjogWwogICAgIioiCiAgXSwKICAiY2xpZW50QmxhY2tMaXN0IjogWwogICAgIiouYXR0YWNrZXIuY29tLyoiCiAgXSwKICAic2NpbVRlc3RNb2RlIjogZmFsc2UsCiAgIm94VHJ1c3RBcGlUZXN0TW9kZSI6IGZhbHNlLAogICJTY2ltUHJvcGVydGllcyI6IHsKICAgICJtYXhDb3VudCI6IDIwMAogIH0sCiAgImNsZWFuU2VydmljZUludGVydmFsIjogMzAwLAogICJsb2dnaW5nTGV2ZWwiOiAiSU5GTyIsCiAgImxvZ2dpbmdMYXlvdXQiOiAidGV4dCIsCiAgInBhc3N3b3JkUmVzZXRSZXF1ZXN0RXhwaXJhdGlvblRpbWUiOiA2MDAsCiAgInVzZUxvY2FsQ2FjaGUiOiB0cnVlLAogICJwYXNzcG9ydFVtYUNsaWVudElkIjogIjE1MDEuMjdjZjA2NGYtNzg0OS00MzlhLTk2ZGMtOWZhYjgyNjRmODQ5IiwKICAicGFzc3BvcnRVbWFDbGllbnRLZXlJZCI6ICIiLAogICJwYXNzcG9ydFVtYVJlc291cmNlSWQiOiAiMTUwNC40MGFhYzk2Mi04YzRlLTQ2MzYtYjJlMy1kYjI0ZWQxNzBjNGYiLAogICJwYXNzcG9ydFVtYVNjb3BlIjogImh0dHBzOi8vaW5zdGFuY2UtMy9veGF1dGgvcmVzdHYxL3VtYS9zY29wZXMvcGFzc3BvcnRfYWNjZXNzIiwKICAicGFzc3BvcnRVbWFDbGllbnRLZXlTdG9yZUZpbGUiOiAiL2V0Yy9jZXJ0cy9wYXNzcG9ydC1ycy5qa3MiLAogICJwYXNzcG9ydFVtYUNsaWVudEtleVN0b3JlUGFzc3dvcmQiOiAiU3RpcjFWTTBQNDA0QVA4R2pKZUp6Zz09Igp9
oxTrustConfCacheRefresh:: ewogICAgInNvdXJjZUNvbmZpZ3MiOlsKICAgIF0sCiAgICAiaW51bUNvbmZpZyI6ewogICAgICAgICJjb25maWdJZCI6ImxvY2FsX2ludW0iLAogICAgICAgICJiaW5kRE4iOiJjbj1kaXJlY3RvcnkgbWFuYWdlciIsCiAgICAgICAgImJpbmRQYXNzd29yZCI6IkxsVVRvU2YxYlIyM21Hb2xEZG1NK3c9PSIsCiAgICAgICAgInNlcnZlcnMiOlsKICAgICAgICAgICAgImxvY2FsaG9zdDoxNjM2IgogICAgICAgIF0sCiAgICAgICAgIm1heENvbm5lY3Rpb25zIjoxMCwKICAgICAgICAidXNlU1NMIjp0cnVlLAogICAgICAgICJiYXNlRE5zIjpbCiAgICAgICAgICAgICJvdT1jYWNoZS1yZWZyZXNoLG89c2l0ZSIKICAgICAgICBdLAogICAgICAgICJwcmltYXJ5S2V5IjpudWxsLAogICAgICAgICJsb2NhbFByaW1hcnlLZXkiOm51bGwsCiAgICAgICAgInVzZUFub255bW91c0JpbmQiOmZhbHNlLAogICAgICAgICJlbmFibGVkIjp0cnVlLAogICAgICAgICJ2ZXJzaW9uIjowCiAgICB9LAogICAgInRhcmdldENvbmZpZyI6ewogICAgfSwKICAgICJsZGFwU2VhcmNoU2l6ZUxpbWl0IjoxMDAwLAogICAgImtleUF0dHJpYnV0ZXMiOlsKICAgIF0sCiAgICAia2V5T2JqZWN0Q2xhc3NlcyI6WwogICAgXSwKICAgICJzb3VyY2VBdHRyaWJ1dGVzIjpbCiAgICBdLAogICAgImN1c3RvbUxkYXBGaWx0ZXIiOm51bGwsCiAgICAidXBkYXRlTWV0aG9kIjoiY29weSIsCiAgICAia2VlcEV4dGVybmFsUGVyc29uIjp0cnVlLAogICAgInVzZVNlYXJjaExpbWl0IjpmYWxzZSwKICAgICJhdHRyaWJ1dGVNYXBwaW5nIjpbCiAgICBdLAogICAgInNuYXBzaG90Rm9sZGVyIjoiL3Zhci9nbHV1L2lkZW50aXR5L2NyLXNuYXBzaG90cyIsCiAgICAic25hcHNob3RNYXhDb3VudCI6MTAsCiAgICAiZGVmYXVsdEludW1TZXJ2ZXIiOnRydWUKfQo=
oxTrustConfImportPerson:: ewoJIm1hcHBpbmdzIjogW3sKCQkibGRhcE5hbWUiOiAidWlkIiwKCQkiZGlzcGxheU5hbWUiOiAiVXNlcm5hbWUiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IHRydWUKCX0sIHsKCQkibGRhcE5hbWUiOiAiZ2l2ZW5OYW1lIiwKCQkiZGlzcGxheU5hbWUiOiAiRmlyc3QgTmFtZSIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogdHJ1ZQoJfSwgewoJCSJsZGFwTmFtZSI6ICJzbiIsCgkJImRpc3BsYXlOYW1lIjogIkxhc3QgTmFtZSIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogdHJ1ZQoJfSwgewoJCSJsZGFwTmFtZSI6ICJtYWlsIiwKCQkiZGlzcGxheU5hbWUiOiAiRW1haWwiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IHRydWUKCX0sIHsKCQkibGRhcE5hbWUiOiAidXNlclBhc3N3b3JkIiwKCQkiZGlzcGxheU5hbWUiOiAiUGFzc3dvcmQiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IGZhbHNlCgl9LCB7CgkJImxkYXBOYW1lIjogImdsdXVTdGF0dXMiLAoJCSJkaXNwbGF5TmFtZSI6ICJVc2VyIFN0YXR1cyIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogZmFsc2UKCX1dCn0=
oxRevision: 1

dn: ou=oxidp,ou=configuration,o=gluu
objectClass: top
objectClass: oxApplicationConfiguration
ou: oxidp
oxConfApplication:: ewogICAgImFwcGxpY2F0aW9uTmFtZSI6IlNhbWwiLAoKICAgICJvcGVuSWRQcm92aWRlclVybCI6Imh0dHBzOi8vaW5zdGFuY2UtMy8ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbiIsCiAgICAib3BlbklkQ2xpZW50SWQiOiIxMTAxLjQwOTlmMDNhLTMzNTgtNDhiMS05NDYwLWVkYjFjZTkyYzJkNSIsCiAgICAib3BlbklkQ2xpZW50UGFzc3dvcmQiOiJ4dmx4TFVNZUFWM0lWQmIzd1E2VHJ3PT0iLAogICAgIm9wZW5JZFNjb3BlcyI6WwogICAgICAgICJvcGVuaWQiLAogICAgICAgICJlbWFpbCIsCiAgICAgICAgInVzZXJfbmFtZSIKICAgIF0sCiAgICAib3BlbklkUmVkaXJlY3RVcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0zL2lkcC9BdXRobi9veEF1dGgiLAogICAgIm9wZW5JZFBvc3RMb2dvdXRSZWRpcmVjdFVyaSI6ICJodHRwczovL2luc3RhbmNlLTMvaWRwL3Byb2ZpbGUvTG9nb3V0IiwKICAgICJzY3JpcHREbiI6ICJvdT1zY3JpcHRzLG89Z2x1dSIKfQo=
oxRevision: 1

dn: ou=configuration,o=gluu
objectClass: top
objectClass: gluuConfiguration
ou: configuration
gluuMaxLogSize: 200
gluuWhitePagesEnabled: disabled
gluuOrgProfileMgt: false
gluuManageIdentityPermission: true
gluuFederationHostingEnabled: disabled
gluuVdsCacheRefreshEnabled: false
gluuScimEnabled: true
oxAuthenticationMode: simple_password_auth
oxTrustAuthenticationMode: simple_password_auth
gluuPassportEnabled: true
gluuRadiusEnabled: true
gluuSamlEnabled: true
oxCacheConfiguration: {"cacheProviderType": "NATIVE_PERSISTENCE", "memcachedConfiguration": {"servers":"localhost:11211", "maxOperationQueueLength":100000, "bufferSize":32768, "defaultPutExpiration":60, "connectionFactoryType": "DEFAULT"}, "inMemoryConfiguration": {"defaultPutExpiration":60}, "nativePersistenceConfiguration": {"defaultPutExpiration":60, "defaultCleanupBatchSize": 10000}, "redisConfiguration":{"servers":"localhost:6379", "defaultPutExpiration": 60}}
oxDocumentStoreConfiguration: {"documentStoreType":"LOCAL","localConfiguration":{"baseLocation":"/"},"jcaConfiguration":{"serverUrl":"http://localhost:8080/rmi","workspaceName":"default","connectionTimeout":15,"userId":"admin","password":""},"webDavConfiguration":null}
oxTrustStoreConf: {"useJreCertificates":true}
oxTrustCacheRefreshServerIpAddress: 255.255.255.255
oxIDPAuthentication: {"type": "auth",
  "name": null,
  "level": 0,
  "priority": 1,
  "enabled": false,
  "version": 0,
  "config": {"configId": "auth_ldap_server",
            "servers": ["localhost:1636"],
            "maxConnections": 1000,
            "bindDN": "cn=directory manager",
            "bindPassword": "e2FlsakbQGqDGnuOniQbyA==",
            "useSSL": "true",
            "baseDNs": ["ou=people,o=gluu"],
            "primaryKey": "uid",
            "localPrimaryKey": "uid",
            "useAnonymousBind": false,
            "enabled": false}
  }
oxLogViewerConfig: {
  "log_template":[
    {
      "value1":"oxAuth logs",
      "value2":"/opt/gluu/jetty/oxauth/logs/*.log",
      "description":""
    },
    {
      "value1":"oxTrust logs",
      "value2":"/opt/gluu/jetty/identity/logs/*.log",
      "description":""
    }
  ]}

######################################

# SAML Trust Relationships - Level 2
dn: ou=trustRelationships,o=gluu
objectClass: top
objectClass: organizationalUnit
ou: trustRelationships

######################################

# SAML2 Federations - LEVEL 2
# WARNING ! This feature is deprecated! Use Jagger: http://www.gluu.co/jag
dn: ou=federations,o=gluu
objectClass: top
objectClass: organizationalUnit
ou: federations

dn: ou=oxauth,ou=configuration,o=gluu
objectClass: oxAuthConfiguration
objectClass: top
ou: oxauth
oxAuthConfDynamic:: 
oxAuthConfStatic:: ewogICAgImJhc2VEbiI6ewogICAgICAgICJjb25maWd1cmF0aW9uIjoib3U9Y29uZmlndXJhdGlvbixvPWdsdXUiLAogICAgICAgICJwZW9wbGUiOiJvdT1wZW9wbGUsbz1nbHV1IiwKICAgICAgICAiZ3JvdXBzIjoib3U9Z3JvdXBzLG89Z2x1dSIsCiAgICAgICAgImNsaWVudHMiOiJvdT1jbGllbnRzLG89Z2x1dSIsCiAgICAgICAgInNlc3Npb25zIjoib3U9c2Vzc2lvbnMsbz1nbHV1IiwKICAgICAgICAidG9rZW5zIjoib3U9dG9rZW5zLG89Z2x1dSIsCiAgICAgICAgImF1dGhvcml6YXRpb25zIjogIm91PWF1dGhvcml6YXRpb25zLG89Z2x1dSIsCiAgICAgICAgInNjb3BlcyI6Im91PXNjb3BlcyxvPWdsdXUiLAogICAgICAgICJhdHRyaWJ1dGVzIjoib3U9YXR0cmlidXRlcyxvPWdsdXUiLAogICAgICAgICJzY3JpcHRzIjogIm91PXNjcmlwdHMsbz1nbHV1IiwKICAgICAgICAidW1hQmFzZSI6Im91PXVtYSxvPWdsdXUiLAogICAgICAgICJ1bWFQb2xpY3kiOiJvdT1wb2xpY2llcyxvdT11bWEsbz1nbHV1IiwKICAgICAgICAidTJmQmFzZSI6Im91PXUyZixvPWdsdXUiLAogICAgICAgICJtZXRyaWMiOiJvdT1zdGF0aXN0aWMsbz1tZXRyaWMiLAogICAgICAgICJzZWN0b3JJZGVudGlmaWVycyI6ICJvdT1zZWN0b3JfaWRlbnRpZmllcnMsbz1nbHV1IiwKICAgICAgICAiY2liYSI6ICJvdT1jaWJhLG89Z2x1dSIKICAgIH0KfQo=
oxAuthConfWebKeys:: 
oxAuthConfErrors:: 
oxRevision: 1

dn: ou=oxtrust,ou=configuration,o=gluu
objectClass: top
objectClass: oxTrustConfiguration
ou: oxtrust
oxTrustConfApplication:: ewogICJvcmdJbmFtZSI6ICIiLAogICJvcmdTdXBwb3J0RW1haWwiOiAidGVzdEBtYWlsLnJ1IiwKICAiYmFzZUROIjogIm89Z2x1dSIsCiAgImJhc2VFbmRwb2ludCI6ICJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvaWRlbnRpdHkvcmVzdHYxIiwKICAiaWRwVXJsIjogImh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbCIsCiAgImFwcGxpY2F0aW9uVXJsIjogImh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbCIsCiAgImtleXN0b3JlUGF0aCI6ICIvZXRjL2NlcnRzL3NoaWJJRFAuamtzIiwKICAia2V5c3RvcmVQYXNzd29yZCI6ICJiVFF2bXQyMTdCaWciLAogICJwZXJzb25PYmplY3RDbGFzc1R5cGVzIjogWwogICAgImdsdXVDdXN0b21QZXJzb24iLAogICAgImdsdXVQZXJzb24iLAogICAgImVkdVBlcnNvbiIKICBdLAogICJwZXJzb25PYmplY3RDbGFzc0Rpc3BsYXlOYW1lcyI6IFsKICAgICJnbHV1Q3VzdG9tUGVyc29uIiwKICAgICJnbHV1UGVyc29uIiwKICAgICJlZHVQZXJzb24iCiAgXSwKICAic3ZuQ29uZmlndXJhdGlvblN0b3JlUm9vdCI6ICJ1bnVzZWQiLAogICJzdm5Db25maWd1cmF0aW9uU3RvcmVQYXNzd29yZCI6ICJ1bnVzZWQiLAogICJwZXJzaXN0U1ZOIjogZmFsc2UsCiAgImFsbG93UGVyc29uTW9kaWZpY2F0aW9uIjogdHJ1ZSwKICAidXBkYXRlU3RhdHVzIjogdHJ1ZSwKICAiY2xpZW50QXNzb2NpYXRpb25BdHRyaWJ1dGUiOiAiaW51bSIsCiAgInBlcnNvbkN1c3RvbU9iamVjdENsYXNzIjogImdsdXVDdXN0b21QZXJzb24iLAogICJjb250YWN0T2JqZWN0Q2xhc3NUeXBlcyI6IFtdLAogICJjb250YWN0T2JqZWN0Q2xhc3NEaXNwbGF5TmFtZXMiOiBbXSwKICAicGhvdG9SZXBvc2l0b3J5Um9vdERpciI6ICIvdmFyL2dsdXUvcGhvdG9zIiwKICAicGhvdG9SZXBvc2l0b3J5VGh1bWJXaWR0aCI6IDMwMCwKICAicGhvdG9SZXBvc2l0b3J5VGh1bWJIZWlnaHQiOiAzMDAsCiAgInBob3RvUmVwb3NpdG9yeUNvdW50TGV2ZWxlcyI6IDMsCiAgInBob3RvUmVwb3NpdG9yeUNvdW50Rm9sZGVyc1BlckxldmVsIjogMjAsCiAgInNoaWJib2xldGgzRmVkZXJhdGlvblJvb3REaXIiOiAiL29wdC9zaGliYm9sZXRoLWZlZGVyYXRpb24iLAogICJzcE1ldGFkYXRhUGF0aCI6ICIiLAogICJsb2dvTG9jYXRpb24iOiAiL3Zhci9nbHV1L3Bob3RvcyIsCiAgImdsdXVTcEF0dHJpYnV0ZXMiOiBbXSwKICAiY29uZmlnR2VuZXJhdGlvbiI6IHRydWUsCiAgImlnbm9yZVZhbGlkYXRpb24iOiBmYWxzZSwKICAiaWRwU2VjdXJpdHlDZXJ0IjogIi9ldGMvY2VydHMvc2hpYklEUC5jcnQiLAogICJpZHBTZWN1cml0eUtleSI6ICIvZXRjL2NlcnRzL3NoaWJJRFAua2V5IiwKICAiaWRwU2VjdXJpdHlLZXlQYXNzd29yZCI6ICJCT1FNZkFldFV4eklRUS82djJRSWp3PT0iLAogICJnbHV1U3BDZXJ0IjogIi9ldGMvY2VydHMvc2hpYklEUC5jcnQiLAogICJpZHBCaW5kRG4iOiAiY249RGlyZWN0b3J5IE1hbmFnZXIiLAogICJpZHBCaW5kUGFzc3dvcmQiOiAiZTJGbHNha2JRR3FER251T25pUWJ5QT09IiwKICAiaWRwTGRhcFByb3RvY29sIjogImxkYXBzIiwKICAiaWRwTGRhcFNlcnZlciI6ICJsb2NhbGhvc3Q6MTYzNiIsCiAgImlkcFVzZXJGaWVsZHMiOiAiIiwKICAibGRpZlN0b3JlIjogIi92YXIvZ2x1dS9pZGVudGl0eS9yZW1vdmVkIiwKICAiY2FDZXJ0c0xvY2F0aW9uIjogIi91c3IvamF2YS9sYXRlc3QvanJlL2xpYi9zZWN1cml0eS9jYWNlcnRzIiwKICAiY2FDZXJ0c1Bhc3NwaHJhc2UiOiAiIiwKICAiY2VydERpciI6ICIvZXRjL2NlcnRzLyIsCiAgInRlbXBDZXJ0RGlyIjogIi9ldGMvY2VydHMvdGVtcCIsCiAgImNsdXN0ZXJlZEludW1zIjogW10sCiAgInNlcnZpY2VzUmVzdGFydFRyaWdnZXIiOiAiL29wdC9nbHV1L2Vzc2VudGlhbF9maWxlcy90cmlnZ2VyX3Jlc3RhcnRfb2Zfc2VydmljZXNfZGVsZXRlX21lX3RvX2RvX3NvIiwKICAib3hBdXRoSXNzdWVyIjogImh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbCIsCiAgIm94QXV0aFNlY3RvcklkZW50aWZpZXJVcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsL294YXV0aC9zZWN0b3JpZGVudGlmaWVyIiwKICAib3hBdXRoQ2xpZW50SWQiOiAiMTAwMS5lMDg1ZjY2ZS0zM2RjLTRhYzEtOGMwOC0zOWZhYTA3YjRmZjgiLAogICJveEF1dGhDbGllbnRQYXNzd29yZCI6ICJ0ZHlpYjVOTGV5b3BHQTVTVnNxTVdRPT0iLAogICJveEF1dGhDbGllbnRTY29wZSI6ICJvcGVuaWQrcHJvZmlsZStlbWFpbCt1c2VyX25hbWUiLAogICJsb2dpblJlZGlyZWN0VXJsIjogImh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbC9pZGVudGl0eS9hdXRoY29kZS5odG0iLAogICJsb2dvdXRSZWRpcmVjdFVybCI6ICJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvaWRlbnRpdHkvZmluaXNobG9nb3V0Lmh0bSIsCiAgInVtYUlzc3VlciI6ICJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwiLAogICJzY2ltVW1hQ2xpZW50SWQiOiAiMTIwMS5lYWU5ZTYyOS0xZGZmLTQ3ZTAtYTA2NS1lNjU1YzIzZmNmYjUiLAogICJzY2ltVW1hQ2xpZW50S2V5SWQiOiAiIiwKICAic2NpbVVtYVJlc291cmNlSWQiOiAiMTIwMy5iNTNmNDZlNy1jNzQ1LTRkYmUtYjVmYy0yMTI1NzE4ZTRmODYiLAogICJzY2ltVW1hU2NvcGUiOiAiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsL294YXV0aC9yZXN0djEvdW1hL3Njb3Blcy9zY2ltX2FjY2VzcyIsCiAgInNjaW1VbWFDbGllbnRLZXlTdG9yZUZpbGUiOiAiL2V0Yy9jZXJ0cy9zY2ltLXJzLmprcyIsCiAgInNjaW1VbWFDbGllbnRLZXlTdG9yZVBhc3N3b3JkIjogImU0QnFxS0JyRFo4bWhnQU1sbjViU1E9PSIsCiAgImFwaVVtYUNsaWVudElkIjogIjE0MDEuMDlkZjg5YjgtMTgwOS00YTY1LTg5YjctZTdkODNkYTU1MGQ1IiwKICAiYXBpVW1hQ2xpZW50S2V5SWQiOiAiIiwKICAiYXBpVW1hUmVzb3VyY2VJZCI6ICIxNDAzLjgwODE5NTljLWNiYmUtNDg0My1hMzVjLWZjNzYwMDJjNmJmOCIsCiAgImFwaVVtYVNjb3BlIjogImh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbC9veGF1dGgvcmVzdHYxL3VtYS9zY29wZXMvb3h0cnVzdC1hcGktcmVhZCIsCiAgImFwaVVtYUNsaWVudEtleVN0b3JlRmlsZSI6ICIvZXRjL2NlcnRzL2FwaS1ycy5qa3MiLAogICJhcGlVbWFDbGllbnRLZXlTdG9yZVBhc3N3b3JkIjogIlI1T2svcGUzd3cwPSIsCiAgImNzc0xvY2F0aW9uIjogIiIsCiAgImpzTG9jYXRpb24iOiAiIiwKICAicnB0Q29ubmVjdGlvblBvb2xVc2VDb25uZWN0aW9uUG9vbGluZyI6IHRydWUsCiAgInJwdENvbm5lY3Rpb25Qb29sTWF4VG90YWwiOiAyMDAsCiAgInJwdENvbm5lY3Rpb25Qb29sRGVmYXVsdE1heFBlclJvdXRlIjogMjAsCiAgInJwdENvbm5lY3Rpb25Qb29sVmFsaWRhdGVBZnRlckluYWN0aXZpdHkiOiAxMCwKICAicnB0Q29ubmVjdGlvblBvb2xDdXN0b21LZWVwQWxpdmVUaW1lb3V0IjogNSwKICAic2hpYmJvbGV0aFZlcnNpb24iOiAidjMiLAogICJzaGliYm9sZXRoM0lkcFJvb3REaXIiOiAiL29wdC9zaGliYm9sZXRoLWlkcCIsCiAgInNoaWJib2xldGgzU3BDb25mRGlyIjogIi9vcHQvc2hpYmJvbGV0aC1pZHAvc3AiLAogICJvcmdhbml6YXRpb25OYW1lIjogInRlc3QiLAogICJpZHAzU2lnbmluZ0NlcnQiOiAiL2V0Yy9jZXJ0cy9pZHAtc2lnbmluZy5jcnQiLAogICJpZHAzRW5jcnlwdGlvbkNlcnQiOiAiL2V0Yy9jZXJ0cy9pZHAtZW5jcnlwdGlvbi5jcnQiLAogICJjbGllbnRXaGl0ZUxpc3QiOiBbCiAgICAiKiIKICBdLAogICJjbGllbnRCbGFja0xpc3QiOiBbCiAgICAiKi5hdHRhY2tlci5jb20vKiIKICBdLAogICJzY2ltVGVzdE1vZGUiOiBmYWxzZSwKICAib3hUcnVzdEFwaVRlc3RNb2RlIjogZmFsc2UsCiAgIlNjaW1Qcm9wZXJ0aWVzIjogewogICAgIm1heENvdW50IjogMjAwCiAgfSwKICAiY2xlYW5TZXJ2aWNlSW50ZXJ2YWwiOiAzMDAsCiAgImxvZ2dpbmdMZXZlbCI6ICJJTkZPIiwKICAibG9nZ2luZ0xheW91dCI6ICJ0ZXh0IiwKICAicGFzc3dvcmRSZXNldFJlcXVlc3RFeHBpcmF0aW9uVGltZSI6IDYwMCwKICAidXNlTG9jYWxDYWNoZSI6IHRydWUsCiAgInBhc3Nwb3J0VW1hQ2xpZW50SWQiOiAiMTUwMS4yYTgxZDhmMC0wNGU4LTRlN2ItYWQyOS1jZjdlNzAxYTI0MTciLAogICJwYXNzcG9ydFVtYUNsaWVudEtleUlkIjogIiIsCiAgInBhc3Nwb3J0VW1hUmVzb3VyY2VJZCI6ICIxNTA0LmExYjhhNTc4LWZlMTEtNDA1NC04YzQ5LWM2YWRmYzllMTc3YyIsCiAgInBhc3Nwb3J0VW1hU2NvcGUiOiAiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsL294YXV0aC9yZXN0djEvdW1hL3Njb3Blcy9wYXNzcG9ydF9hY2Nlc3MiLAogICJwYXNzcG9ydFVtYUNsaWVudEtleVN0b3JlRmlsZSI6ICIvZXRjL2NlcnRzL3Bhc3Nwb3J0LXJzLmprcyIsCiAgInBhc3Nwb3J0VW1hQ2xpZW50S2V5U3RvcmVQYXNzd29yZCI6ICJNdjNMVnZzUE5lR3hvM1A0a3BwRDN3PT0iCn0=
oxTrustConfCacheRefresh:: ewogICAgInNvdXJjZUNvbmZpZ3MiOlsKICAgIF0sCiAgICAiaW51bUNvbmZpZyI6ewogICAgICAgICJjb25maWdJZCI6ImxvY2FsX2ludW0iLAogICAgICAgICJiaW5kRE4iOiJjbj1kaXJlY3RvcnkgbWFuYWdlciIsCiAgICAgICAgImJpbmRQYXNzd29yZCI6ImUyRmxzYWtiUUdxREdudU9uaVFieUE9PSIsCiAgICAgICAgInNlcnZlcnMiOlsKICAgICAgICAgICAgImxvY2FsaG9zdDoxNjM2IgogICAgICAgIF0sCiAgICAgICAgIm1heENvbm5lY3Rpb25zIjoxMCwKICAgICAgICAidXNlU1NMIjp0cnVlLAogICAgICAgICJiYXNlRE5zIjpbCiAgICAgICAgICAgICJvdT1jYWNoZS1yZWZyZXNoLG89c2l0ZSIKICAgICAgICBdLAogICAgICAgICJwcmltYXJ5S2V5IjpudWxsLAogICAgICAgICJsb2NhbFByaW1hcnlLZXkiOm51bGwsCiAgICAgICAgInVzZUFub255bW91c0JpbmQiOmZhbHNlLAogICAgICAgICJlbmFibGVkIjp0cnVlLAogICAgICAgICJ2ZXJzaW9uIjowCiAgICB9LAogICAgInRhcmdldENvbmZpZyI6ewogICAgfSwKICAgICJsZGFwU2VhcmNoU2l6ZUxpbWl0IjoxMDAwLAogICAgImtleUF0dHJpYnV0ZXMiOlsKICAgIF0sCiAgICAia2V5T2JqZWN0Q2xhc3NlcyI6WwogICAgXSwKICAgICJzb3VyY2VBdHRyaWJ1dGVzIjpbCiAgICBdLAogICAgImN1c3RvbUxkYXBGaWx0ZXIiOm51bGwsCiAgICAidXBkYXRlTWV0aG9kIjoiY29weSIsCiAgICAia2VlcEV4dGVybmFsUGVyc29uIjp0cnVlLAogICAgInVzZVNlYXJjaExpbWl0IjpmYWxzZSwKICAgICJhdHRyaWJ1dGVNYXBwaW5nIjpbCiAgICBdLAogICAgInNuYXBzaG90Rm9sZGVyIjoiL3Zhci9nbHV1L2lkZW50aXR5L2NyLXNuYXBzaG90cyIsCiAgICAic25hcHNob3RNYXhDb3VudCI6MTAsCiAgICAiZGVmYXVsdEludW1TZXJ2ZXIiOnRydWUKfQo=
oxTrustConfImportPerson:: ewoJIm1hcHBpbmdzIjogW3sKCQkibGRhcE5hbWUiOiAidWlkIiwKCQkiZGlzcGxheU5hbWUiOiAiVXNlcm5hbWUiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IHRydWUKCX0sIHsKCQkibGRhcE5hbWUiOiAiZ2l2ZW5OYW1lIiwKCQkiZGlzcGxheU5hbWUiOiAiRmlyc3QgTmFtZSIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogdHJ1ZQoJfSwgewoJCSJsZGFwTmFtZSI6ICJzbiIsCgkJImRpc3BsYXlOYW1lIjogIkxhc3QgTmFtZSIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogdHJ1ZQoJfSwgewoJCSJsZGFwTmFtZSI6ICJtYWlsIiwKCQkiZGlzcGxheU5hbWUiOiAiRW1haWwiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IHRydWUKCX0sIHsKCQkibGRhcE5hbWUiOiAidXNlclBhc3N3b3JkIiwKCQkiZGlzcGxheU5hbWUiOiAiUGFzc3dvcmQiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IGZhbHNlCgl9LCB7CgkJImxkYXBOYW1lIjogImdsdXVTdGF0dXMiLAoJCSJkaXNwbGF5TmFtZSI6ICJVc2VyIFN0YXR1cyIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogZmFsc2UKCX1dCn0=
oxRevision: 1

dn: ou=oxidp,ou=configuration,o=gluu
objectClass: top
objectClass: oxApplicationConfiguration
ou: oxidp
oxConfApplication:: ewogICAgImFwcGxpY2F0aW9uTmFtZSI6IlNhbWwiLAoKICAgICJvcGVuSWRQcm92aWRlclVybCI6Imh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbC8ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbiIsCiAgICAib3BlbklkQ2xpZW50SWQiOiIxMTAxLmIxODdlOWJhLTEyYWEtNDVlMS04OTk4LTgzY2M0OTMxZmU5NiIsCiAgICAib3BlbklkQ2xpZW50UGFzc3dvcmQiOiJ3eDZOaDdKdE8yWGhsQWdYaFhQdmJBPT0iLAogICAgIm9wZW5JZFNjb3BlcyI6WwogICAgICAgICJvcGVuaWQiLAogICAgICAgICJlbWFpbCIsCiAgICAgICAgInVzZXJfbmFtZSIKICAgIF0sCiAgICAib3BlbklkUmVkaXJlY3RVcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsL2lkcC9BdXRobi9veEF1dGgiLAogICAgIm9wZW5JZFBvc3RMb2dvdXRSZWRpcmVjdFVyaSI6ICJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvaWRwL3Byb2ZpbGUvTG9nb3V0IiwKICAgICJzY3JpcHREbiI6ICJvdT1zY3JpcHRzLG89Z2x1dSIKfQo=
oxRevision: 1

dn: ou=configuration,o=gluu
objectClass: top
objectClass: gluuConfiguration
ou: configuration
gluuMaxLogSize: 200
gluuWhitePagesEnabled: disabled
gluuOrgProfileMgt: false
gluuManageIdentityPermission: true
gluuFederationHostingEnabled: disabled
gluuVdsCacheRefreshEnabled: false
gluuScimEnabled: true
oxAuthenticationMode: simple_password_auth
oxTrustAuthenticationMode: simple_password_auth
gluuPassportEnabled: true
gluuRadiusEnabled: true
gluuSamlEnabled: true
oxCacheConfiguration: {"cacheProviderType": "NATIVE_PERSISTENCE", "memcachedConfiguration": {"servers":"localhost:11211", "maxOperationQueueLength":100000, "bufferSize":32768, "defaultPutExpiration":60, "connectionFactoryType": "DEFAULT"}, "inMemoryConfiguration": {"defaultPutExpiration":60}, "nativePersistenceConfiguration": {"defaultPutExpiration":60, "defaultCleanupBatchSize": 10000}, "redisConfiguration":{"servers":"localhost:6379", "defaultPutExpiration": 60}}
oxDocumentStoreConfiguration: {"documentStoreType":"LOCAL","localConfiguration":{"baseLocation":"/"},"jcaConfiguration":{"serverUrl":"http://localhost:8080/rmi","workspaceName":"default","connectionTimeout":15,"userId":"admin","password":""},"webDavConfiguration":null}
oxTrustStoreConf: {"useJreCertificates":true}
oxTrustCacheRefreshServerIpAddress: 255.255.255.255
oxIDPAuthentication: {"type": "auth",
  "name": null,
  "level": 0,
  "priority": 1,
  "enabled": false,
  "version": 0,
  "config": {"configId": "auth_ldap_server",
            "servers": ["localhost:1636"],
            "maxConnections": 1000,
            "bindDN": "cn=directory manager",
            "bindPassword": "ijOmsZa5u5oZerNO8ANX7A==",
            "useSSL": "true",
            "baseDNs": ["ou=people,o=gluu"],
            "primaryKey": "uid",
            "localPrimaryKey": "uid",
            "useAnonymousBind": false,
            "enabled": false}
  }
oxLogViewerConfig: {
  "log_template":[
    {
      "value1":"oxAuth logs",
      "value2":"/opt/gluu/jetty/oxauth/logs/*.log",
      "description":""
    },
    {
      "value1":"oxTrust logs",
      "value2":"/opt/gluu/jetty/identity/logs/*.log",
      "description":""
    }
  ]}

######################################

# SAML Trust Relationships - Level 2
dn: ou=trustRelationships,o=gluu
objectClass: top
objectClass: organizationalUnit
ou: trustRelationships

######################################

# SAML2 Federations - LEVEL 2
# WARNING ! This feature is deprecated! Use Jagger: http://www.gluu.co/jag
dn: ou=federations,o=gluu
objectClass: top
objectClass: organizationalUnit
ou: federations

dn: ou=oxauth,ou=configuration,o=gluu
objectClass: oxAuthConfiguration
objectClass: top
ou: oxauth
oxAuthConfDynamic:: 
oxAuthConfStatic:: ewogICAgImJhc2VEbiI6ewogICAgICAgICJjb25maWd1cmF0aW9uIjoib3U9Y29uZmlndXJhdGlvbixvPWdsdXUiLAogICAgICAgICJwZW9wbGUiOiJvdT1wZW9wbGUsbz1nbHV1IiwKICAgICAgICAiZ3JvdXBzIjoib3U9Z3JvdXBzLG89Z2x1dSIsCiAgICAgICAgImNsaWVudHMiOiJvdT1jbGllbnRzLG89Z2x1dSIsCiAgICAgICAgInNlc3Npb25zIjoib3U9c2Vzc2lvbnMsbz1nbHV1IiwKICAgICAgICAidG9rZW5zIjoib3U9dG9rZW5zLG89Z2x1dSIsCiAgICAgICAgImF1dGhvcml6YXRpb25zIjogIm91PWF1dGhvcml6YXRpb25zLG89Z2x1dSIsCiAgICAgICAgInNjb3BlcyI6Im91PXNjb3BlcyxvPWdsdXUiLAogICAgICAgICJhdHRyaWJ1dGVzIjoib3U9YXR0cmlidXRlcyxvPWdsdXUiLAogICAgICAgICJzY3JpcHRzIjogIm91PXNjcmlwdHMsbz1nbHV1IiwKICAgICAgICAidW1hQmFzZSI6Im91PXVtYSxvPWdsdXUiLAogICAgICAgICJ1bWFQb2xpY3kiOiJvdT1wb2xpY2llcyxvdT11bWEsbz1nbHV1IiwKICAgICAgICAidTJmQmFzZSI6Im91PXUyZixvPWdsdXUiLAogICAgICAgICJtZXRyaWMiOiJvdT1zdGF0aXN0aWMsbz1tZXRyaWMiLAogICAgICAgICJzZWN0b3JJZGVudGlmaWVycyI6ICJvdT1zZWN0b3JfaWRlbnRpZmllcnMsbz1nbHV1IiwKICAgICAgICAiY2liYSI6ICJvdT1jaWJhLG89Z2x1dSIKICAgIH0KfQo=
oxAuthConfWebKeys:: 
oxAuthConfErrors:: 
oxRevision: 1

dn: ou=oxtrust,ou=configuration,o=gluu
objectClass: top
objectClass: oxTrustConfiguration
ou: oxtrust
oxTrustConfApplication:: ewogICAgIm9yZ0luYW1lIjoiIiwKICAgICJvcmdTdXBwb3J0RW1haWwiOiJzc0BnbWFpbC5jb20iLAoKICAgICJiYXNlRE4iOiJvPWdsdXUiLAoKICAgICJiYXNlRW5kcG9pbnQiOiJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvaWRlbnRpdHkvcmVzdHYxIiwKCiAgICAiaWRwVXJsIjoiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsIiwKICAgICJhcHBsaWNhdGlvblVybCI6Imh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbCIsCgogICAgImtleXN0b3JlUGF0aCI6Ii9ldGMvY2VydHMvc2hpYklEUC5qa3MiLAogICAgImtleXN0b3JlUGFzc3dvcmQiOiJJY00xTk9pcHdBYzkiLAoKICAgICJwZXJzb25PYmplY3RDbGFzc1R5cGVzIjpbCiAgICAgICAgImdsdXVDdXN0b21QZXJzb24iLAogICAgICAgICJnbHV1UGVyc29uIiwKICAgICAgICAiZWR1UGVyc29uIgogICAgXSwKICAgICJwZXJzb25PYmplY3RDbGFzc0Rpc3BsYXlOYW1lcyI6WwogICAgICAgICJnbHV1Q3VzdG9tUGVyc29uIiwKICAgICAgICAiZ2x1dVBlcnNvbiIsCiAgICAgICAgImVkdVBlcnNvbiIKICAgIF0sCgogICAgInN2bkNvbmZpZ3VyYXRpb25TdG9yZVJvb3QiOiJ1bnVzZWQiLAogICAgInN2bkNvbmZpZ3VyYXRpb25TdG9yZVBhc3N3b3JkIjoidW51c2VkIiwKICAgICJwZXJzaXN0U1ZOIjpmYWxzZSwKCiAgICAiYWxsb3dQZXJzb25Nb2RpZmljYXRpb24iOnRydWUsCiAgICAidXBkYXRlU3RhdHVzIjp0cnVlLAoKICAgICJjbGllbnRBc3NvY2lhdGlvbkF0dHJpYnV0ZSI6ImludW0iLAoKICAgICJwZXJzb25DdXN0b21PYmplY3RDbGFzcyI6ImdsdXVDdXN0b21QZXJzb24iLAoKICAgICJjb250YWN0T2JqZWN0Q2xhc3NUeXBlcyI6WwoKICAgIF0sCiAgICAiY29udGFjdE9iamVjdENsYXNzRGlzcGxheU5hbWVzIjpbCgogICAgXSwKCiAgICAicGhvdG9SZXBvc2l0b3J5Um9vdERpciI6Ii92YXIvZ2x1dS9waG90b3MiLAogICAgInBob3RvUmVwb3NpdG9yeVRodW1iV2lkdGgiOjMwMCwKICAgICJwaG90b1JlcG9zaXRvcnlUaHVtYkhlaWdodCI6MzAwLAogICAgInBob3RvUmVwb3NpdG9yeUNvdW50TGV2ZWxlcyI6MywKICAgICJwaG90b1JlcG9zaXRvcnlDb3VudEZvbGRlcnNQZXJMZXZlbCI6MjAsCgogICAgInNoaWJib2xldGgzRmVkZXJhdGlvblJvb3REaXIiOiIvb3B0L3NoaWJib2xldGgtZmVkZXJhdGlvbiIsCgogICAgInNwTWV0YWRhdGFQYXRoIjoiIiwKCiAgICAibG9nb0xvY2F0aW9uIjoiL3Zhci9nbHV1L3Bob3RvcyIsCgogICAgImdsdXVTcEF0dHJpYnV0ZXMiOlsKCiAgICBdLAoKICAgICJjb25maWdHZW5lcmF0aW9uIjp0cnVlLAogICAgImlnbm9yZVZhbGlkYXRpb24iOmZhbHNlLAoKICAgICJpZHBTZWN1cml0eUNlcnQiOiIvZXRjL2NlcnRzL3NoaWJJRFAuY3J0IiwKICAgICJpZHBTZWN1cml0eUtleSI6Ii9ldGMvY2VydHMvc2hpYklEUC5rZXkiLAogICAgImlkcFNlY3VyaXR5S2V5UGFzc3dvcmQiOiJsdzBYcnZCZVMxVXZ0ZkNaK290OGlRPT0iLAogICAgImdsdXVTcENlcnQiOiIvZXRjL2NlcnRzL3NoaWJJRFAuY3J0IiwKCiAgICAiaWRwQmluZERuIjoiY249RGlyZWN0b3J5IE1hbmFnZXIiLAogICAgImlkcEJpbmRQYXNzd29yZCI6ImlqT21zWmE1dTVvWmVyTk84QU5YN0E9PSIsCiAgICAiaWRwTGRhcFByb3RvY29sIjoibGRhcHMiLAogICAgImlkcExkYXBTZXJ2ZXIiOiJsb2NhbGhvc3Q6MTYzNiIsCiAgICAiaWRwVXNlckZpZWxkcyI6IiIsCgogICAgImxkaWZTdG9yZSI6Ii92YXIvZ2x1dS9pZGVudGl0eS9yZW1vdmVkIiwKCiAgICAiY2FDZXJ0c0xvY2F0aW9uIjoiL3Vzci9qYXZhL2xhdGVzdC9qcmUvbGliL3NlY3VyaXR5L2NhY2VydHMiLAogICAgImNhQ2VydHNQYXNzcGhyYXNlIjoiIiwKCiAgICAiY2VydERpciI6Ii9ldGMvY2VydHMvIiwKICAgICJ0ZW1wQ2VydERpciI6Ii9ldGMvY2VydHMvdGVtcCIsCgogICAgImNsdXN0ZXJlZEludW1zIjpbCgogICAgXSwKCiAgICAic2VydmljZXNSZXN0YXJ0VHJpZ2dlciI6Ii9vcHQvZ2x1dS9lc3NlbnRpYWxfZmlsZXMvdHJpZ2dlcl9yZXN0YXJ0X29mX3NlcnZpY2VzX2RlbGV0ZV9tZV90b19kb19zbyIsCgogICAgIm94QXV0aElzc3VlciI6Imh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbCIsCiAgICAib3hBdXRoU2VjdG9ySWRlbnRpZmllclVybCI6Imh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbC9veGF1dGgvc2VjdG9yaWRlbnRpZmllciIsCgogICAgIm94QXV0aENsaWVudElkIjoiMTAwMS4xMjQ4YTU2Zi01Y2E3LTQ4MTctYjZjOC0wMWVkYmQwM2RhMmYiLAogICAgIm94QXV0aENsaWVudFBhc3N3b3JkIjoiZjgwd3N5d3JvRi9TeEM5Mk9wb3A3UT09IiwKICAgICJveEF1dGhDbGllbnRTY29wZSI6Im9wZW5pZCtwcm9maWxlK2VtYWlsK3VzZXJfbmFtZSIsCgogICAgImxvZ2luUmVkaXJlY3RVcmwiOiJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvaWRlbnRpdHkvYXV0aGNvZGUuaHRtIiwKICAgICJsb2dvdXRSZWRpcmVjdFVybCI6Imh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbC9pZGVudGl0eS9maW5pc2hsb2dvdXQuaHRtIiwKCiAgICAidW1hSXNzdWVyIjoiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsIiwKCiAgICAic2NpbVVtYUNsaWVudElkIjoiMTIwMS5lMDQzMGNiOC00NTQ4LTRiOGYtOTAwYi01YjAwMGI4NDEzMDIiLAogICAgInNjaW1VbWFDbGllbnRLZXlJZCI6IiIsCiAgICAic2NpbVVtYVJlc291cmNlSWQiOiIxMjAzLjk4OTFjMzhmLTljNjMtNGZmNy1iNWRjLWRkMzc2ZDQ4ZDYwMiIsCiAgICAic2NpbVVtYVNjb3BlIjoiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsL294YXV0aC9yZXN0djEvdW1hL3Njb3Blcy9zY2ltX2FjY2VzcyIsCiAgICAic2NpbVVtYUNsaWVudEtleVN0b3JlRmlsZSI6Ii9ldGMvY2VydHMvc2NpbS1ycy5qa3MiLAogICAgInNjaW1VbWFDbGllbnRLZXlTdG9yZVBhc3N3b3JkIjoiQ21TZThmMklYSFludmpwSkpNd0RoUT09IiwKCiAgICAiYXBpVW1hQ2xpZW50SWQiOiIxNDAxLmQ4MjZjZjUxLTY4ODQtNDUyNS1hMzVkLTlhZGRhMmJhNzBlZSIsCiAgICAiYXBpVW1hQ2xpZW50S2V5SWQiOiIiLAogICAgImFwaVVtYVJlc291cmNlSWQiOiIxNDAzLjgwYjkyNGRjLTNkOWUtNDExNC04ZDZhLTIwZDQ0NzFlZTM5YyIsCiAgICAiYXBpVW1hU2NvcGUiOiJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvb3hhdXRoL3Jlc3R2MS91bWEvc2NvcGVzL294dHJ1c3QtYXBpLXJlYWQiLAogICAgImFwaVVtYUNsaWVudEtleVN0b3JlRmlsZSI6Ii9ldGMvY2VydHMvYXBpLXJzLmprcyIsCiAgICAiYXBpVW1hQ2xpZW50S2V5U3RvcmVQYXNzd29yZCI6InhvVXIyRnkwMk5nPSIsCgogICAgImNzc0xvY2F0aW9uIjoiIiwKICAgICJqc0xvY2F0aW9uIjoiIiwKCiAgICAicnB0Q29ubmVjdGlvblBvb2xVc2VDb25uZWN0aW9uUG9vbGluZyI6dHJ1ZSwKICAgICJycHRDb25uZWN0aW9uUG9vbE1heFRvdGFsIjoyMDAsCiAgICAicnB0Q29ubmVjdGlvblBvb2xEZWZhdWx0TWF4UGVyUm91dGUiOjIwLAogICAgInJwdENvbm5lY3Rpb25Qb29sVmFsaWRhdGVBZnRlckluYWN0aXZpdHkiOjEwLAogICAgInJwdENvbm5lY3Rpb25Qb29sQ3VzdG9tS2VlcEFsaXZlVGltZW91dCI6NSwKCiAgICAic2hpYmJvbGV0aFZlcnNpb24iOiJ2MyIsCiAgICAic2hpYmJvbGV0aDNJZHBSb290RGlyIjoiL29wdC9zaGliYm9sZXRoLWlkcCIsCiAgICAic2hpYmJvbGV0aDNTcENvbmZEaXIiOiIvb3B0L3NoaWJib2xldGgtaWRwL3NwIiwKICAgICJvcmdhbml6YXRpb25OYW1lIjoic3MiLAogICAgImlkcDNTaWduaW5nQ2VydCI6Ii9ldGMvY2VydHMvaWRwLXNpZ25pbmcuY3J0IiwKICAgICJpZHAzRW5jcnlwdGlvbkNlcnQiOiIvZXRjL2NlcnRzL2lkcC1lbmNyeXB0aW9uLmNydCIsCgogICAgImNsaWVudFdoaXRlTGlzdCI6IFsiKiJdLAogICAgImNsaWVudEJsYWNrTGlzdCI6IFsiKi5hdHRhY2tlci5jb20vKiJdLAoKICAgICJzY2ltVGVzdE1vZGUiOiBmYWxzZSwKICAgICJveFRydXN0QXBpVGVzdE1vZGUiOiBmYWxzZSwKICAgICJTY2ltUHJvcGVydGllcyI6IHsKICAgICAgICAibWF4Q291bnQiOiAyMDAKICAgIH0sCiAgICAiY2xlYW5TZXJ2aWNlSW50ZXJ2YWwiOjMwMCwKICAgICJsb2dnaW5nTGV2ZWwiOiAiSU5GTyIsCiAgICAibG9nZ2luZ0xheW91dCI6ICJ0ZXh0IiwKICAgICJwYXNzd29yZFJlc2V0UmVxdWVzdEV4cGlyYXRpb25UaW1lIjo2MDAsCiAgICAidXNlTG9jYWxDYWNoZSI6dHJ1ZQp9Cg==
oxTrustConfCacheRefresh:: ewogICAgInNvdXJjZUNvbmZpZ3MiOlsKICAgIF0sCiAgICAiaW51bUNvbmZpZyI6ewogICAgICAgICJjb25maWdJZCI6ImxvY2FsX2ludW0iLAogICAgICAgICJiaW5kRE4iOiJjbj1kaXJlY3RvcnkgbWFuYWdlciIsCiAgICAgICAgImJpbmRQYXNzd29yZCI6ImlqT21zWmE1dTVvWmVyTk84QU5YN0E9PSIsCiAgICAgICAgInNlcnZlcnMiOlsKICAgICAgICAgICAgImxvY2FsaG9zdDoxNjM2IgogICAgICAgIF0sCiAgICAgICAgIm1heENvbm5lY3Rpb25zIjoxMCwKICAgICAgICAidXNlU1NMIjp0cnVlLAogICAgICAgICJiYXNlRE5zIjpbCiAgICAgICAgICAgICJvdT1jYWNoZS1yZWZyZXNoLG89c2l0ZSIKICAgICAgICBdLAogICAgICAgICJwcmltYXJ5S2V5IjpudWxsLAogICAgICAgICJsb2NhbFByaW1hcnlLZXkiOm51bGwsCiAgICAgICAgInVzZUFub255bW91c0JpbmQiOmZhbHNlLAogICAgICAgICJlbmFibGVkIjp0cnVlLAogICAgICAgICJ2ZXJzaW9uIjowCiAgICB9LAogICAgInRhcmdldENvbmZpZyI6ewogICAgfSwKICAgICJsZGFwU2VhcmNoU2l6ZUxpbWl0IjoxMDAwLAogICAgImtleUF0dHJpYnV0ZXMiOlsKICAgIF0sCiAgICAia2V5T2JqZWN0Q2xhc3NlcyI6WwogICAgXSwKICAgICJzb3VyY2VBdHRyaWJ1dGVzIjpbCiAgICBdLAogICAgImN1c3RvbUxkYXBGaWx0ZXIiOm51bGwsCiAgICAidXBkYXRlTWV0aG9kIjoiY29weSIsCiAgICAia2VlcEV4dGVybmFsUGVyc29uIjp0cnVlLAogICAgInVzZVNlYXJjaExpbWl0IjpmYWxzZSwKICAgICJhdHRyaWJ1dGVNYXBwaW5nIjpbCiAgICBdLAogICAgInNuYXBzaG90Rm9sZGVyIjoiL3Zhci9nbHV1L2lkZW50aXR5L2NyLXNuYXBzaG90cyIsCiAgICAic25hcHNob3RNYXhDb3VudCI6MTAsCiAgICAiZGVmYXVsdEludW1TZXJ2ZXIiOnRydWUKfQo=
oxTrustConfImportPerson:: ewoJIm1hcHBpbmdzIjogW3sKCQkibGRhcE5hbWUiOiAidWlkIiwKCQkiZGlzcGxheU5hbWUiOiAiVXNlcm5hbWUiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IHRydWUKCX0sIHsKCQkibGRhcE5hbWUiOiAiZ2l2ZW5OYW1lIiwKCQkiZGlzcGxheU5hbWUiOiAiRmlyc3QgTmFtZSIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogdHJ1ZQoJfSwgewoJCSJsZGFwTmFtZSI6ICJzbiIsCgkJImRpc3BsYXlOYW1lIjogIkxhc3QgTmFtZSIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogdHJ1ZQoJfSwgewoJCSJsZGFwTmFtZSI6ICJtYWlsIiwKCQkiZGlzcGxheU5hbWUiOiAiRW1haWwiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IHRydWUKCX0sIHsKCQkibGRhcE5hbWUiOiAidXNlclBhc3N3b3JkIiwKCQkiZGlzcGxheU5hbWUiOiAiUGFzc3dvcmQiLAoJCSJkYXRhVHlwZSI6ICJzdHJpbmciLAoJCSJyZXF1aXJlZCI6IGZhbHNlCgl9LCB7CgkJImxkYXBOYW1lIjogImdsdXVTdGF0dXMiLAoJCSJkaXNwbGF5TmFtZSI6ICJVc2VyIFN0YXR1cyIsCgkJImRhdGFUeXBlIjogInN0cmluZyIsCgkJInJlcXVpcmVkIjogZmFsc2UKCX1dCn0=
oxRevision: 1

dn: ou=oxidp,ou=configuration,o=gluu
objectClass: top
objectClass: oxApplicationConfiguration
ou: oxidp
oxConfApplication:: ewogICAgImFwcGxpY2F0aW9uTmFtZSI6IlNhbWwiLAoKICAgICJvcGVuSWRQcm92aWRlclVybCI6Imh0dHBzOi8vaW5zdGFuY2UtMS51cy1jZW50cmFsMS1hLmMubmlmdHktY2FueW9uLTI4NzExMS5pbnRlcm5hbC8ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbiIsCiAgICAib3BlbklkQ2xpZW50SWQiOiIxMTAxLmVhMzY2NmNmLTI1MTgtNGJkYS04Zjg2LTdhZjU4M2RkMTQ4ZCIsCiAgICAib3BlbklkQ2xpZW50UGFzc3dvcmQiOiJjaEFiS1E1T2FNaVVWTjJHaU43L09BPT0iLAogICAgIm9wZW5JZFNjb3BlcyI6WwogICAgICAgICJvcGVuaWQiLAogICAgICAgICJlbWFpbCIsCiAgICAgICAgInVzZXJfbmFtZSIKICAgIF0sCiAgICAib3BlbklkUmVkaXJlY3RVcmwiOiAiaHR0cHM6Ly9pbnN0YW5jZS0xLnVzLWNlbnRyYWwxLWEuYy5uaWZ0eS1jYW55b24tMjg3MTExLmludGVybmFsL2lkcC9BdXRobi9veEF1dGgiLAogICAgIm9wZW5JZFBvc3RMb2dvdXRSZWRpcmVjdFVyaSI6ICJodHRwczovL2luc3RhbmNlLTEudXMtY2VudHJhbDEtYS5jLm5pZnR5LWNhbnlvbi0yODcxMTEuaW50ZXJuYWwvaWRwL3Byb2ZpbGUvTG9nb3V0IiwKICAgICJzY3JpcHREbiI6ICJvdT1zY3JpcHRzLG89Z2x1dSIKfQo=
oxRevision: 1

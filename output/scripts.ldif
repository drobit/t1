dn: inum=2124-0CF1,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Cert authentication module
displayName: cert
oxEnabled: false
inum: 2124-0CF1
oxConfigurationProperty: {"value1":"chain_cert_file_path","value2":"/etc/certs/chain_cert.pem","description":""}
oxConfigurationProperty: {"value1":"credentials_file","value2":"/etc/certs/cert_creds.json","description":""}
oxConfigurationProperty: {"value1":"map_user_cert","value2":"true","description":""}
oxConfigurationProperty: {"value1":"use_generic_validator","value2":"true","description":""}
oxConfigurationProperty: {"value1":"use_path_validator","value2":"true","description":""}
oxConfigurationProperty: {"value1":"use_ocsp_validator","value2":"false","description":""}
oxConfigurationProperty: {"value1":"use_crl_validator","value2":"false","description":""}
oxConfigurationProperty: {"value1":"crl_max_response_size","value2":"10485760","description":""}
oxLevel: 30
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=2FDB-CF02,ou=scripts,o=gluu
objectClass: oxCustomScript
objectClass: top
description: Passport authentication module
displayName: passport_social
oxEnabled: true
inum: 2FDB-CF02
oxConfigurationProperty: {"value1":"key_store_file","value2":"/etc/certs/passport-rp.jks","hide":false,"description":""}
oxConfigurationProperty: {"value1":"key_store_password","value2":"secret","hide":false,"description":""}
oxLevel: 40
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=CB5B-3211,ou=scripts,o=gluu
objectClass: oxCustomScript
objectClass: top
description: Permission Dynamic Scope script
displayName: dynamic_permission
oxEnabled: true
inum: CB5B-3211
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNiwgR2x1dQ0KIw0KIyBBdXRob3I6IFl1cml5IE1vdmNoYW4NCiMNCg0KZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuc2NvcGUgaW1wb3J0IER5bmFtaWNTY29wZVR5cGUNCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbA0KZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZS5jb21tb24gaW1wb3J0IFVzZXJTZXJ2aWNlDQpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXINCmZyb20gamF2YS51dGlsIGltcG9ydCBBcnJheXMsIEFycmF5TGlzdA0KDQppbXBvcnQgamF2YQ0KDQpjbGFzcyBEeW5hbWljU2NvcGUoRHluYW1pY1Njb3BlVHlwZSk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToNCiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzDQoNCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIlBlcm1pc3Npb24gZHluYW1pYyBzY29wZS4gSW5pdGlhbGl6YXRpb24iDQoNCiAgICAgICAgcHJpbnQgIlBlcm1pc3Npb24gZHluYW1pYyBzY29wZS4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Ig0KDQogICAgICAgIHJldHVybiBUcnVlICAgDQoNCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHByaW50ICJQZXJtaXNzaW9uIGR5bmFtaWMgc2NvcGUuIERlc3Ryb3kiDQogICAgICAgIHByaW50ICJQZXJtaXNzaW9uIGR5bmFtaWMgc2NvcGUuIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiDQogICAgICAgIHJldHVybiBUcnVlICAgDQoNCiAgICAjIFVwZGF0ZSBKc29uIFdlYiB0b2tlbiBiZWZvcmUgc2lnbmluZy9lbmNyeXByaW5nIGl0DQogICAgIyAgIGR5bmFtaWNTY29wZUNvbnRleHQgaXMgb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuZXh0ZXJuYWwuY29udGV4dC5EeW5hbWljU2NvcGVFeHRlcm5hbENvbnRleHQNCiAgICAjICAgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFNpbXBsZUN1c3RvbVByb3BlcnR5Pg0KICAgIGRlZiB1cGRhdGUoc2VsZiwgZHluYW1pY1Njb3BlQ29udGV4dCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiUGVybWlzc2lvbiBkeW5hbWljIHNjb3BlIHNjb3BlLiBVcGRhdGUgbWV0aG9kIg0KDQogICAgICAgIGF1dGhvcml6YXRpb25HcmFudCA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0QXV0aG9yaXphdGlvbkdyYW50KCkNCiAgICAgICAgdXNlciA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0VXNlcigpDQogICAgICAgIGpzb25XZWJSZXNwb25zZSA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0SnNvbldlYlJlc3BvbnNlKCkNCiAgICAgICAgY2xhaW1zID0ganNvbldlYlJlc3BvbnNlLmdldENsYWltcygpDQoNCiAgICAgICAgdXNlclNlcnZpY2UgPSBDZGlVdGlsLmJlYW4oVXNlclNlcnZpY2UpDQogICAgICAgIHJvbGVzID0gdXNlclNlcnZpY2UuZ2V0Q3VzdG9tQXR0cmlidXRlKHVzZXIsICJyb2xlIikNCiAgICAgICAgaWYgcm9sZXMgIT0gTm9uZToNCiAgICAgICAgICAgIGNsYWltcy5zZXRDbGFpbSgicm9sZSIsIHJvbGVzLmdldFZhbHVlcygpKQ0KDQogICAgICAgIHJldHVybiBUcnVlDQoNCiAgICBkZWYgZ2V0U3VwcG9ydGVkQ2xhaW1zKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcmV0dXJuIEFycmF5cy5hc0xpc3QoInJvbGUiKQ0KDQogICAgZGVmIGdldEFwaVZlcnNpb24oc2VsZik6DQogICAgICAgIHJldHVybiAxMQ0K
oxScriptType: dynamic_scope
programmingLanguage: python

dn: inum=031C-4A65,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Id Generator script
displayName: id_generator
oxEnabled: false
inum: 031C-4A65
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuaWQgaW1wb3J0IElkR2VuZXJhdG9yVHlwZQpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXIKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IEFycmF5cywgQXJyYXlMaXN0CgppbXBvcnQgamF2YQoKY2xhc3MgSWRHZW5lcmF0b3IoSWRHZW5lcmF0b3JUeXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIklkIGdlbmVyYXRvci4gSW5pdGlhbGl6YXRpb24iCiAgICAgICAgcHJpbnQgIklkIGdlbmVyYXRvci4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgoKICAgICAgICByZXR1cm4gVHJ1ZSAgIAoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiSWQgZ2VuZXJhdG9yLiBEZXN0cm95IgogICAgICAgIHByaW50ICJJZCBnZW5lcmF0b3IuIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUgICAKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICAjIElkIGdlbmVyYXRvciBpbml0IG1ldGhvZAogICAgIyAgIGFwcElkIGlzIGFwcGxpY2F0aW9uIElkCiAgICAjICAgaWRUeXBlIGlzIElkIFR5cGUKICAgICMgICBpZFByZWZpeCBpcyBJZCBQcmVmaXgKICAgICMgICB1c2VyIGlzIG9yZy5nbHV1Lm94dHJ1c3QubW9kZWwuR2x1dUN1c3RvbVBlcnNvbgogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiBnZW5lcmF0ZUlkKHNlbGYsIGFwcElkLCBpZFR5cGUsIGlkUHJlZml4LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIklkIGdlbmVyYXRvci4gR2VuZXJhdGUgSWQiCiAgICAgICAgcHJpbnQgIklkIGdlbmVyYXRvci4gR2VuZXJhdGUgSWQuIEFwcElkOiAnIiwgYXBwSWQsICInLCBJZFR5cGU6ICciLCBpZFR5cGUsICInLCBJZFByZWZpeDogJyIsIGlkUHJlZml4LCAiJyIKCiAgICAgICAgIyBSZXR1cm4gTm9uZSBvciBlbXB0eSBzdHJpbmcgdG8gdHJpZ2dlciBkZWZhdWx0IElkIGdlbmVyYXRpb24gbWV0aG9kCiAgICAgICAgcmV0dXJuIE5vbmUK
oxScriptType: id_generator
programmingLanguage: python

dn: inum=031C-5621,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Dynamic Scope script for org_name
displayName: org_name
oxEnabled: false
inum: 031C-5621
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNiwgR2x1dQ0KIw0KIyBBdXRob3I6IFl1cml5IE1vdmNoYW4NCiMNCg0KZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuc2NvcGUgaW1wb3J0IER5bmFtaWNTY29wZVR5cGUNCmZyb20gb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuY29tbW9uIGltcG9ydCBVc2VyU2VydmljZQ0KZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIsIEFycmF5SGVscGVyDQpmcm9tIGphdmEudXRpbCBpbXBvcnQgQXJyYXlzLCBBcnJheUxpc3QNCg0KaW1wb3J0IGphdmENCg0KY2xhc3MgRHluYW1pY1Njb3BlKER5bmFtaWNTY29wZVR5cGUpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6DQogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcw0KDQogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHByaW50ICJEeW5hbWljIHNjb3BlLiBJbml0aWFsaXphdGlvbiINCg0KICAgICAgICBwcmludCAiRHluYW1pYyBzY29wZS4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Ig0KDQogICAgICAgIHJldHVybiBUcnVlICAgDQoNCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHByaW50ICJEeW5hbWljIHNjb3BlLiBEZXN0cm95Ig0KICAgICAgICBwcmludCAiRHluYW1pYyBzY29wZS4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSINCiAgICAgICAgcmV0dXJuIFRydWUgICANCg0KICAgICMgVXBkYXRlIEpzb24gV2ViIHRva2VuIGJlZm9yZSBzaWduaW5nL2VuY3J5cHJpbmcgaXQNCiAgICAjICAgZHluYW1pY1Njb3BlQ29udGV4dCBpcyBvcmcuZ2x1dS5veGF1dGguc2VydmljZS5leHRlcm5hbC5jb250ZXh0LkR5bmFtaWNTY29wZUV4dGVybmFsQ29udGV4dA0KICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+DQogICAgZGVmIHVwZGF0ZShzZWxmLCBkeW5hbWljU2NvcGVDb250ZXh0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHByaW50ICJEeW5hbWljIHNjb3BlLiBVcGRhdGUgbWV0aG9kIg0KDQogICAgICAgIGR5bmFtaWNTY29wZXMgPSBkeW5hbWljU2NvcGVDb250ZXh0LmdldER5bmFtaWNTY29wZXMoKQ0KICAgICAgICBhdXRob3JpemF0aW9uR3JhbnQgPSBkeW5hbWljU2NvcGVDb250ZXh0LmdldEF1dGhvcml6YXRpb25HcmFudCgpDQogICAgICAgIHVzZXIgPSBkeW5hbWljU2NvcGVDb250ZXh0LmdldFVzZXIoKQ0KICAgICAgICBqc29uV2ViUmVzcG9uc2UgPSBkeW5hbWljU2NvcGVDb250ZXh0LmdldEpzb25XZWJSZXNwb25zZSgpDQogICAgICAgIGNsYWltcyA9IGpzb25XZWJSZXNwb25zZS5nZXRDbGFpbXMoKQ0KDQogICAgICAgICMgQWRkIG9yZ2FuaXphdGlvbiBuYW1lIGlmIHRoZXJlIGlzIHNjb3BlID0gb3JnX25hbWUNCiAgICAgICAgY2xhaW1zLnNldENsYWltKCJvcmdfbmFtZSIsICJHbHV1LCBJbmMuIikNCg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgZGVmIGdldFN1cHBvcnRlZENsYWltcyhzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHJldHVybiBBcnJheXMuYXNMaXN0KCJvcmdfbmFtZSIpDQoNCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToNCiAgICAgICAgcmV0dXJuIDExDQo=
oxScriptType: dynamic_scope
programmingLanguage: python

dn: inum=031C-5622,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Dynamic Scope script for work_phone
displayName: work_phone
oxEnabled: false
inum: 031C-5622
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNiwgR2x1dQ0KIw0KIyBBdXRob3I6IFl1cml5IE1vdmNoYW4NCiMNCg0KZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuc2NvcGUgaW1wb3J0IER5bmFtaWNTY29wZVR5cGUNCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbA0KZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZS5jb21tb24gaW1wb3J0IFVzZXJTZXJ2aWNlDQpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXINCmZyb20gamF2YS51dGlsIGltcG9ydCBBcnJheXMsIEFycmF5TGlzdA0KDQppbXBvcnQgamF2YQ0KDQpjbGFzcyBEeW5hbWljU2NvcGUoRHluYW1pY1Njb3BlVHlwZSk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToNCiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzDQoNCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIkR5bmFtaWMgc2NvcGUuIEluaXRpYWxpemF0aW9uIg0KDQogICAgICAgIHByaW50ICJEeW5hbWljIHNjb3BlLiBJbml0aWFsaXplZCBzdWNjZXNzZnVsbHkiDQoNCiAgICAgICAgcmV0dXJuIFRydWUgICANCg0KICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIkR5bmFtaWMgc2NvcGUuIERlc3Ryb3kiDQogICAgICAgIHByaW50ICJEeW5hbWljIHNjb3BlLiBEZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5Ig0KICAgICAgICByZXR1cm4gVHJ1ZSAgIA0KDQogICAgIyBVcGRhdGUgSnNvbiBXZWIgdG9rZW4gYmVmb3JlIHNpZ25pbmcvZW5jcnlwcmluZyBpdA0KICAgICMgICBkeW5hbWljU2NvcGVDb250ZXh0IGlzIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlLmV4dGVybmFsLmNvbnRleHQuRHluYW1pY1Njb3BlRXh0ZXJuYWxDb250ZXh0DQogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4NCiAgICBkZWYgdXBkYXRlKHNlbGYsIGR5bmFtaWNTY29wZUNvbnRleHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIkR5bmFtaWMgc2NvcGUuIFVwZGF0ZSBtZXRob2QiDQoNCiAgICAgICAgZHluYW1pY1Njb3BlcyA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0RHluYW1pY1Njb3BlcygpDQogICAgICAgIGF1dGhvcml6YXRpb25HcmFudCA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0QXV0aG9yaXphdGlvbkdyYW50KCkNCiAgICAgICAgdXNlciA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0VXNlcigpDQogICAgICAgIGpzb25XZWJSZXNwb25zZSA9IGR5bmFtaWNTY29wZUNvbnRleHQuZ2V0SnNvbldlYlJlc3BvbnNlKCkNCiAgICAgICAgY2xhaW1zID0ganNvbldlYlJlc3BvbnNlLmdldENsYWltcygpDQoNCiAgICAgICAgIyBBZGQgd29yayBwaG9uZSBpZiB0aGVyZSBpcyBzY29wZSA9IHdvcmtfcGhvbmUNCiAgICAgICAgdXNlclNlcnZpY2UgPSBDZGlVdGlsLmJlYW4oVXNlclNlcnZpY2UpDQogICAgICAgIHdvcmtQaG9uZSA9IHVzZXJTZXJ2aWNlLmdldEN1c3RvbUF0dHJpYnV0ZSh1c2VyLCAidGVsZXBob25lTnVtYmVyIikNCiAgICAgICAgaWYgd29ya1Bob25lICE9IE5vbmU6DQogICAgICAgICAgICBjbGFpbXMuc2V0Q2xhaW0oIndvcmtfcGhvbmUiLCB3b3JrUGhvbmUuZ2V0VmFsdWVzKCkpDQoNCiAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgIGRlZiBnZXRTdXBwb3J0ZWRDbGFpbXMoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICByZXR1cm4gQXJyYXlzLmFzTGlzdCgid29ya19waG9uZSIpDQoNCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToNCiAgICAgICAgcmV0dXJuIDExDQo=
oxScriptType: dynamic_scope
programmingLanguage: python

dn: inum=13D3-E7AD,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Cache Refresh script
displayName: cache_refresh
oxEnabled: false
inum: 13D3-E7AD
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUudXNlciBpbXBvcnQgQ2FjaGVSZWZyZXNoVHlwZQpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXIKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IEFycmF5cywgQXJyYXlMaXN0CmZyb20gb3JnLmdsdXUub3h0cnVzdC5tb2RlbCBpbXBvcnQgR2x1dUN1c3RvbUF0dHJpYnV0ZQpmcm9tIG9yZy5nbHV1Lm1vZGVsLmN1c3RvbS5zY3JpcHQubW9kZWwuYmluZCBpbXBvcnQgQmluZENyZWRlbnRpYWxzCgppbXBvcnQgamF2YQoKY2xhc3MgQ2FjaGVSZWZyZXNoKENhY2hlUmVmcmVzaFR5cGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToKICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMKCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ2FjaGUgcmVmcmVzaC4gSW5pdGlhbGl6YXRpb24iCiAgICAgICAgcHJpbnQgIkNhY2hlIHJlZnJlc2guIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSIKCiAgICAgICAgcmV0dXJuIFRydWUgICAKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkNhY2hlIHJlZnJlc2guIERlc3Ryb3kiCiAgICAgICAgcHJpbnQgIkNhY2hlIHJlZnJlc2guIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICAjIENoZWNrIGlmIHRoaXMgaW5zdGFuY2UgY29uZm9ybSBzdGFydGluZyBjb25kaXRpb25zIAogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgICMgICByZXR1cm4gVHJ1ZS9GYWxzZQogICAgZGVmIGlzU3RhcnRQcm9jZXNzKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ2FjaGUgcmVmcmVzaC4gSXMgc3RhcnQgcHJvY2VzcyBtZXRob2QiCgogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICAjIEdldCBiaW5kIGNyZWRlbnRpYWxzIHJlcXVpcmVkIHRvIGFjY2VzcyBzb3VyY2Ugc2VydmVyIAogICAgIyAgIGNvbmZpZ0lkIGlzIHRoZSBzb3VyY2Ugc2VydmVyCiAgICAjICAgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFNpbXBsZUN1c3RvbVByb3BlcnR5PgogICAgIyAgIHJldHVybiBOb25lICh1c2UgcGFzc3dvcmQgZnJvbSBjb25maWd1cmF0aW9uKSBvciBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0Lm1vZGVsLmJpbmQuQmluZENyZWRlbnRpYWxzCiAgICBkZWYgZ2V0QmluZENyZWRlbnRpYWxzKHNlbGYsIGNvbmZpZ0lkLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkNhY2hlIHJlZnJlc2guIEdldEJpbmRDcmVkZW50aWFscyBtZXRob2QiCiMgICAgICAgIGlmIGNvbmZpZ0lkID09ICJzb3VyY2UiOgojICAgICAgICAgICAgcmV0dXJuIEJpbmRDcmVkZW50aWFscygiY249RGlyZWN0b3J5IE1hbmFnZXIiLCAicGFzc3dvcmQiKQoKICAgICAgICByZXR1cm4gTm9uZQoKICAgICMgVXBkYXRlIHVzZXIgZW50cnkgYmVmb3JlIHBlcnNpc3QgaXQKICAgICMgICB1c2VyIGlzIG9yZy5nbHV1Lm94dHJ1c3QubW9kZWwuR2x1dUN1c3RvbVBlcnNvbgogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiB1cGRhdGVVc2VyKHNlbGYsIHVzZXIsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ2FjaGUgcmVmcmVzaC4gVXBkYXRlVXNlciBtZXRob2QiCgogICAgICAgIGF0dHJpYnV0ZXMgPSB1c2VyLmdldEN1c3RvbUF0dHJpYnV0ZXMoKQoKICAgICAgICAjIEFkZCBuZXcgYXR0cmlidXRlIHByZWZlcnJlZExhbmd1YWdlCiAgICAgICAgYXR0clByZWZmZXJlZExhbmd1YWdlID0gR2x1dUN1c3RvbUF0dHJpYnV0ZSgicHJlZmVycmVkTGFuZ3VhZ2UiLCAiZW4tdXMiKQogICAgICAgIGF0dHJpYnV0ZXMuYWRkKGF0dHJQcmVmZmVyZWRMYW5ndWFnZSkKCiAgICAgICAgIyBBZGQgbmV3IGF0dHJpYnV0ZSB1c2VyUGFzc3dvcmQKICAgICAgICBhdHRyVXNlclBhc3N3b3JkID0gR2x1dUN1c3RvbUF0dHJpYnV0ZSgidXNlclBhc3N3b3JkIiwgInRlc3QiKQogICAgICAgIGF0dHJpYnV0ZXMuYWRkKGF0dHJVc2VyUGFzc3dvcmQpCgogICAgICAgICMgVXBkYXRlIGdpdmVuTmFtZSBhdHRyaWJ1dGUKICAgICAgICBmb3IgYXR0cmlidXRlIGluIGF0dHJpYnV0ZXM6CiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0cmlidXRlLmdldE5hbWUoKQogICAgICAgICAgICBpZiAoKCJnaXZlbm5hbWUiID09IFN0cmluZ0hlbHBlci50b0xvd2VyQ2FzZShhdHRyTmFtZSkpIGFuZCBTdHJpbmdIZWxwZXIuaXNOb3RFbXB0eShhdHRyaWJ1dGUuZ2V0VmFsdWUoKSkpOgogICAgICAgICAgICAgICAgYXR0cmlidXRlLnNldFZhbHVlKFN0cmluZ0hlbHBlci5yZW1vdmVNdWx0aXBsZVNwYWNlcyhhdHRyaWJ1dGUuZ2V0VmFsdWUoKSkgKyAiICh1cGRhdGVkKSIpCgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIGdldEFwaVZlcnNpb24oc2VsZik6CiAgICAgICAgcmV0dXJuIDExCg==
oxScriptType: cache_refresh
programmingLanguage: python

dn: inum=24FD-B96E,ou=scripts,o=gluu
objectClass: oxCustomScript
objectClass: top
description: OTP Validation of passwords using Yubicloud authentication module
displayName: yubicloud
oxEnabled: false
inum: 24FD-B96E
oxConfigurationProperty: {"value1":"yubicloud_uri","value2":"api.yubico.com","description":""}
oxConfigurationProperty: {"value1":"yubicloud_api_key","value2":"","description":""}
oxConfigurationProperty: {"value1":"yubicloud_id","value2":"","description":""}
oxLevel: 40
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4sIEFydW5tb3poaQojCgpmcm9tIG9yZy5nbHV1LnNlcnZpY2UuY2RpLnV0aWwgaW1wb3J0IENkaVV0aWwKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VjdXJpdHkgaW1wb3J0IElkZW50aXR5CmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLmF1dGggaW1wb3J0IFBlcnNvbkF1dGhlbnRpY2F0aW9uVHlwZQpmcm9tIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlIGltcG9ydCBVc2VyU2VydmljZQpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlcgoKaW1wb3J0IGphdmEKCmltcG9ydCB1cmxsaWIyCmltcG9ydCB1cmxsaWIKaW1wb3J0IHV1aWQKCgpjbGFzcyBQZXJzb25BdXRoZW50aWNhdGlvbihQZXJzb25BdXRoZW50aWNhdGlvblR5cGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToKICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMKCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiWXViaWNsb3VkLiBJbml0aWFsaXphdGlvbiIKCiAgICAgICAgc2VsZi5hcGlfc2VydmVyID0gY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuZ2V0KCJ5dWJpY2xvdWRfdXJpIikuZ2V0VmFsdWUyKCkKICAgICAgICBzZWxmLmFwaV9rZXkgPSBjb25maWd1cmF0aW9uQXR0cmlidXRlcy5nZXQoInl1YmljbG91ZF9hcGlfa2V5IikuZ2V0VmFsdWUyKCkKICAgICAgICBzZWxmLmNsaWVudF9pZCA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgieXViaWNsb3VkX2lkIikuZ2V0VmFsdWUyKCkKCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIll1YmljbG91ZC4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQogICAgICAgIAogICAgZGVmIGdldEF1dGhlbnRpY2F0aW9uTWV0aG9kQ2xhaW1zKHNlbGYsIHJlcXVlc3RQYXJhbWV0ZXJzKToKICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIAogICAgZGVmIGlzVmFsaWRBdXRoZW50aWNhdGlvbk1ldGhvZChzZWxmLCB1c2FnZVR5cGUsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBbHRlcm5hdGl2ZUF1dGhlbnRpY2F0aW9uTWV0aG9kKHNlbGYsIHVzYWdlVHlwZSwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGF1dGhlbnRpY2F0ZShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMsIHN0ZXApOgogICAgICAgIGlmIChzdGVwID09IDEpOgogICAgICAgICAgICBwcmludCAiWXViaWNsb3VkLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMSIKCiAgICAgICAgICAgIGlkZW50aXR5ID0gQ2RpVXRpbC5iZWFuKElkZW50aXR5KQogICAgICAgICAgICBjcmVkZW50aWFscyA9IGlkZW50aXR5LmdldENyZWRlbnRpYWxzKCkKCiAgICAgICAgICAgIHVzZXJuYW1lID0gY3JlZGVudGlhbHMuZ2V0VXNlcm5hbWUoKQogICAgICAgICAgICBvdHAgPSBjcmVkZW50aWFscy5nZXRQYXNzd29yZCgpCgogICAgICAgICAgICAjIFZhbGlkYXRlIG90cCBsZW5ndGgKICAgICAgICAgICAgaWYgbGVuKG90cCkgPCAzMiBvciBsZW4ob3RwKSA+IDQ4OgogICAgICAgICAgICAgICAgcHJpbnQgIll1YmljbG91ZC4gSW52YWxpZCBPVFAgbGVuZ3RoIgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICB1c2VyX3NlcnZpY2UgPSBDZGlVdGlsLmJlYW4oVXNlclNlcnZpY2UpCiAgICAgICAgICAgIHVzZXIgPSB1c2VyX3NlcnZpY2UuZ2V0VXNlcih1c2VybmFtZSkKCiAgICAgICAgICAgIHB1YmxpY19rZXkgPSB1c2VyLmdldEF0dHJpYnV0ZSgneXViaWtleUlkJykKCiAgICAgICAgICAgICMgTWF0Y2ggdGhlIHVzZXIgd2l0aCB0aGUgeXViaWtleQogICAgICAgICAgICBpZiBwdWJsaWNfa2V5IG5vdCBpbiBvdHA6CiAgICAgICAgICAgICAgICBwcmludCAiWXViaWNsb3VkLiBQdWJsaWMgS2V5IG5vdCBtYXRjaGluZyBPVFAiCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIGRhdGEgPSAiIgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBub25jZSA9IHN0cih1dWlkLnV1aWQ0KCkpLnJlcGxhY2UoIi0iLCAiIikKICAgICAgICAgICAgICAgIHBhcmFtcyA9IHVybGxpYi51cmxlbmNvZGUoeyJpZCI6IHNlbGYuY2xpZW50X2lkLCAib3RwIjogb3RwLCAibm9uY2UiOiBub25jZX0pCiAgICAgICAgICAgICAgICB1cmwgPSAiaHR0cHM6Ly8iICsgc2VsZi5hcGlfc2VydmVyICsgIi93c2FwaS8yLjAvdmVyaWZ5Lz8iICsgcGFyYW1zCiAgICAgICAgICAgICAgICBmID0gdXJsbGliMi51cmxvcGVuKHVybCkKICAgICAgICAgICAgICAgIGRhdGEgPSBmLnJlYWQoKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludCAiWXViaWNsb3VkLiBFeGNlcHRpb24gIiwgZQoKICAgICAgICAgICAgaWYgJ3N0YXR1cz1PSycgaW4gZGF0YToKICAgICAgICAgICAgICAgIHVzZXJfc2VydmljZS5hdXRoZW50aWNhdGUodXNlcm5hbWUpCiAgICAgICAgICAgICAgICBwcmludCAiWXViaWNsb3VkLiBBdXRoZW50aWNhdGlvbiBTdWNjZXNzZnVsIgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICAgICAgICAgIHByaW50ICJZdWJpY2xvdWQuIEVuZCBvZiBTdGVwIDEuIFJldHVybmluZyBGYWxzZS4iCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBwcmVwYXJlRm9yU3RlcChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMsIHN0ZXApOgogICAgICAgIGlmIChzdGVwID09IDEpOgogICAgICAgICAgICBwcmludCAiWXViaWNsb3VkLiBQcmVwYXJlIGZvciBTdGVwIDEiCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldEV4dHJhUGFyYW1ldGVyc0ZvclN0ZXAoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMsIHN0ZXApOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGdldENvdW50QXV0aGVudGljYXRpb25TdGVwcyhzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcmV0dXJuIDEKCiAgICBkZWYgZ2V0UGFnZUZvclN0ZXAoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMsIHN0ZXApOgogICAgICAgIHJldHVybiAiIgoKICAgIGRlZiBnZXROZXh0U3RlcChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMsIHN0ZXApOgogICAgICAgIHJldHVybiAtMQoKICAgIGRlZiBnZXRMb2dvdXRFeHRlcm5hbFVybChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMpOgogICAgICAgIHByaW50ICJHZXQgZXh0ZXJuYWwgbG9nb3V0IFVSTCBjYWxsIgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGxvZ291dChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMpOgogICAgICAgIHJldHVybiBUcnVlCg==
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=2DAF-F995,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample UMA RPT Policy
displayName: uma_rpt_policy
oxEnabled: false
inum: 2DAF-F995
oxConfigurationProperty: {"value1":"allowed_clients","value2":"1202.0509cc32-059f-4045-ae35-e117f778b65c, 1502.7ffa77ce-515b-44db-8f11-52fb60161201","description":""}
oxLevel: 100
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNywgR2x1dQ0KIw0KIyBBdXRob3I6IFl1cml5IFphYnJvdmFybnl5DQojDQojIENhbGwgc2VxdWVuY2UNCiMgMS4gRmlyc3QgaXMgY2FsbCBjb25zdHJ1Y3RvciBvZiB0aGUgU2NyaXB0IF9faW5pdF9fDQojIDIuIE5leHQgaW5pdCgpIG1ldGhvZA0KIyAzLiBOZXh0IGdldFJlcXVpcmVkQ2xhaW1zKCkgLSBtZXRob2QgcmV0dXJucyByZXF1aXJlZCBjbGFpbXMsIHNvIFVNQSBlbmdpbmUgY2hlY2tzIHdoZXRoZXINCiMgICAgaW4gcmVxdWVzdCBSUCBwcm92aWRlZCBhbGwgY2xhaW1zIHRoYXQgYXJlIHJlcXVpcmVkLiBQYXkgYXR0ZW50aW9uIHRoYXQgdGhlcmUgY2FuIGJlDQojICAgIG11bHRpcGxlIHNjcmlwdHMgYm91bmQgdG8gdGhlIHNjb3BlcywgbWVhbnMgdGhhdCBVTUEgZW5naW5lIHdpbGwgYnVpbGQgc2V0IG9mIHJlcXVpcmVkIGNsYWltcw0KIyAgICBmcm9tIGFsbCBzY3JpcHRzLiBJZiBub3QgYWxsIGNsYWltcyBhcmUgcHJvdmlkZWQgbmVlZF9pbmZvIGVycm9yIGlzIHNlbnQgdG8gUlAuDQojICAgIER1cmluZyBuZWVkX2luZm8gY29uc3RydWN0aW9uIGdldENsYWltc0dhdGhlcmluZ1NjcmlwdE5hbWUoKSBtZXRob2QgaXMgY2FsbGVkDQojIDQuIGF1dGhvcml6ZSgpIG1ldGhvZCBpcyBjYWxsZWQgaWYgYWxsIHJlcXVpcmVkIGNsYWltcyBhcmUgcHJvdmlkZWQuDQojIDUuIGRlc3Ryb3koKQ0KDQpmcm9tIG9yZy5nbHV1Lm1vZGVsLmN1c3RvbS5zY3JpcHQudHlwZS51bWEgaW1wb3J0IFVtYVJwdFBvbGljeVR5cGUNCmZyb20gb3JnLmdsdXUubW9kZWwudW1hIGltcG9ydCBDbGFpbURlZmluaXRpb25CdWlsZGVyDQpmcm9tIGphdmEubGFuZyBpbXBvcnQgU3RyaW5nDQoNCmNsYXNzIFVtYVJwdFBvbGljeShVbWFScHRQb2xpY3lUeXBlKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOg0KICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMNCg0KICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiUlBUIFBvbGljeS4gSW5pdGlhbGl6aW5nIC4uLiINCiAgICAgICAgcHJpbnQgIlJQVCBQb2xpY3kuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSINCg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgZGVmIGRlc3Ryb3koc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiUlBUIFBvbGljeS4gRGVzdHJveWluZyAuLi4iDQogICAgICAgIHByaW50ICJSUFQgUG9saWN5LiBEZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5Ig0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgZGVmIGdldEFwaVZlcnNpb24oc2VsZik6DQogICAgICAgIHJldHVybiAxMQ0KDQogICAgIyBSZXR1cm5zIHJlcXVpcmVkIGNsYWltcyBkZWZpbml0aW9ucy4NCiAgICAjIFRoaXMgbWV0aG9kIG11c3QgcHJvdmlkZSBkZWZpbml0aW9uIG9mIGFsbCBjbGFpbXMgdGhhdCBpcyB1c2VkIGluICdhdXRob3JpemUnIG1ldGhvZC4NCiAgICAjIE5vdGUgOiBuYW1lIGluIGJvdGggcGxhY2VzIG11c3QgbWF0Y2guDQogICAgIyAlMSRzIC0gcGxhY2Vob2xkZXIgZm9yIGlzc3Vlci4gSXQgdXNlcyBzdGFuZGFyZCBKYXZhIEZvcm1hdHRlciwgZG9jcyA6IGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2phdmFzZS83L2RvY3MvYXBpL2phdmEvdXRpbC9Gb3JtYXR0ZXIuaHRtbA0KICAgIGRlZiBnZXRSZXF1aXJlZENsYWltcyhzZWxmLCBjb250ZXh0KTogIyBjb250ZXh0IGlzIHJlZmVyZW5jZSBvZiBvcmcuZ2x1dS5veGF1dGgudW1hLmF1dGhvcml6YXRpb24uVW1hQXV0aG9yaXphdGlvbkNvbnRleHQNCiAgICAgICAganNvbiA9ICIiIlsNCiAgICAgICAgew0KICAgICAgICAgICAgImlzc3VlciIgOiBbICIlMSRzIiBdLA0KICAgICAgICAgICAgIm5hbWUiIDogImNvdW50cnkiLA0KICAgICAgICAgICAgImNsYWltX3Rva2VuX2Zvcm1hdCIgOiBbICJodHRwOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0lEVG9rZW4iIF0sDQogICAgICAgICAgICAiY2xhaW1fdHlwZSIgOiAic3RyaW5nIiwNCiAgICAgICAgICAgICJmcmllbmRseV9uYW1lIiA6ICJjb3VudHJ5Ig0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICAiaXNzdWVyIiA6IFsgIiUxJHMiIF0sDQogICAgICAgICAgICAibmFtZSIgOiAiY2l0eSIsDQogICAgICAgICAgICAiY2xhaW1fdG9rZW5fZm9ybWF0IiA6IFsgImh0dHA6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjSURUb2tlbiIgXSwNCiAgICAgICAgICAgICJjbGFpbV90eXBlIiA6ICJzdHJpbmciLA0KICAgICAgICAgICAgImZyaWVuZGx5X25hbWUiIDogImNpdHkiDQogICAgICAgIH0NCiAgICAgICAgXSIiIg0KICAgICAgICBjb250ZXh0LmFkZFJlZGlyZWN0VXNlclBhcmFtKCJjdXN0b21Vc2VyUGFyYW0xIiwgInZhbHVlMSIpICMgcGFzcyBzb21lIGN1c3RvbSBwYXJhbWV0ZXJzIHRvIG5lZWRfaW5mbyB1cmkuIEl0IGNhbiBiZSByZW1vdmVkIGlmIHlvdSBkb24ndCBuZWVkIGN1c3RvbSBwYXJhbWV0ZXJzLg0KICAgICAgICByZXR1cm4gQ2xhaW1EZWZpbml0aW9uQnVpbGRlci5idWlsZChTdHJpbmcuZm9ybWF0KGpzb24sIGNvbnRleHQuZ2V0SXNzdWVyKCkpKQ0KDQogICAgIyBNYWluIGF1dGhvcml6YXRpb24gbWV0aG9kLiBNdXN0IHJldHVybiBUcnVlIG9yIEZhbHNlLg0KICAgIGRlZiBhdXRob3JpemUoc2VsZiwgY29udGV4dCk6ICMgY29udGV4dCBpcyByZWZlcmVuY2Ugb2Ygb3JnLmdsdXUub3hhdXRoLnVtYS5hdXRob3JpemF0aW9uLlVtYUF1dGhvcml6YXRpb25Db250ZXh0DQogICAgICAgIHByaW50ICJSUFQgUG9saWN5LiBBdXRob3JpemluZyAuLi4iDQoNCiAgICAgICAgaWYgY29udGV4dC5nZXRDbGFpbSgiY291bnRyeSIpID09ICdVUycgYW5kIGNvbnRleHQuZ2V0Q2xhaW0oImNpdHkiKSA9PSAnTlknOg0KICAgICAgICAgICAgcHJpbnQgIkF1dGhvcml6ZWQgc3VjY2Vzc2Z1bGx5ISINCiAgICAgICAgICAgIHJldHVybiBUcnVlDQoNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAjIFJldHVybnMgbmFtZSBvZiB0aGUgQ2xhaW1zLUdhdGhlcmluZyBzY3JpcHQgd2hpY2ggd2lsbCBiZSBpbnZva2VkIGlmIG5lZWRfaW5mbyBlcnJvciBpcyByZXR1cm5lZC4NCiAgICBkZWYgZ2V0Q2xhaW1zR2F0aGVyaW5nU2NyaXB0TmFtZShzZWxmLCBjb250ZXh0KTogIyBjb250ZXh0IGlzIHJlZmVyZW5jZSBvZiBvcmcuZ2x1dS5veGF1dGgudW1hLmF1dGhvcml6YXRpb24uVW1hQXV0aG9yaXphdGlvbkNvbnRleHQNCiAgICAgICAgY29udGV4dC5hZGRSZWRpcmVjdFVzZXJQYXJhbSgiY3VzdG9tVXNlclBhcmFtMiIsICJ2YWx1ZTIiKSAjIHBhc3Mgc29tZSBjdXN0b20gcGFyYW1ldGVycyB0byBuZWVkX2luZm8gdXJpLiBJdCBjYW4gYmUgcmVtb3ZlZCBpZiB5b3UgZG9uJ3QgbmVlZCBjdXN0b20gcGFyYW1ldGVycy4NCiAgICAgICAgcmV0dXJuICJzYW1wbGVDbGFpbXNHYXRoZXJpbmci
oxScriptType: uma_rpt_policy
programmingLanguage: python

dn: inum=2DAF-F9A5,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Client authorization UMA RPT Policy for SCIM and Passport
displayName: scim_access_policy
oxEnabled: true
inum: 2DAF-F9A5
oxConfigurationProperty: {"value1":"allowed_clients","value2":"1202.0509cc32-059f-4045-ae35-e117f778b65c, 1502.7ffa77ce-515b-44db-8f11-52fb60161201","description":""}
oxLevel: 100
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE3LCBHbHV1CiMKIyBBdXRob3I6IEpvc2UgR29uemFsZXoKIyBBZGFwdGVkIGZyb20gcHJldmlvdXMgMy4wLjEgc2NyaXB0IG9mIFl1cml5IE1vdmNoYW4KIwojIG94Q29uZmlndXJhdGlvblByb3BlcnR5IHJlcXVpcmVkOgojICAgYWxsb3dlZF9jbGllbnRzIC0gY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgZG5zIG9mIGFsbG93ZWQgY2xpZW50cwojICAgKGkuZS4gdGhlIFNDSU0gUlAgY2xpZW50KQoKZnJvbSBvcmcuZ2x1dS5veGF1dGgubW9kZWwudW1hIGltcG9ydCBVbWFDb25zdGFudHMKZnJvbSBvcmcuZ2x1dS5tb2RlbC51bWEgaW1wb3J0IENsYWltRGVmaW5pdGlvbkJ1aWxkZXIKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUudW1hIGltcG9ydCBVbWFScHRQb2xpY3lUeXBlCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXIKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IEFycmF5cywgQXJyYXlMaXN0LCBIYXNoU2V0CmZyb20gamF2YS5sYW5nIGltcG9ydCBTdHJpbmcKCmNsYXNzIFVtYVJwdFBvbGljeShVbWFScHRQb2xpY3lUeXBlKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJSUFQgUG9saWN5LiBJbml0aWFsaXppbmcgLi4uIgogICAgICAgIHNlbGYuY2xpZW50c1NldCA9IHNlbGYucHJlcGFyZUNsaWVudHNTZXQoY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpCiAgICAgICAgcHJpbnQgIlJQVCBQb2xpY3kuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiUlBUIFBvbGljeS4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQoKICAgIGRlZiBnZXRSZXF1aXJlZENsYWltcyhzZWxmLCBjb250ZXh0KToKICAgICAgICBqc29uID0gIiIiWwogICAgICAgIF0iIiIKICAgICAgICByZXR1cm4gQ2xhaW1EZWZpbml0aW9uQnVpbGRlci5idWlsZChqc29uKQoKICAgIGRlZiBhdXRob3JpemUoc2VsZiwgY29udGV4dCk6ICMgY29udGV4dCBpcyByZWZlcmVuY2Ugb2Ygb3JnLmdsdXUub3hhdXRoLnVtYS5hdXRob3JpemF0aW9uLlVtYUF1dGhvcml6YXRpb25Db250ZXh0CiAgICAgICAgcHJpbnQgIlJQVCBQb2xpY3kuIEF1dGhvcml6aW5nIC4uLiIKCiAgICAgICAgY2xpZW50X2lkPWNvbnRleHQuZ2V0Q2xpZW50KCkuZ2V0Q2xpZW50SWQoKQogICAgICAgIHByaW50ICJVbWFScHRQb2xpY3kuIGNsaWVudF9pZCA9ICVzIiAlIGNsaWVudF9pZAoKICAgICAgICBpZiAoU3RyaW5nSGVscGVyLmlzRW1wdHkoY2xpZW50X2lkKSk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgIAogICAgICAgIGlmIChzZWxmLmNsaWVudHNTZXQuY29udGFpbnMoY2xpZW50X2lkKSk6CiAgICAgICAgICAgIHByaW50ICJVbWFScHRQb2xpY3kuIEF1dGhvcml6aW5nIGNsaWVudCIKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCAiVW1hUnB0UG9saWN5LiBDbGllbnQgaXNuJ3QgYXV0aG9yaXplZCIKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldENsYWltc0dhdGhlcmluZ1NjcmlwdE5hbWUoc2VsZiwgY29udGV4dCk6CiAgICAgICAgcmV0dXJuIFVtYUNvbnN0YW50cy5OT19TQ1JJUFQKCiAgICBkZWYgcHJlcGFyZUNsaWVudHNTZXQoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIGNsaWVudHNTZXQgPSBIYXNoU2V0KCkKICAgICAgICBpZiAobm90IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmNvbnRhaW5zS2V5KCJhbGxvd2VkX2NsaWVudHMiKSk6CiAgICAgICAgICAgIHJldHVybiBjbGllbnRzU2V0CgogICAgICAgIGFsbG93ZWRDbGllbnRzTGlzdCA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgiYWxsb3dlZF9jbGllbnRzIikuZ2V0VmFsdWUyKCkKICAgICAgICBpZiAoU3RyaW5nSGVscGVyLmlzRW1wdHkoYWxsb3dlZENsaWVudHNMaXN0KSk6CiAgICAgICAgICAgIHByaW50ICJVbWFScHRQb2xpY3kuIFRoZSBwcm9wZXJ0eSBhbGxvd2VkX2NsaWVudHMgaXMgZW1wdHkiCiAgICAgICAgICAgIHJldHVybiBjbGllbnRzU2V0ICAgIAoKICAgICAgICBhbGxvd2VkQ2xpZW50c0xpc3RBcnJheSA9IFN0cmluZ0hlbHBlci5zcGxpdChhbGxvd2VkQ2xpZW50c0xpc3QsICIsIikKICAgICAgICBpZiAoQXJyYXlIZWxwZXIuaXNFbXB0eShhbGxvd2VkQ2xpZW50c0xpc3RBcnJheSkpOgogICAgICAgICAgICBwcmludCAiVW1hUnB0UG9saWN5LiBObyBjbGllbnRzIHNwZWNpZmllZCBpbiBhbGxvd2VkX2NsaWVudHMgcHJvcGVydHkiCiAgICAgICAgICAgIHJldHVybiBjbGllbnRzU2V0CiAgICAgICAgCiAgICAgICAgIyBDb252ZXJ0IHRvIEhhc2hTZXQgdG8gcXVpY2sgc2VhcmNoCiAgICAgICAgaSA9IDAKICAgICAgICBjb3VudCA9IGxlbihhbGxvd2VkQ2xpZW50c0xpc3RBcnJheSkKICAgICAgICB3aGlsZSAoaSA8IGNvdW50KToKICAgICAgICAgICAgY2xpZW50ID0gYWxsb3dlZENsaWVudHNMaXN0QXJyYXlbaV0KICAgICAgICAgICAgY2xpZW50c1NldC5hZGQoY2xpZW50KQogICAgICAgICAgICBpID0gaSArIDEKCiAgICAgICAgcmV0dXJuIGNsaWVudHNTZXQK
oxScriptType: uma_rpt_policy
programmingLanguage: python

dn: inum=OO11-BAFE,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Client authorization UMA RPT Policy for oxtrust api
displayName: oxtrust_api_access_policy
oxEnabled: false
inum: OO11-BAFE
oxConfigurationProperty: {"value1":"allowed_clients","value2":"1402.ea813f43-e860-47fe-8356-7cb31aa03004","description":""}
oxLevel: 100
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE3LCBHbHV1CiMKIyBBdXRob3I6IEpvc2UgR29uemFsZXoKIyBBZGFwdGVkIGZyb20gcHJldmlvdXMgMy4wLjEgc2NyaXB0IG9mIFl1cml5IE1vdmNoYW4KIwojIG94Q29uZmlndXJhdGlvblByb3BlcnR5IHJlcXVpcmVkOgojICAgYWxsb3dlZF9jbGllbnRzIC0gY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgZG5zIG9mIGFsbG93ZWQgY2xpZW50cwojICAgKGkuZS4gdGhlIFNDSU0gUlAgY2xpZW50KQoKZnJvbSBvcmcuZ2x1dS5veGF1dGgubW9kZWwudW1hIGltcG9ydCBVbWFDb25zdGFudHMKZnJvbSBvcmcuZ2x1dS5tb2RlbC51bWEgaW1wb3J0IENsYWltRGVmaW5pdGlvbkJ1aWxkZXIKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUudW1hIGltcG9ydCBVbWFScHRQb2xpY3lUeXBlCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXIKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IEFycmF5cywgQXJyYXlMaXN0LCBIYXNoU2V0CmZyb20gamF2YS5sYW5nIGltcG9ydCBTdHJpbmcKCmNsYXNzIFVtYVJwdFBvbGljeShVbWFScHRQb2xpY3lUeXBlKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJSUFQgUG9saWN5LiBJbml0aWFsaXppbmcgLi4uIgogICAgICAgIHNlbGYuY2xpZW50c1NldCA9IHNlbGYucHJlcGFyZUNsaWVudHNTZXQoY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpCiAgICAgICAgcHJpbnQgIlJQVCBQb2xpY3kuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiUlBUIFBvbGljeS4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQoKICAgIGRlZiBnZXRSZXF1aXJlZENsYWltcyhzZWxmLCBjb250ZXh0KToKICAgICAgICBqc29uID0gIiIiWwogICAgICAgIF0iIiIKICAgICAgICByZXR1cm4gQ2xhaW1EZWZpbml0aW9uQnVpbGRlci5idWlsZChqc29uKQoKICAgIGRlZiBhdXRob3JpemUoc2VsZiwgY29udGV4dCk6ICMgY29udGV4dCBpcyByZWZlcmVuY2Ugb2Ygb3JnLmdsdXUub3hhdXRoLnVtYS5hdXRob3JpemF0aW9uLlVtYUF1dGhvcml6YXRpb25Db250ZXh0CiAgICAgICAgcHJpbnQgIlJQVCBQb2xpY3kuIEF1dGhvcml6aW5nIC4uLiIKCiAgICAgICAgY2xpZW50X2lkPWNvbnRleHQuZ2V0Q2xpZW50KCkuZ2V0Q2xpZW50SWQoKQogICAgICAgIHByaW50ICJVbWFScHRQb2xpY3kuIGNsaWVudF9pZCA9ICVzIiAlIGNsaWVudF9pZAoKICAgICAgICBpZiAoU3RyaW5nSGVscGVyLmlzRW1wdHkoY2xpZW50X2lkKSk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgIAogICAgICAgIGlmIChzZWxmLmNsaWVudHNTZXQuY29udGFpbnMoY2xpZW50X2lkKSk6CiAgICAgICAgICAgIHByaW50ICJVbWFScHRQb2xpY3kuIEF1dGhvcml6aW5nIGNsaWVudCIKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCAiVW1hUnB0UG9saWN5LiBDbGllbnQgaXNuJ3QgYXV0aG9yaXplZCIKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldENsYWltc0dhdGhlcmluZ1NjcmlwdE5hbWUoc2VsZiwgY29udGV4dCk6CiAgICAgICAgcmV0dXJuIFVtYUNvbnN0YW50cy5OT19TQ1JJUFQKCiAgICBkZWYgcHJlcGFyZUNsaWVudHNTZXQoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIGNsaWVudHNTZXQgPSBIYXNoU2V0KCkKICAgICAgICBpZiAobm90IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmNvbnRhaW5zS2V5KCJhbGxvd2VkX2NsaWVudHMiKSk6CiAgICAgICAgICAgIHJldHVybiBjbGllbnRzU2V0CgogICAgICAgIGFsbG93ZWRDbGllbnRzTGlzdCA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgiYWxsb3dlZF9jbGllbnRzIikuZ2V0VmFsdWUyKCkKICAgICAgICBpZiAoU3RyaW5nSGVscGVyLmlzRW1wdHkoYWxsb3dlZENsaWVudHNMaXN0KSk6CiAgICAgICAgICAgIHByaW50ICJVbWFScHRQb2xpY3kuIFRoZSBwcm9wZXJ0eSBhbGxvd2VkX2NsaWVudHMgaXMgZW1wdHkiCiAgICAgICAgICAgIHJldHVybiBjbGllbnRzU2V0ICAgIAoKICAgICAgICBhbGxvd2VkQ2xpZW50c0xpc3RBcnJheSA9IFN0cmluZ0hlbHBlci5zcGxpdChhbGxvd2VkQ2xpZW50c0xpc3QsICIsIikKICAgICAgICBpZiAoQXJyYXlIZWxwZXIuaXNFbXB0eShhbGxvd2VkQ2xpZW50c0xpc3RBcnJheSkpOgogICAgICAgICAgICBwcmludCAiVW1hUnB0UG9saWN5LiBObyBjbGllbnRzIHNwZWNpZmllZCBpbiBhbGxvd2VkX2NsaWVudHMgcHJvcGVydHkiCiAgICAgICAgICAgIHJldHVybiBjbGllbnRzU2V0CiAgICAgICAgCiAgICAgICAgIyBDb252ZXJ0IHRvIEhhc2hTZXQgdG8gcXVpY2sgc2VhcmNoCiAgICAgICAgaSA9IDAKICAgICAgICBjb3VudCA9IGxlbihhbGxvd2VkQ2xpZW50c0xpc3RBcnJheSkKICAgICAgICB3aGlsZSAoaSA8IGNvdW50KToKICAgICAgICAgICAgY2xpZW50ID0gYWxsb3dlZENsaWVudHNMaXN0QXJyYXlbaV0KICAgICAgICAgICAgY2xpZW50c1NldC5hZGQoY2xpZW50KQogICAgICAgICAgICBpID0gaSArIDEKCiAgICAgICAgcmV0dXJuIGNsaWVudHNTZXQK
oxScriptType: uma_rpt_policy
programmingLanguage: python

dn: inum=2DAF-F996,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample UMA Claims Gathering
displayName: sampleClaimsGathering
oxEnabled: false
inum: 2DAF-F996
oxLevel: 1
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNywgR2x1dQ0KIw0KIyBBdXRob3I6IFl1cml5IFphYnJvdmFybnl5DQojDQoNCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLnVtYSBpbXBvcnQgVW1hQ2xhaW1zR2F0aGVyaW5nVHlwZQ0KDQpjbGFzcyBVbWFDbGFpbXNHYXRoZXJpbmcoVW1hQ2xhaW1zR2F0aGVyaW5nVHlwZSk6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOg0KICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMNCg0KICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiQ2xhaW1zLUdhdGhlcmluZy4gSW5pdGlhbGl6aW5nIC4uLiINCiAgICAgICAgcHJpbnQgIkNsYWltcy1HYXRoZXJpbmcuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSINCg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgZGVmIGRlc3Ryb3koc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiQ2xhaW1zLUdhdGhlcmluZy4gRGVzdHJveWluZyAuLi4iDQogICAgICAgIHByaW50ICJDbGFpbXMtR2F0aGVyaW5nLiBEZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5Ig0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgZGVmIGdldEFwaVZlcnNpb24oc2VsZik6DQogICAgICAgIHJldHVybiAxMQ0KDQoNCiAgICAjIE1haW4gZ2F0aGVyIG1ldGhvZC4gTXVzdCByZXR1cm4gVHJ1ZSAoaWYgZ2F0aGVyaW5nIHBlcmZvcm1lZCBzdWNjZXNzZnVsbHkpIG9yIEZhbHNlIChpZiBmYWlsKS4NCiAgICAjIE1ldGhvZCBtdXN0IHNldCBjbGFpbSBpbnRvIGNvbnRleHQgKHZpYSBjb250ZXh0LnB1dENsYWltKCduYW1lJywgdmFsdWUpKSBpbiBvcmRlciB0byBwZXJzaXN0IGl0IChvdGhlcndpc2UgaXQgd2lsbCBiZSBsb3N0KS4NCiAgICAjIEFsbCB1c2VyIGVudGVyZWQgdmFsdWVzIGNhbiBiZSBhY2Nlc3MgdmlhIE1hcDxTdHJpbmcsIFN0cmluZz4gY29udGV4dC5nZXRQYWdlQ2xhaW1zKCkNCiAgICBkZWYgZ2F0aGVyKHNlbGYsIHN0ZXAsIGNvbnRleHQpOiAjIGNvbnRleHQgaXMgcmVmZXJlbmNlIG9mIG9yZy5nbHV1Lm94YXV0aC51bWEuYXV0aG9yaXphdGlvbi5VbWFHYXRoZXJDb250ZXh0DQogICAgICAgIHByaW50ICJDbGFpbXMtR2F0aGVyaW5nLiBHYXRoZXJpbmcgLi4uIg0KDQogICAgICAgIGlmIHN0ZXAgPT0gMToNCiAgICAgICAgICAgIGlmIChjb250ZXh0LmdldFBhZ2VDbGFpbXMoKS5jb250YWluc0tleSgiY291bnRyeSIpKToNCiAgICAgICAgICAgICAgICBjb3VudHJ5ID0gY29udGV4dC5nZXRQYWdlQ2xhaW1zKCkuZ2V0KCJjb3VudHJ5IikNCiAgICAgICAgICAgICAgICBwcmludCAiQ291bnRyeTogIiArIGNvdW50cnkNCg0KICAgICAgICAgICAgICAgIGNvbnRleHQucHV0Q2xhaW0oImNvdW50cnkiLCBjb3VudHJ5KQ0KICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQoNCiAgICAgICAgICAgIHByaW50ICJDbGFpbXMtR2F0aGVyaW5nLiAnY291bnRyeScgaXMgbm90IHByb3ZpZGVkIG9uIHN0ZXAgMS4iDQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgICAgICBlbGlmIHN0ZXAgPT0gMjoNCiAgICAgICAgICAgIGlmIChjb250ZXh0LmdldFBhZ2VDbGFpbXMoKS5jb250YWluc0tleSgiY2l0eSIpKToNCiAgICAgICAgICAgICAgICBjaXR5ID0gY29udGV4dC5nZXRQYWdlQ2xhaW1zKCkuZ2V0KCJjaXR5IikNCiAgICAgICAgICAgICAgICBwcmludCAiQ2l0eTogIiArIGNpdHkNCg0KICAgICAgICAgICAgICAgIGNvbnRleHQucHV0Q2xhaW0oImNpdHkiLCBjaXR5KQ0KICAgICAgICAgICAgICAgIHByaW50ICJDbGFpbXMtR2F0aGVyaW5nLiAnY2l0eScgaXMgbm90IHByb3ZpZGVkIG9uIHN0ZXAgMi4iDQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgIGRlZiBnZXROZXh0U3RlcChzZWxmLCBzdGVwLCBjb250ZXh0KToNCiAgICAgICAgcmV0dXJuIC0xDQoNCiAgICBkZWYgcHJlcGFyZUZvclN0ZXAoc2VsZiwgc3RlcCwgY29udGV4dCk6DQogICAgICAgIGlmIHN0ZXAgPT0gMTAgYW5kIG5vdCBjb250ZXh0LmlzQXV0aGVudGljYXRlZCgpOg0KICAgICAgICAgICAgIyB1c2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkLCBzbyB3ZSBhcmUgcmVkaXJlY3RpbmcgdXNlciB0byBhdXRob3JpemF0aW9uIGVuZHBvaW50DQogICAgICAgICAgICAjIGNsaWVudF9pZCBpcyBzcGVjaWZpZWQgdmlhIGNvbmZpZ3VyYXRpb24gYXR0cmlidXRlLg0KICAgICAgICAgICAgIyBNYWtlIHN1cmUgdGhhdCBnaXZlbiBjbGllbnQgaGFzIHJlZGlyZWN0X3VyaSB0byBDbGFpbXMtR2F0aGVyaW5nIEVuZHBvaW50IHdpdGggcGFyYW1ldGVyIGF1dGhlbnRpY2F0aW9uPXRydWUNCiAgICAgICAgICAgICMgU2FtcGxlIGh0dHBzOi8vc2FtcGxlLmNvbS9yZXN0djEvdW1hL2dhdGhlcl9jbGFpbXM/YXV0aGVudGljYXRpb249dHJ1ZQ0KICAgICAgICAgICAgIyBJZiByZWRpcmVjdCB0byBleHRlcm5hbCB1cmwgaXMgcGVyZm9ybWF0ZWQsIG1ha2Ugc3VyZSB0aGF0IHZpZXdBY3Rpb24gaGFzIG9uUG9zdGJhY2s9InRydWUiIChvdGhlcndpc2UgcmVkaXJlY3Qgd2lsbCBub3Qgd29yaykNCiAgICAgICAgICAgICMgQWZ0ZXIgdXNlciBpcyBhdXRoZW50aWNhdGVkIHRoZW4gd2l0aGluIHRoZSBzY3JpcHQgaXQncyBwb3NzaWJsZSB0byBnZXQgdXNlciBhdHRyaWJ1dGVzIGFzDQogICAgICAgICAgICAjIGNvbnRleHQuZ2V0VXNlcigidWlkIiwgInNuIikNCiAgICAgICAgICAgICMgSWYgdXNlciBpcyBhdXRoZW50aWNhdGVkIHRvIGN1cnJlbnQgQVMgKHRvIHRoZSBzYW1lIHNlcnZlciwgbm90IGV4dGVybmFsIG9uZSkgdGhlbiBpdCdzIHBvc3NpYmxlIHRvDQogICAgICAgICAgICAjIGFjY2VzcyBDb25uZWN0IHNlc3Npb24gYXR0cmlidXRlcyBkaXJlY3RseSAobm8gbmVlZCB0byBvYnRhaW4gaWRfdG9rZW4gYWZ0ZXIgcmVkaXJlY3Qgd2l0aCAnY29kZScpLg0KICAgICAgICAgICAgIyBUbyBmZXRjaCBhdHRyaWJ1dGVzIHBsZWFzZSB1c2UgZ2V0Q29ubmVjdFNlc3Npb25BdHRyaWJ1dGVzKCkgbWV0aG9kLg0KDQogICAgICAgICAgICBwcmludCAiVXNlciBpcyBub3QgYXV0aGVudGljYXRlZC4gUmVkaXJlY3QgZm9yIGF1dGhlbnRpY2F0aW9uIC4uLiINCiAgICAgICAgICAgIGNsaWVudElkID0gY29udGV4dC5nZXRDb25maWd1cmF0aW9uQXR0cmlidXRlcygpLmdldCgiY2xpZW50X2lkIikuZ2V0VmFsdWUyKCkNCiAgICAgICAgICAgIHJlZGlyZWN0VXJpID0gY29udGV4dC5nZXRDbGFpbXNHYXRoZXJpbmdFbmRwb2ludCgpICsgIj9hdXRoZW50aWNhdGlvbj10cnVlIiAjIHdpdGhvdXQgYXV0aGVudGljYXRpb249dHJ1ZSBwYXJhbWV0ZXIgaXQgd2lsbCBub3Qgd29yaw0KICAgICAgICAgICAgYXV0aG9yaXphdGlvblVybCA9IGNvbnRleHQuZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50KCkgKyAiP2NsaWVudF9pZD0iICsgY2xpZW50SWQgKyAiJnJlZGlyZWN0X3VyaT0iICsgcmVkaXJlY3RVcmkgKyAiJnNjb3BlPW9wZW5pZCZyZXNwb25zZV90eXBlPWNvZGUiDQogICAgICAgICAgICBjb250ZXh0LnJlZGlyZWN0VG9FeHRlcm5hbFVybChhdXRob3JpemF0aW9uVXJsKSAjIHJlZGlyZWN0IHRvIGV4dGVybmFsIHVybA0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgICAgIGlmIHN0ZXAgPT0gMTAgYW5kIGNvbnRleHQuaXNBdXRoZW50aWNhdGVkKCk6ICMgZXhhbXBsZSBob3cgdG8gZ2V0IHNlc3Npb24gYXR0cmlidXRlIGlmIHVzZXIgaXMgYXV0aGVudGljYXRlZCB0byBzYW1lIEFTDQogICAgICAgICAgICBhcmMgPSBjb250ZXh0LmdldENvbm5lY3RTZXNzaW9uQXR0cmlidXRlcygpLmdldCgiYWNyIikNCg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgZGVmIGdldFN0ZXBzQ291bnQoc2VsZiwgY29udGV4dCk6DQogICAgICAgIHJldHVybiAyDQoNCiAgICBkZWYgZ2V0UGFnZUZvclN0ZXAoc2VsZiwgc3RlcCwgY29udGV4dCk6DQogICAgICAgIGlmIHN0ZXAgPT0gMToNCiAgICAgICAgICAgIHJldHVybiAiL3VtYTIvc2FtcGxlL2NvdW50cnkueGh0bWwiDQogICAgICAgIGVsaWYgc3RlcCA9PSAyOg0KICAgICAgICAgICAgcmV0dXJuICIvdW1hMi9zYW1wbGUvY2l0eS54aHRtbCINCiAgICAgICAgcmV0dXJuICIi
oxScriptType: uma_claims_gathering
programmingLanguage: python

dn: inum=2DAF-AA90,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Introspection Sample Script
displayName: introspection_sample
oxEnabled: false
inum: 2DAF-AA90
oxLevel: 1
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE4LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IFphYnJvdmFybnl5CiMKIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuaW50cm9zcGVjdGlvbiBpbXBvcnQgSW50cm9zcGVjdGlvblR5cGUKZnJvbSBqYXZhLmxhbmcgaW1wb3J0IFN0cmluZwoKY2xhc3MgSW50cm9zcGVjdGlvbihJbnRyb3NwZWN0aW9uVHlwZSk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJJbnRyb3NwZWN0aW9uIHNjcmlwdC4gSW5pdGlhbGl6aW5nIC4uLiIKICAgICAgICBwcmludCAiSW50cm9zcGVjdGlvbiBzY3JpcHQuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSIKCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkludHJvc3BlY3Rpb24gc2NyaXB0LiBEZXN0cm95aW5nIC4uLiIKICAgICAgICBwcmludCAiSW50cm9zcGVjdGlvbiBzY3JpcHQuIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICAjIFJldHVybnMgYm9vbGVhbiwgdHJ1ZSAtIGFwcGx5IGludHJvc3BlY3Rpb24gbWV0aG9kLCBmYWxzZSAtIGlnbm9yZSBpdC4KICAgICMgVGhpcyBtZXRob2QgaXMgY2FsbGVkIGFmdGVyIGludHJvc3BlY3Rpb24gcmVzcG9uc2UgaXMgcmVhZHkuIFRoaXMgbWV0aG9kIGNhbiBtb2RpZnkgaW50cm9zcGVjdGlvbiByZXNwb25zZS4KICAgICMgTm90ZSA6CiAgICAjIHJlc3BvbnNlQXNKc29uT2JqZWN0IC0gaXMgb3JnLmNvZGVoYXVzLmpldHRpc29uLmpzb24uSlNPTk9iamVjdCwgeW91IGNhbiB1c2UgYW55IG1ldGhvZCB0byBtYW5pcHVsYXRlIGpzb24KICAgICMgY29udGV4dCBpcyByZWZlcmVuY2Ugb2Ygb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuZXh0ZXJuYWwuY29udGV4dC5FeHRlcm5hbEludHJvc3BlY3Rpb25Db250ZXh0IChpbiBodHRwczovL2dpdGh1Yi5jb20vR2x1dUZlZGVyYXRpb24vb3hhdXRoIHByb2plY3QsICkKICAgIGRlZiBtb2RpZnlSZXNwb25zZShzZWxmLCByZXNwb25zZUFzSnNvbk9iamVjdCwgY29udGV4dCk6CiAgICAgICAgcmVzcG9uc2VBc0pzb25PYmplY3QuYWNjdW11bGF0ZSgia2V5X2Zyb21fc2NyaXB0IiwgInZhbHVlX2Zyb21fc2NyaXB0IikKICAgICAgICByZXR1cm4gVHJ1ZQoK
oxScriptType: introspection
programmingLanguage: python

dn: inum=2DAF-BA90,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Introspection Custom Parameters Sample Script
displayName: introspection_custom_params
oxEnabled: false
inum: 2DAF-BA90
oxLevel: 1
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE5LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vY2hhbgojCiMKCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLmludHJvc3BlY3Rpb24gaW1wb3J0IEludHJvc3BlY3Rpb25UeXBlCmZyb20gb3JnLmdsdXUub3hhdXRoLm1vZGVsLmNvbW1vbiBpbXBvcnQgQXV0aG9yaXphdGlvbkdyYW50TGlzdApmcm9tIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlIGltcG9ydCBTZXNzaW9uSWRTZXJ2aWNlCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIGphdmEubGFuZyBpbXBvcnQgU3RyaW5nCgpjbGFzcyBJbnRyb3NwZWN0aW9uKEludHJvc3BlY3Rpb25UeXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkludHJvc3BlY3Rpb24gc2NyaXB0LiBJbml0aWFsaXppbmcgLi4uIgogICAgICAgIHByaW50ICJJbnRyb3NwZWN0aW9uIHNjcmlwdC4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiSW50cm9zcGVjdGlvbiBzY3JpcHQuIERlc3Ryb3lpbmcgLi4uIgogICAgICAgIHByaW50ICJJbnRyb3NwZWN0aW9uIHNjcmlwdC4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQoKICAgICMgUmV0dXJucyBib29sZWFuLCB0cnVlIC0gYXBwbHkgaW50cm9zcGVjdGlvbiBtZXRob2QsIGZhbHNlIC0gaWdub3JlIGl0LgogICAgIyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYWZ0ZXIgaW50cm9zcGVjdGlvbiByZXNwb25zZSBpcyByZWFkeS4gVGhpcyBtZXRob2QgY2FuIG1vZGlmeSBpbnRyb3NwZWN0aW9uIHJlc3BvbnNlLgogICAgIyBOb3RlIDoKICAgICMgcmVzcG9uc2VBc0pzb25PYmplY3QgLSBpcyBvcmcuY29kZWhhdXMuamV0dGlzb24uanNvbi5KU09OT2JqZWN0LCB5b3UgY2FuIHVzZSBhbnkgbWV0aG9kIHRvIG1hbmlwdWxhdGUganNvbgogICAgIyBjb250ZXh0IGlzIHJlZmVyZW5jZSBvZiBvcmcuZ2x1dS5veGF1dGguc2VydmljZS5leHRlcm5hbC5jb250ZXh0LkV4dGVybmFsSW50cm9zcGVjdGlvbkNvbnRleHQgKGluIGh0dHBzOi8vZ2l0aHViLmNvbS9HbHV1RmVkZXJhdGlvbi9veGF1dGggcHJvamVjdCwgKQogICAgZGVmIG1vZGlmeVJlc3BvbnNlKHNlbGYsIHJlc3BvbnNlQXNKc29uT2JqZWN0LCBjb250ZXh0KToKICAgICAgICB0b2tlbiA9IGNvbnRleHQuZ2V0SHR0cFJlcXVlc3QoKS5nZXRQYXJhbWV0ZXIoInRva2VuIikKICAgICAgICBpZiB0b2tlbiBpcyBOb25lOgogICAgICAgICAgICBwcmludCAiSW50cm9zcGVjdGlvbi4gVGhlcmUgaXMgbm8gdG9rZW4gaW4gcmVxdWVzdCIKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIGF1dGhvcml6YXRpb25HcmFudExpc3QgPSBDZGlVdGlsLmJlYW4oQXV0aG9yaXphdGlvbkdyYW50TGlzdCkKICAgICAgICBhdXRob3JpemF0aW9uR3JhbnQgPSBhdXRob3JpemF0aW9uR3JhbnRMaXN0LmdldEF1dGhvcml6YXRpb25HcmFudEJ5QWNjZXNzVG9rZW4odG9rZW4pOwogICAgICAgIGlmIGF1dGhvcml6YXRpb25HcmFudCBpcyBOb25lOgogICAgICAgICAgICBwcmludCAiSW50cm9zcGVjdGlvbi4gRmFpbGVkIHRvIGxvYWQgYXV0aG9yaXphdGlvbiBncmFudCBieSB0b2tlbiIKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICMgUHV0IHVzZXJfaWQgaW50byByZXNwb25zZQogICAgICAgIHJlc3BvbnNlQXNKc29uT2JqZWN0LmFjY3VtdWxhdGUoInVzZXJfaWQiLCBhdXRob3JpemF0aW9uR3JhbnQuZ2V0VXNlcigpLmdldFVzZXJJZCgpKQoKICAgICAgICAjIFB1dCBjdXN0b20gcGFyYW1ldGVycyBpbnRvIHJlc3BvbnNlCiAgICAgICAgc2Vzc2lvbkRuID0gYXV0aG9yaXphdGlvbkdyYW50LmdldFNlc3Npb25EbigpOwogICAgICAgIGlmIHNlc3Npb25EbiBpcyBOb25lOgogICAgICAgICAgICAjIFRoZXJlIGlzIG5vIHNlc3Npb24KICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICAgICAgc2Vzc2lvbklkU2VydmljZSA9IENkaVV0aWwuYmVhbihTZXNzaW9uSWRTZXJ2aWNlKQogICAgICAgIHNlc3Npb24gPSBzZXNzaW9uSWRTZXJ2aWNlLmdldFNlc3Npb25CeUlkKHNlc3Npb25EbikKICAgICAgICBpZiBzZXNzaW9uRG4gaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQgIkludHJvc3BlY3Rpb24uIEZhaWxlZCB0byBsb2FkIHNlc3Npb24gJyVzJyIgJSBzZXNzaW9uRG4KICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICMgUmV0dXJuIHNlc3Npb25faWQKICAgICAgICByZXNwb25zZUFzSnNvbk9iamVjdC5hY2N1bXVsYXRlKCJzZXNzaW9uX2lkIiwgc2Vzc2lvbkRuKQogICAgICAgIAogICAgICAgIHNlc3Npb25BdHRyaWJ1dGVzID0gc2Vzc2lvbi5nZXRTZXNzaW9uQXR0cmlidXRlcygpCiAgICAgICAgaWYgc2Vzc2lvbkF0dHJpYnV0ZXMgaXMgTm9uZToKICAgICAgICAgICAgIyBUaGVyZSBpcyBubyBzZXNzaW9uIGF0dHJpYnV0ZXMKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICAgICAgIyBBcHBlbmQgY3VzdG9tIGNsYWltcwogICAgICAgIGlmIHNlc3Npb25BdHRyaWJ1dGVzLmNvbnRhaW5zS2V5KCJjdXN0b20xIik6CiAgICAgICAgICAgIHJlc3BvbnNlQXNKc29uT2JqZWN0LmFjY3VtdWxhdGUoImN1c3RvbTEiLCBzZXNzaW9uQXR0cmlidXRlcy5nZXQoImN1c3RvbTEiKSkKICAgICAgICBpZiBzZXNzaW9uQXR0cmlidXRlcy5jb250YWluc0tleSgiY3VzdG9tMiIpOgogICAgICAgICAgICByZXNwb25zZUFzSnNvbk9iamVjdC5hY2N1bXVsYXRlKCJjdXN0b20yIiwgc2Vzc2lvbkF0dHJpYnV0ZXMuZ2V0KCJjdXN0b20yIikpCgogICAgICAgIHJldHVybiBUcnVlCgo=
oxScriptType: introspection
programmingLanguage: python

dn: inum=2DAF-CA90,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Frontchannel logout Sample
displayName: frontchannel_logout_sample
oxEnabled: false
inum: 2DAF-CA90
oxLevel: 1
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBDb3B5cmlnaHQgKGMpIDIwMjAsIEdsdXUKIwojIEF1dGhvcjogWXVyaXkgWmFicm92YXJueXkKIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUubG9nb3V0IGltcG9ydCBFbmRTZXNzaW9uVHlwZQpmcm9tIGphdmEubGFuZyBpbXBvcnQgU3RyaW5nCgpjbGFzcyBFbmRTZXNzaW9uKEVuZFNlc3Npb25UeXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkVuZFNlc3Npb24gc2NyaXB0LiBJbml0aWFsaXppbmcgLi4uIgogICAgICAgIHByaW50ICJFbmRTZXNzaW9uIHNjcmlwdC4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiRW5kU2Vzc2lvbiBzY3JpcHQuIERlc3Ryb3lpbmcgLi4uIgogICAgICAgIHByaW50ICJFbmRTZXNzaW9uIHNjcmlwdC4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQoKICAgICMgUmV0dXJucyBzdHJpbmcsIGl0IG11c3QgYmUgdmFsaWQgSFRNTCAod2l0aCBpZnJhbWVzIGFjY29yZGluZyB0byBzcGVjIGh0dHA6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWZyb250Y2hhbm5lbC0xXzAuaHRtbCkKICAgICMgVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uIGAvZW5kX3Nlc3Npb25gIGFmdGVyIGFjdHVhbCBzZXNzaW9uIGlzIGtpbGxlZCBhbmQgb3hhdXRoIGNvbnN0cnVjdCBIVE1MIHRvIHJldHVybiB0byBSUC4KICAgICMgTm90ZSA6CiAgICAjIGNvbnRleHQgaXMgcmVmZXJlbmNlIG9mIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlLmV4dGVybmFsLmNvbnRleHQuRW5kU2Vzc2lvbkNvbnRleHQgKGluIGh0dHBzOi8vZ2l0aHViLmNvbS9HbHV1RmVkZXJhdGlvbi9veGF1dGggcHJvamVjdCwgKQogICAgZGVmIGdldEZyb250Y2hhbm5lbEh0bWwoc2VsZiwgY29udGV4dCk6CiAgICAgICAgcmV0dXJuICIi
oxScriptType: end_session
programmingLanguage: python

dn: inum=2DAF-AA91,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Resource Owner Password Credentials Example
displayName: resource_owner_password_credentials_example
oxEnabled: false
inum: 2DAF-AA91
oxLevel: 1
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: ZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUub3duZXIgaW1wb3J0IFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzVHlwZQpmcm9tIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlIGltcG9ydCBBdXRoZW50aWNhdGlvblNlcnZpY2UKZnJvbSBvcmcuZ2x1dS5zZXJ2aWNlLmNkaS51dGlsIGltcG9ydCBDZGlVdGlsCmZyb20gamF2YS5sYW5nIGltcG9ydCBTdHJpbmcKCmNsYXNzIFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzKFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzVHlwZSk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJST1BDIHNjcmlwdC4gSW5pdGlhbGl6aW5nIC4uLiIKCiAgICAgICAgc2VsZi51c2VybmFtZVBhcmFtTmFtZSA9ICJ1c2VybmFtZSIKICAgICAgICBzZWxmLnBhc3N3b3JkUGFyYW1OYW1lID0gInBhc3N3b3JkIgoKICAgICAgICBwcmludCAiUk9QQyBzY3JpcHQuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSIKCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIlJPUEMgc2NyaXB0LiBEZXN0cm95aW5nIC4uLiIKICAgICAgICBwcmludCAiUk9QQyBzY3JpcHQuIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICAjIFJldHVybnMgVHJ1ZSBhbmQgc2V0IHVzZXIgaW50byBjb250ZXh0IHdoZW4gdXNlciBhdXRoZW50aWNhdGVkIHN1Y2Nlc2Z1bGx5CiAgICAjIFJldHVybnMgRmFsc2Ugd2hlbiB1c2VyIG5vdCBhdXRoZW50aWNhdGVkIG9yIGl0J3MgbmVlZGVkIHRvIGNhbmNlbCBub3RtYWwgZmxvdwogICAgIyBOb3RlIDoKICAgICMgY29udGV4dCBpcyByZWZlcmVuY2Ugb2Ygb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuZXh0ZXJuYWwuY29udGV4dC5FeHRlcm5hbFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzQ29udGV4dCNFeHRlcm5hbFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzQ29udGV4dCAoaW4gaHR0cHM6Ly9naXRodWIuY29tL0dsdXVGZWRlcmF0aW9uL294YXV0aCBwcm9qZWN0LCApCiAgICBkZWYgYXV0aGVudGljYXRlKHNlbGYsIGNvbnRleHQpOgogICAgICAgIHByaW50ICJST1BDIHNjcmlwdC4gQXV0aGVudGljYXRlIgogICAgICAgIGRldmljZUlkUGFyYW0gPSBjb250ZXh0LmdldEh0dHBSZXF1ZXN0KCkuZ2V0UGFyYW1ldGVyVmFsdWVzKCJkZXZpY2VfaWQiKQogICAgICAgIGlmIGRldmljZUlkUGFyYW0gIT0gTm9uZSBhbmQgKGRldmljZUlkUGFyYW0ubGVuZ2h0ID4gMCApOgogICAgICAgICAgICByZXN1bHQgPSBkZXZpY2VJZFBhcmFtWzBdID09ICJkZXZpY2VfaWRfMSIKICAgICAgICAgICAgaWYgbm90IHJlc3VsdDoKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgIyBTZXQgYXVudGVudGljYXRlZCB1c2VyIGluIGNvbnRleHQKICAgICAgICAgICAgIyBjb250ZXh0LnNldFVzZXIodXNlcikKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICAgICAgIyBEbyBnZW5lcmljIGF1dGhlbnRpY2F0aW9uIGluIG90aGVyIGNhc2VzCiAgICAgICAgYXV0aFNlcnZpY2UgPSBDZGlVdGlsLmJlYW4oQXV0aGVudGljYXRpb25TZXJ2aWNlKQoKICAgICAgICB1c2VybmFtZSA9IGNvbnRleHQuZ2V0SHR0cFJlcXVlc3QoKS5nZXRQYXJhbWV0ZXIoc2VsZi51c2VybmFtZVBhcmFtTmFtZSkKICAgICAgICBwYXNzd29yZCA9IGNvbnRleHQuZ2V0SHR0cFJlcXVlc3QoKS5nZXRQYXJhbWV0ZXIoc2VsZi5wYXNzd29yZFBhcmFtTmFtZSkKICAgICAgICByZXN1bHQgPSBhdXRoU2VydmljZS5hdXRoZW50aWNhdGUodXNlcm5hbWUsIHBhc3N3b3JkKQogICAgICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgICAgIHByaW50ICJST1BDIHNjcmlwdC4gQXV0aGVudGljYXRlLiBDb3VsZCBub3QgYXV0aGVudGljYXRlIHVzZXIgJyVzJyAiICUgdXNlcm5hbWUKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIGNvbnRleHQuc2V0VXNlcihhdXRoU2VydmljZS5nZXRBdXRoZW50aWNhdGVkVXNlcigpKQoKICAgICAgICByZXR1cm4gVHJ1ZQo=
oxScriptType: resource_owner_password_credentials
programmingLanguage: python

dn: inum=2DAF-BA91,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Resource Owner Password Credentials Custom Parameters Example
displayName: resource_owner_password_credentials_custom_params_example
oxEnabled: false
inum: 2DAF-BA91
oxLevel: 1
oxRevision: 1
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE5LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vY2hhbgojCiMKCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLm93bmVyIGltcG9ydCBSZXNvdXJjZU93bmVyUGFzc3dvcmRDcmVkZW50aWFsc1R5cGUKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZSBpbXBvcnQgQXV0aGVudGljYXRpb25TZXJ2aWNlLCBTZXNzaW9uSWRTZXJ2aWNlCmZyb20gb3JnLmdsdXUub3hhdXRoLm1vZGVsLmNvbW1vbiBpbXBvcnQgU2Vzc2lvbklkU3RhdGUKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VjdXJpdHkgaW1wb3J0IElkZW50aXR5CmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIG9yZy5nbHV1Lm94YXV0aC5tb2RlbC5hdXRob3JpemUgaW1wb3J0IEF1dGhvcml6ZVJlcXVlc3RQYXJhbQpmcm9tIG9yZy5nbHV1Lm94YXV0aC5tb2RlbC5jb25maWcgaW1wb3J0IENvbnN0YW50cwpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlcgpmcm9tIGphdmEubGFuZyBpbXBvcnQgU3RyaW5nCmZyb20gamF2YS51dGlsIGltcG9ydCBEYXRlLCBIYXNoTWFwCgpjbGFzcyBSZXNvdXJjZU93bmVyUGFzc3dvcmRDcmVkZW50aWFscyhSZXNvdXJjZU93bmVyUGFzc3dvcmRDcmVkZW50aWFsc1R5cGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToKICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMKCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiUk9QQyBzY3JpcHQuIEluaXRpYWxpemluZyAuLi4iCiAgICAgICAgcHJpbnQgIlJPUEMgc2NyaXB0LiBJbml0aWFsaXplZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIlJPUEMgc2NyaXB0LiBEZXN0cm95aW5nIC4uLiIKICAgICAgICBwcmludCAiUk9QQyBzY3JpcHQuIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICAjIFJldHVybnMgVHJ1ZSBhbmQgc2V0IHVzZXIgaW50byBjb250ZXh0IHdoZW4gdXNlciBhdXRoZW50aWNhdGVkIHN1Y2Nlc2Z1bGx5CiAgICAjIFJldHVybnMgRmFsc2Ugd2hlbiB1c2VyIG5vdCBhdXRoZW50aWNhdGVkIG9yIGl0J3MgbmVlZGVkIHRvIGNhbmNlbCBub3RtYWwgZmxvdwogICAgIyBOb3RlIDoKICAgICMgY29udGV4dCBpcyByZWZlcmVuY2Ugb2Ygb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuZXh0ZXJuYWwuY29udGV4dC5FeHRlcm5hbFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzQ29udGV4dCNFeHRlcm5hbFJlc291cmNlT3duZXJQYXNzd29yZENyZWRlbnRpYWxzQ29udGV4dCAoaW4gaHR0cHM6Ly9naXRodWIuY29tL0dsdXVGZWRlcmF0aW9uL294YXV0aCBwcm9qZWN0LCApCiAgICBkZWYgYXV0aGVudGljYXRlKHNlbGYsIGNvbnRleHQpOgogICAgICAgIHByaW50ICJST1BDIHNjcmlwdC4gQXV0aGVudGljYXRlIgoKICAgICAgICAjIERvIGdlbmVyaWMgYXV0aGVudGljYXRpb24KICAgICAgICBhdXRoZW50aWNhdGlvblNlcnZpY2UgPSBDZGlVdGlsLmJlYW4oQXV0aGVudGljYXRpb25TZXJ2aWNlKQoKICAgICAgICB1c2VybmFtZSA9IGNvbnRleHQuZ2V0SHR0cFJlcXVlc3QoKS5nZXRQYXJhbWV0ZXIoInVzZXJuYW1lIikKICAgICAgICBwYXNzd29yZCA9IGNvbnRleHQuZ2V0SHR0cFJlcXVlc3QoKS5nZXRQYXJhbWV0ZXIoInBhc3N3b3JkIikKICAgICAgICByZXN1bHQgPSBhdXRoZW50aWNhdGlvblNlcnZpY2UuYXV0aGVudGljYXRlKHVzZXJuYW1lLCBwYXNzd29yZCkKICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICBwcmludCAiUk9QQyBzY3JpcHQuIEF1dGhlbnRpY2F0ZS4gQ291bGQgbm90IGF1dGhlbnRpY2F0ZSB1c2VyICclcycgIiAlIHVzZXJuYW1lCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBjb250ZXh0LnNldFVzZXIoYXV0aGVudGljYXRpb25TZXJ2aWNlLmdldEF1dGhlbnRpY2F0ZWRVc2VyKCkpCiAgICAgICAgcHJpbnQgIlJPUEMgc2NyaXB0LiBBdXRoZW50aWNhdGUuIFVzZXIgJyVzJyBhdXRoZW50aWNhdGVkIHN1Y2Nlc3NmdWxseSIgJSB1c2VybmFtZQogICAgICAgIAoKICAgICAgICAjIEdldCBjdXNvbSBwYXJhbWV0ZXJzIGZyb20gcmVxdWVzdAogICAgICAgIGN1c3RvbVBhcmFtMVZhbHVlID0gY29udGV4dC5nZXRIdHRwUmVxdWVzdCgpLmdldFBhcmFtZXRlcigiY3VzdG9tMSIpCiAgICAgICAgY3VzdG9tUGFyYW0yVmFsdWUgPSBjb250ZXh0LmdldEh0dHBSZXF1ZXN0KCkuZ2V0UGFyYW1ldGVyKCJjdXN0b20yIikKCiAgICAgICAgY3VzdG9tUGFyYW1ldGVycyA9IHt9CiAgICAgICAgY3VzdG9tUGFyYW1ldGVyc1siY3VzdG9tMSJdID0gY3VzdG9tUGFyYW0xVmFsdWUKICAgICAgICBjdXN0b21QYXJhbWV0ZXJzWyJjdXN0b20yIl0gPSBjdXN0b21QYXJhbTJWYWx1ZQogICAgICAgIHByaW50ICJST1BDIHNjcmlwdC4gQXV0aGVudGljYXRlLiBVc2VyICclcycuIENyZWF0aW5nIGF1dGhlbnRpY2F0ZWQgc2Vzc2lvbiB3aXRoIGN1c3RvbSBhdHRyaWJ1dGVzOiAnJXMnIiAlICh1c2VybmFtZSwgY3VzdG9tUGFyYW1ldGVycykKCiAgICAgICAgc2Vzc2lvbiA9IHNlbGYuY3JlYXRlTmV3QXV0aGVudGljYXRlZFNlc3Npb24oY29udGV4dCwgY3VzdG9tUGFyYW1ldGVycykKICAgICAgICAKICAgICAgICAjIFRoaXMgaXMgbmVlZGVkIHRvIGFsbG93IHN0b3JlIGluIHRva2VuIGVudHJ5IHNlc3Npb25JZAogICAgICAgIGF1dGhlbnRpY2F0aW9uU2VydmljZS5jb25maWd1cmVFdmVudFVzZXIoc2Vzc2lvbikKCiAgICAgICAgcHJpbnQgIlJPUEMgc2NyaXB0LiBBdXRoZW50aWNhdGUuIFVzZXIgJyVzJy4gQ3JlYXRlZCBhdXRoZW50aWNhdGVkIHNlc3Npb246ICclcyciICUgKHVzZXJuYW1lLCBjdXN0b21QYXJhbWV0ZXJzKQoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBjcmVhdGVOZXdBdXRoZW50aWNhdGVkU2Vzc2lvbihzZWxmLCBjb250ZXh0LCBjdXN0b21QYXJhbWV0ZXJzPXt9KToKICAgICAgICBzZXNzaW9uSWRTZXJ2aWNlID0gQ2RpVXRpbC5iZWFuKFNlc3Npb25JZFNlcnZpY2UpCgogICAgICAgIHVzZXIgPSBjb250ZXh0LmdldFVzZXIoKQogICAgICAgIGNsaWVudCA9IENkaVV0aWwuYmVhbihJZGVudGl0eSkuZ2V0U2Vzc2lvbkNsaWVudCgpLmdldENsaWVudCgpCgogICAgICAgICMgQWRkIG1hbmRhdG9yeSBzZXNzaW9uIHBhcmFtZXRlcnMKICAgICAgICBzZXNzaW9uQXR0cmlidXRlcyA9IEhhc2hNYXAoKQogICAgICAgIHNlc3Npb25BdHRyaWJ1dGVzLnB1dChDb25zdGFudHMuQVVUSEVOVElDQVRFRF9VU0VSLCB1c2VyLmdldFVzZXJJZCgpKQogICAgICAgIHNlc3Npb25BdHRyaWJ1dGVzLnB1dChBdXRob3JpemVSZXF1ZXN0UGFyYW0uQ0xJRU5UX0lELCBjbGllbnQuZ2V0Q2xpZW50SWQoKSkKICAgICAgICBzZXNzaW9uQXR0cmlidXRlcy5wdXQoQXV0aG9yaXplUmVxdWVzdFBhcmFtLlBST01QVCwgIiIpCgogICAgICAgICMgQWRkIGN1c3RvbSBzZXNzaW9uIHBhcmFtZXRlcnMKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBjdXN0b21QYXJhbWV0ZXJzLml0ZXJpdGVtcygpOgogICAgICAgICAgICBpZiBTdHJpbmdIZWxwZXIuaXNOb3RFbXB0eSh2YWx1ZSk6CiAgICAgICAgICAgICAgICBzZXNzaW9uQXR0cmlidXRlcy5wdXQoa2V5LCB2YWx1ZSkKCiAgICAgICAgIyBHZW5lcmF0ZSBhdXRoZW50aWNhdGVkIHNlc3Npb24KICAgICAgICBzZXNzaW9uSWQgPSBzZXNzaW9uSWRTZXJ2aWNlLmdlbmVyYXRlQXV0aGVudGljYXRlZFNlc3Npb25JZChjb250ZXh0LmdldEh0dHBSZXF1ZXN0KCksIHVzZXIuZ2V0RG4oKSwgc2Vzc2lvbkF0dHJpYnV0ZXMpCgogICAgICAgIHByaW50ICJST1BDIHNjcmlwdC4gR2VuZXJhdGVkIHNlc3Npb24gaWQuIEROOiAnJXMnIiAlIHNlc3Npb25JZC5nZXREbigpCgogICAgICAgIHJldHVybiBzZXNzaW9uSWQK
oxScriptType: resource_owner_password_credentials
programmingLanguage: python

dn: inum=4BBE-C6A8,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Basic (with user locking) authentication module
displayName: basic_lock
oxEnabled: false
inum: 4BBE-C6A8
oxConfigurationProperty: {"value1":"invalid_login_count_attribute","value2":"oxCountInvalidLogin","description":""}
oxConfigurationProperty: {"value1":"maximum_invalid_login_attemps","value2":"3","description":""}
oxConfigurationProperty: {"value1":"lock_expiration_time","value2":"120","description":""}
oxLevel: 20
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=5018-AF9C,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: UAF authentication module
displayName: uaf
oxEnabled: false
inum: 5018-AF9C
oxConfigurationProperty: {"value1":"uaf_server_uri","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal","description":""}
oxConfigurationProperty: {"value1":"uaf_policy_name","value2":"default","description":""}
oxConfigurationProperty: {"value1":"qr_options","value2":"{ width: 400, height: 400 }","description":""}
oxConfigurationProperty: {"value1":"registration_uri","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal/identity/register","description":""}
oxConfigurationProperty: {"value1":"send_push_notifaction","value2":"false","description":""}
oxLevel: 70
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKIyBSZXF1aXJlcyB0aGUgZm9sbG93aW5nIGN1c3RvbSBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXM6CiMgICB1YWZfc2VydmVyX3VyaTogPGlkcF9ob3N0bmFtZT4KIwojIFRoZXNlIGFyZSBub24gbWFuZGF0b3J5IGN1c3RvbSBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXM6CiMgICB1YWZfcG9saWN5X25hbWU6IGRlZmF1bHQKIyAgIHNlbmRfcHVzaF9ub3RpZmFjdGlvbjogZmFsc2UKIyAgIHJlZ2lzdHJhdGlvbl91cmk6IGh0dHBzOi8vPGlkcF9ob3N0bmFtZT4vaWRlbnRpdHkvcmVnaXN0ZXIKIyAgIHFyX29wdGlvbnM6IHsgd2lkdGg6IDQwMCwgaGVpZ2h0OiA0MDAgfQoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuYXV0aCBpbXBvcnQgUGVyc29uQXV0aGVudGljYXRpb25UeXBlCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIG9yZy5nbHV1Lm94YXV0aC5zZWN1cml0eSBpbXBvcnQgSWRlbnRpdHkKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZSBpbXBvcnQgQXV0aGVudGljYXRpb25TZXJ2aWNlLCBTZXNzaW9uSWRTZXJ2aWNlCmZyb20gb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuY29tbW9uIGltcG9ydCBVc2VyU2VydmljZQpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXIKZnJvbSBvcmcuZ2x1dS5veGF1dGgudXRpbCBpbXBvcnQgU2VydmVyVXRpbApmcm9tIG9yZy5nbHV1Lm94YXV0aC5tb2RlbC5jb25maWcgaW1wb3J0IENvbnN0YW50cwpmcm9tIGphdmF4LndzLnJzLmNvcmUgaW1wb3J0IFJlc3BvbnNlCmZyb20gamF2YS51dGlsIGltcG9ydCBBcnJheXMKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZS5uZXQgaW1wb3J0IEh0dHBTZXJ2aWNlCmZyb20gb3JnLmFwYWNoZS5odHRwLnBhcmFtcyBpbXBvcnQgQ29yZUNvbm5lY3Rpb25QTmFtZXMKCmltcG9ydCBzeXMKaW1wb3J0IGphdmEKaW1wb3J0IGpzb24KCmNsYXNzIFBlcnNvbkF1dGhlbnRpY2F0aW9uKFBlcnNvbkF1dGhlbnRpY2F0aW9uVHlwZSk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJVQUYuIEluaXRpYWxpemF0aW9uIgoKICAgICAgICBpZiBub3QgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuY29udGFpbnNLZXkoInVhZl9zZXJ2ZXJfdXJpIik6CiAgICAgICAgICAgIHByaW50ICJVQUYuIEluaXRpYWxpemF0aW9uLiBQcm9wZXJ0eSB1YWZfc2VydmVyX3VyaSBpcyBtYW5kYXRvcnkiCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBzZWxmLnVhZl9zZXJ2ZXJfdXJpID0gY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuZ2V0KCJ1YWZfc2VydmVyX3VyaSIpLmdldFZhbHVlMigpCgogICAgICAgIHNlbGYudWFmX3BvbGljeV9uYW1lID0gImRlZmF1bHQiCiAgICAgICAgaWYgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuY29udGFpbnNLZXkoInVhZl9wb2xpY3lfbmFtZSIpOgogICAgICAgICAgICBzZWxmLnVhZl9wb2xpY3lfbmFtZSA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgidWFmX3BvbGljeV9uYW1lIikuZ2V0VmFsdWUyKCkKCiAgICAgICAgc2VsZi5zZW5kX3B1c2hfbm90aWZhY3Rpb24gPSBGYWxzZQogICAgICAgIGlmIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmNvbnRhaW5zS2V5KCJzZW5kX3B1c2hfbm90aWZhY3Rpb24iKToKICAgICAgICAgICAgc2VsZi5zZW5kX3B1c2hfbm90aWZhY3Rpb24gPSBTdHJpbmdIZWxwZXIudG9Cb29sZWFuKGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgic2VuZF9wdXNoX25vdGlmYWN0aW9uIikuZ2V0VmFsdWUyKCksIEZhbHNlKQoKICAgICAgICBzZWxmLnJlZ2lzdHJhdGlvbl91cmkgPSBOb25lCiAgICAgICAgaWYgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuY29udGFpbnNLZXkoInJlZ2lzdHJhdGlvbl91cmkiKToKICAgICAgICAgICAgc2VsZi5yZWdpc3RyYXRpb25fdXJpID0gY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuZ2V0KCJyZWdpc3RyYXRpb25fdXJpIikuZ2V0VmFsdWUyKCkKCiAgICAgICAgc2VsZi5jdXN0b21Rck9wdGlvbnMgPSB7fQogICAgICAgIGlmIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmNvbnRhaW5zS2V5KCJxcl9vcHRpb25zIik6CiAgICAgICAgICAgIHNlbGYuY3VzdG9tUXJPcHRpb25zID0gY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuZ2V0KCJxcl9vcHRpb25zIikuZ2V0VmFsdWUyKCkKCiAgICAgICAgcHJpbnQgIlVBRi4gSW5pdGlhbGl6aW5nIEhUVFAgY2xpZW50IgogICAgICAgIGh0dHBTZXJ2aWNlID0gQ2RpVXRpbC5iZWFuKEh0dHBTZXJ2aWNlKQogICAgICAgIHNlbGYuaHR0cF9jbGllbnQgPSBodHRwU2VydmljZS5nZXRIdHRwc0NsaWVudCgpCiAgICAgICAgaHR0cF9jbGllbnRfcGFyYW1zID0gc2VsZi5odHRwX2NsaWVudC5nZXRQYXJhbXMoKQogICAgICAgIGh0dHBfY2xpZW50X3BhcmFtcy5zZXRJbnRQYXJhbWV0ZXIoQ29yZUNvbm5lY3Rpb25QTmFtZXMuQ09OTkVDVElPTl9USU1FT1VULCAxNSAqIDEwMDApCgogICAgICAgIHByaW50ICJVQUYuIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseS4gdWFmX3NlcnZlcl91cmk6ICclcycsIHVhZl9wb2xpY3lfbmFtZTogJyVzJywgc2VuZF9wdXNoX25vdGlmYWN0aW9uOiAnJXMnLCByZWdpc3RyYXRpb25fdXJpOiAnJXMnLCBxcl9vcHRpb25zOiAnJXMnIiAlIChzZWxmLnVhZl9zZXJ2ZXJfdXJpLCBzZWxmLnVhZl9wb2xpY3lfbmFtZSwgc2VsZi5zZW5kX3B1c2hfbm90aWZhY3Rpb24sIHNlbGYucmVnaXN0cmF0aW9uX3VyaSwgc2VsZi5jdXN0b21Rck9wdGlvbnMpCiAgICAgICAgCiAgICAgICAgcHJpbnQgIlVBRi4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIGRlc3Ryb3koc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJVQUYuIERlc3Ryb3kiCiAgICAgICAgcHJpbnQgIlVBRi4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQogICAgICAgIAogICAgZGVmIGdldEF1dGhlbnRpY2F0aW9uTWV0aG9kQ2xhaW1zKHNlbGYsIHJlcXVlc3RQYXJhbWV0ZXJzKToKICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIAogICAgZGVmIGlzVmFsaWRBdXRoZW50aWNhdGlvbk1ldGhvZChzZWxmLCB1c2FnZVR5cGUsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBbHRlcm5hdGl2ZUF1dGhlbnRpY2F0aW9uTWV0aG9kKHNlbGYsIHVzYWdlVHlwZSwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGF1dGhlbnRpY2F0ZShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMsIHN0ZXApOgogICAgICAgIGlkZW50aXR5ID0gQ2RpVXRpbC5iZWFuKElkZW50aXR5KQogICAgICAgIGNyZWRlbnRpYWxzID0gaWRlbnRpdHkuZ2V0Q3JlZGVudGlhbHMoKQoKICAgICAgICBzZXNzaW9uX2F0dHJpYnV0ZXMgPSBpZGVudGl0eS5nZXRTZXNzaW9uSWQoKS5nZXRTZXNzaW9uQXR0cmlidXRlcygpCgogICAgICAgIHNlbGYuc2V0UmVxdWVzdFNjb3BlZFBhcmFtZXRlcnMoaWRlbnRpdHkpCgogICAgICAgIGlmIChzdGVwID09IDEpOgogICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMSIKCiAgICAgICAgICAgIHVzZXJfbmFtZSA9IGNyZWRlbnRpYWxzLmdldFVzZXJuYW1lKCkKCiAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWRfdXNlciA9IHNlbGYucHJvY2Vzc0Jhc2ljQXV0aGVudGljYXRpb24oY3JlZGVudGlhbHMpCiAgICAgICAgICAgIGlmIGF1dGhlbnRpY2F0ZWRfdXNlciA9PSBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICB1YWZfYXV0aF9tZXRob2QgPSAiYXV0aGVudGljYXRlIgogICAgICAgICAgICAjIFVuY29tbWVudCB0aGlzIGJsb2NrIGlmIHlvdSBuZWVkIHRvIGFsbG93IHVzZXIgc2Vjb25kIGRldmljZSByZWdpc3RyYXRpb24KICAgICAgICAgICAgI2Vucm9sbG1lbnRfbW9kZSA9IFNlcnZlclV0aWwuZ2V0Rmlyc3RWYWx1ZShyZXF1ZXN0UGFyYW1ldGVycywgImxvZ2luRm9ybTpyZWdpc3RlckJ1dHRvbiIpCiAgICAgICAgICAgICNpZiBTdHJpbmdIZWxwZXIuaXNOb3RFbXB0eShlbnJvbGxtZW50X21vZGUpOgogICAgICAgICAgICAjICAgIHVhZl9hdXRoX21ldGhvZCA9ICJlbnJvbGwiCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiB1YWZfYXV0aF9tZXRob2QgPT0gImF1dGhlbnRpY2F0ZSI6CiAgICAgICAgICAgICAgICB1c2VyX2Vucm9sbG1lbnRzID0gc2VsZi5maW5kRW5yb2xsbWVudHMoY3JlZGVudGlhbHMpCiAgICAgICAgICAgICAgICBpZiBsZW4odXNlcl9lbnJvbGxtZW50cykgPT0gMDoKICAgICAgICAgICAgICAgICAgICB1YWZfYXV0aF9tZXRob2QgPSAiZW5yb2xsIgogICAgICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAxLiBUaGVyZSBpcyBubyBVQUYgZW5yb2xsbWVudCBmb3IgdXNlciAnJXMnLiBDaGFuZ2luZyB1YWZfYXV0aF9tZXRob2QgdG8gJyVzJyIgJSAodXNlcl9uYW1lLCB1YWZfYXV0aF9tZXRob2QpCgogICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMS4gdWFmX2F1dGhfbWV0aG9kOiAnJXMnIiAlIHVhZl9hdXRoX21ldGhvZAogICAgICAgICAgICAKICAgICAgICAgICAgaWRlbnRpdHkuc2V0V29ya2luZ1BhcmFtZXRlcigidWFmX2F1dGhfbWV0aG9kIiwgdWFmX2F1dGhfbWV0aG9kKQoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbGlmIChzdGVwID09IDIpOgogICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMiIKCiAgICAgICAgICAgIHNlc3Npb24gPSBDZGlVdGlsLmJlYW4oU2Vzc2lvbklkU2VydmljZSkuZ2V0U2Vzc2lvbklkKCkKICAgICAgICAgICAgaWYgc2Vzc2lvbiA9PSBOb25lOgogICAgICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyLiBGYWlsZWQgdG8gZGV0ZXJtaW5lIHNlc3Npb25faWQiCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIHVzZXIgPSBhdXRoZW50aWNhdGlvblNlcnZpY2UuZ2V0QXV0aGVudGljYXRlZFVzZXIoKQogICAgICAgICAgICBpZiAodXNlciA9PSBOb25lKToKICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAyLiBGYWlsZWQgdG8gZGV0ZXJtaW5lIHVzZXIgbmFtZSIKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICB1c2VyX25hbWUgPSB1c2VyLmdldFVzZXJJZCgpCgogICAgICAgICAgICB1YWZfYXV0aF9yZXN1bHQgPSBTZXJ2ZXJVdGlsLmdldEZpcnN0VmFsdWUocmVxdWVzdFBhcmFtZXRlcnMsICJhdXRoX3Jlc3VsdCIpCiAgICAgICAgICAgIGlmIHVhZl9hdXRoX3Jlc3VsdCAhPSAic3VjY2VzcyI6CiAgICAgICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMi4gYXV0aF9yZXN1bHQgaXMgJyVzJyIgJSB1YWZfYXV0aF9yZXN1bHQKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgIyBSZXN0b3JlIHN0YXRlIGZyb20gc2Vzc2lvbgogICAgICAgICAgICB1YWZfYXV0aF9tZXRob2QgPSBzZXNzaW9uX2F0dHJpYnV0ZXMuZ2V0KCJ1YWZfYXV0aF9tZXRob2QiKQoKICAgICAgICAgICAgaWYgbm90IHVhZl9hdXRoX21ldGhvZCBpbiBbJ2Vucm9sbCcsICdhdXRoZW50aWNhdGUnXToKICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAyLiBGYWlsZWQgdG8gYXV0aGVudGljYXRlIHVzZXIuIHVhZl9hdXRoX21ldGhvZDogJyVzJyIgJSB1YWZfYXV0aF9tZXRob2QKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgIyBSZXF1ZXN0IFNUQVRVU19PQkIKICAgICAgICAgICAgaWYgVHJ1ZToKICAgICAgICAgICAgICAgICNUT0RPOiBSZW1vdmUgdGhpcyBjb25kaXRpb24KICAgICAgICAgICAgICAgICMgSXQncyB3b3JrYXJvdW5kIGJlY3Vhc2UgaXQncyBub3QgcG9zc2libGUgdG8gY2FsbCBTVEFUVVNfT0JCIDIgdGltZXMuIEZpcnN0IHRpbWUgb24gYnJvd3NlciBhbmQgc2Vjb25kIGltZSBvbiBzZXJ2ZXIKICAgICAgICAgICAgICAgIHVhZl91c2VyX2RldmljZV9oYW5kbGUgPSBTZXJ2ZXJVdGlsLmdldEZpcnN0VmFsdWUocmVxdWVzdFBhcmFtZXRlcnMsICJhdXRoX2hhbmRsZSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB1YWZfb2JiX2F1dGhfbWV0aG9kID0gc2Vzc2lvbl9hdHRyaWJ1dGVzLmdldCgidWFmX29iYl9hdXRoX21ldGhvZCIpCiAgICAgICAgICAgICAgICB1YWZfb2JiX3NlcnZlcl91cmkgPSBzZXNzaW9uX2F0dHJpYnV0ZXMuZ2V0KCJ1YWZfb2JiX3NlcnZlcl91cmkiKQogICAgICAgICAgICAgICAgdWFmX29iYl9zdGFydF9yZXNwb25zZSA9IHNlc3Npb25fYXR0cmlidXRlcy5nZXQoInVhZl9vYmJfc3RhcnRfcmVzcG9uc2UiKQoKICAgICAgICAgICAgICAgICMgUHJlcGFyZSBTVEFUVVNfT0JCCiAgICAgICAgICAgICAgICB1YWZfb2JiX3N0YXJ0X3Jlc3BvbnNlX2pzb24gPSBqc29uLmxvYWRzKHVhZl9vYmJfc3RhcnRfcmVzcG9uc2UpCiAgICAgICAgICAgICAgICB1YWZfb2JiX3N0YXR1c19yZXF1ZXN0X2RpY3Rpb25hcnkgPSB7ICJvcGVyYXRpb24iOiAiU1RBVFVTXyVzIiAlIHVhZl9vYmJfYXV0aF9tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VyTmFtZSI6IHVzZXJfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5lZWREZXRhaWxzIjogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm9vYlN0YXR1c0hhbmRsZSI6IHVhZl9vYmJfc3RhcnRfcmVzcG9uc2VfanNvblsib29iU3RhdHVzSGFuZGxlIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgICAgIHVhZl9vYmJfc3RhdHVzX3JlcXVlc3QgPSBqc29uLmR1bXBzKHVhZl9vYmJfc3RhdHVzX3JlcXVlc3RfZGljdGlvbmFyeSwgc2VwYXJhdG9ycz0oJywnLCc6JykpCiAgICAgICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMi4gUHJlcGFyZWQgU1RBVFVTIHJlcXVlc3Q6ICclcycgdG8gc2VuZCB0byAnJXMnIiAlICh1YWZfb2JiX3N0YXR1c19yZXF1ZXN0LCB1YWZfb2JiX3NlcnZlcl91cmkpCgogICAgICAgICAgICAgICAgdWFmX3N0YXR1c19vYmJfcmVzcG9uc2UgPSBzZWxmLmV4ZWN1dGVQb3N0KHVhZl9vYmJfc2VydmVyX3VyaSwgdWFmX29iYl9zdGF0dXNfcmVxdWVzdCkKICAgICAgICAgICAgICAgIGlmIHVhZl9zdGF0dXNfb2JiX3Jlc3BvbnNlID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICAgICAgcHJpbnQgIlVBRi4gQXV0aGVudGljYXRlIGZvciBzdGVwIDIuIEdldCBTVEFUVVMgcmVzcG9uc2U6ICclcyciICUgdWFmX3N0YXR1c19vYmJfcmVzcG9uc2UKICAgICAgICAgICAgICAgIHVhZl9zdGF0dXNfb2JiX3Jlc3BvbnNlX2pzb24gPSBqc29uLmxvYWRzKHVhZl9zdGF0dXNfb2JiX3Jlc3BvbnNlKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1YWZfc3RhdHVzX29iYl9yZXNwb25zZV9qc29uWyJzdGF0dXNDb2RlIl0gIT0gNDAwMDoKICAgICAgICAgICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMi4gVUFGIG9wZXJhdGlvbiBzdGF0dXMgaXMgaW52YWxpZC4gc3RhdHVzQ29kZTogJyVzJyIgJSB1YWZfc3RhdHVzX29iYl9yZXNwb25zZV9qc29uWyJzdGF0dXNDb2RlIl0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgICAgICB1YWZfdXNlcl9kZXZpY2VfaGFuZGxlID0gdWFmX3N0YXR1c19vYmJfcmVzcG9uc2VfanNvblsiYWRkaXRpb25hbEluZm8iXVsiYXV0aGVudGljYXRvcnNSZXN1bHQiXVsiaGFuZGxlIl0KCiAgICAgICAgICAgIGlmIFN0cmluZ0hlbHBlci5pc0VtcHR5KHVhZl91c2VyX2RldmljZV9oYW5kbGUpOgogICAgICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyLiBGYWlsZWQgdG8gZ2V0IFVBRiBoYW5kbGUiCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIHVhZl91c2VyX2V4dGVybmFsX3VpZCA9ICJ1YWY6JXMiICUgdWFmX3VzZXJfZGV2aWNlX2hhbmRsZQogICAgICAgICAgICBwcmludCAiVUFGLiBBdXRoZW50aWNhdGUgZm9yIHN0ZXAgMi4gVUFGIGhhbmRsZTogJyVzJyIgJSB1YWZfdXNlcl9leHRlcm5hbF91aWQKCiAgICAgICAgICAgIGlmIHVhZl9hdXRoX21ldGhvZCA9PSAiYXV0aGVudGljYXRlIjoKICAgICAgICAgICAgICAgICMgVmFsaWRhdGUgaWYgdXNlciB1c2VkIGRldmljZSB3aXRoIHNhbWUga2VZSGFuZGxlCiAgICAgICAgICAgICAgICB1c2VyX2Vucm9sbG1lbnRzID0gc2VsZi5maW5kRW5yb2xsbWVudHMoY3JlZGVudGlhbHMpCiAgICAgICAgICAgICAgICBpZiBsZW4odXNlcl9lbnJvbGxtZW50cykgPT0gMDoKICAgICAgICAgICAgICAgICAgICB1YWZfYXV0aF9tZXRob2QgPSAiZW5yb2xsIgogICAgICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAyLiBUaGVyZSBpcyBubyBVQUYgZW5yb2xsbWVudCBmb3IgdXNlciAnJXMnLiIgJSB1c2VyX25hbWUKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIHVzZXJfZW5yb2xsbWVudCBpbiB1c2VyX2Vucm9sbG1lbnRzOgogICAgICAgICAgICAgICAgICAgIGlmIFN0cmluZ0hlbHBlci5lcXVhbHNJZ25vcmVDYXNlKHVzZXJfZW5yb2xsbWVudCwgdWFmX3VzZXJfZGV2aWNlX2hhbmRsZSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAyLiBUaGVyZSBpcyBVQUYgZW5yb2xsbWVudCBmb3IgdXNlciAnJXMnLiBVc2VyIGF1dGhlbnRpY2F0ZWQgc3VjY2Vzc2Z1bGx5IiAlIHVzZXJfbmFtZQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgdXNlclNlcnZpY2UgPSBDZGlVdGlsLmJlYW4oVXNlclNlcnZpY2UpCgogICAgICAgICAgICAgICAgIyBEb3VibGUgY2hlY2sganVzdCB0byBtYWtlIHN1cmUuIFdlIGRpZCBjaGVja2luZyBpbiBwcmV2aW91cyBzdGVwCiAgICAgICAgICAgICAgICAjIENoZWNrIGlmIHRoZXJlIGlzIHVzZXIgd2hpY2ggaGFzIHVhZl91c2VyX2V4dGVybmFsX3VpZAogICAgICAgICAgICAgICAgIyBBdm9pZCBtYXBwaW5nIHVzZXIgY2VydCB0byBtb3JlIHRoYW4gb25lIElEUCBhY2NvdW50CiAgICAgICAgICAgICAgICBmaW5kX3VzZXJfYnlfZXh0ZXJuYWxfdWlkID0gdXNlclNlcnZpY2UuZ2V0VXNlckJ5QXR0cmlidXRlKCJveEV4dGVybmFsVWlkIiwgdWFmX3VzZXJfZXh0ZXJuYWxfdWlkKQogICAgICAgICAgICAgICAgaWYgZmluZF91c2VyX2J5X2V4dGVybmFsX3VpZCA9PSBOb25lOgogICAgICAgICAgICAgICAgICAgICMgQWRkIHVhZl91c2VyX2V4dGVybmFsX3VpZCB0byB1c2VyJ3MgZXh0ZXJuYWwgR1VJRCBsaXN0CiAgICAgICAgICAgICAgICAgICAgZmluZF91c2VyX2J5X2V4dGVybmFsX3VpZCA9IHVzZXJTZXJ2aWNlLmFkZFVzZXJBdHRyaWJ1dGUodXNlcl9uYW1lLCAib3hFeHRlcm5hbFVpZCIsIHVhZl91c2VyX2V4dGVybmFsX3VpZCkKICAgICAgICAgICAgICAgICAgICBpZiBmaW5kX3VzZXJfYnlfZXh0ZXJuYWxfdWlkID09IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAyLiBGYWlsZWQgdG8gdXBkYXRlIGN1cnJlbnQgdXNlciIKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIHByZXBhcmVGb3JTdGVwKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycywgc3RlcCk6CiAgICAgICAgYXV0aGVudGljYXRpb25TZXJ2aWNlID0gQ2RpVXRpbC5iZWFuKEF1dGhlbnRpY2F0aW9uU2VydmljZSkKCiAgICAgICAgaWRlbnRpdHkgPSBDZGlVdGlsLmJlYW4oSWRlbnRpdHkpCiAgICAgICAgY3JlZGVudGlhbHMgPSBpZGVudGl0eS5nZXRDcmVkZW50aWFscygpCgogICAgICAgIHNlc3Npb25fYXR0cmlidXRlcyA9IGlkZW50aXR5LmdldFNlc3Npb25JZCgpLmdldFNlc3Npb25BdHRyaWJ1dGVzKCkKCiAgICAgICAgc2VsZi5zZXRSZXF1ZXN0U2NvcGVkUGFyYW1ldGVycyhpZGVudGl0eSkKCiAgICAgICAgaWYgKHN0ZXAgPT0gMSk6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxpZiAoc3RlcCA9PSAyKToKICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyIgoKICAgICAgICAgICAgc2Vzc2lvbiA9IENkaVV0aWwuYmVhbihTZXNzaW9uSWRTZXJ2aWNlKS5nZXRTZXNzaW9uSWQoKQogICAgICAgICAgICBpZiBzZXNzaW9uID09IE5vbmU6CiAgICAgICAgICAgICAgICBwcmludCAiVUFGLiBQcmVwYXJlIGZvciBzdGVwIDIuIEZhaWxlZCB0byBkZXRlcm1pbmUgc2Vzc2lvbl9pZCIKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgdXNlciA9IGF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRBdXRoZW50aWNhdGVkVXNlcigpCiAgICAgICAgICAgIGlmICh1c2VyID09IE5vbmUpOgogICAgICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyLiBGYWlsZWQgdG8gZGV0ZXJtaW5lIHVzZXIgbmFtZSIKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgdWFmX2F1dGhfbWV0aG9kID0gc2Vzc2lvbl9hdHRyaWJ1dGVzLmdldCgidWFmX2F1dGhfbWV0aG9kIikKICAgICAgICAgICAgaWYgU3RyaW5nSGVscGVyLmlzRW1wdHkodWFmX2F1dGhfbWV0aG9kKToKICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIFByZXBhcmUgZm9yIHN0ZXAgMi4gRmFpbGVkIHRvIGRldGVybWluZSBhdXRoX21ldGhvZCIKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyLiB1YWZfYXV0aF9tZXRob2Q6ICclcyciICUgdWFmX2F1dGhfbWV0aG9kCgogICAgICAgICAgICB1YWZfb2JiX2F1dGhfbWV0aG9kID0gIk9PQl9SRUciCiAgICAgICAgICAgIHVhZl9vYmJfc2VydmVyX3VyaSA9IHNlbGYudWFmX3NlcnZlcl91cmkgKyAiL25ubC92Mi9yZWciIAogICAgICAgICAgICBpZiBTdHJpbmdIZWxwZXIuZXF1YWxzSWdub3JlQ2FzZSh1YWZfYXV0aF9tZXRob2QsICJhdXRoZW50aWNhdGUiKToKICAgICAgICAgICAgICAgIHVhZl9vYmJfYXV0aF9tZXRob2QgPSAiT09CX0FVVEgiCiAgICAgICAgICAgICAgICB1YWZfb2JiX3NlcnZlcl91cmkgPSBzZWxmLnVhZl9zZXJ2ZXJfdXJpICsgIi9ubmwvdjIvYXV0aCIgCgogICAgICAgICAgICAjIFByZXBhcmUgU1RBUlRfT0JCCiAgICAgICAgICAgIHVhZl9vYmJfc3RhcnRfcmVxdWVzdF9kaWN0aW9uYXJ5ID0geyAib3BlcmF0aW9uIjogIlNUQVJUXyVzIiAlIHVhZl9vYmJfYXV0aF9tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXNlck5hbWUiOiB1c2VyLmdldFVzZXJJZCgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInBvbGljeU5hbWUiOiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAib29iTW9kZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ICJxciI6ICJ0cnVlIiwgInJhd0RhdGEiOiAiZmFsc2UiLCAicHVzaCI6ICJmYWxzZSIgfSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB1YWZfb2JiX3N0YXJ0X3JlcXVlc3QgPSBqc29uLmR1bXBzKHVhZl9vYmJfc3RhcnRfcmVxdWVzdF9kaWN0aW9uYXJ5LCBzZXBhcmF0b3JzPSgnLCcsJzonKSkKICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyLiBQcmVwYXJlZCBTVEFSVCByZXF1ZXN0OiAnJXMnIHRvIHNlbmQgdG8gJyVzJyIgJSAodWFmX29iYl9zdGFydF9yZXF1ZXN0LCB1YWZfb2JiX3NlcnZlcl91cmkpCgogICAgICAgICAgICAjIFJlcXVlc3QgU1RBUlRfT0JCCiAgICAgICAgICAgIHVhZl9vYmJfc3RhcnRfcmVzcG9uc2UgPSBzZWxmLmV4ZWN1dGVQb3N0KHVhZl9vYmJfc2VydmVyX3VyaSwgdWFmX29iYl9zdGFydF9yZXF1ZXN0KQogICAgICAgICAgICBpZiB1YWZfb2JiX3N0YXJ0X3Jlc3BvbnNlID09IE5vbmU6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIHByaW50ICJVQUYuIFByZXBhcmUgZm9yIHN0ZXAgMi4gR2V0IFNUQVJUIHJlc3BvbnNlOiAnJXMnIiAlIHVhZl9vYmJfc3RhcnRfcmVzcG9uc2UKICAgICAgICAgICAgdWFmX29iYl9zdGFydF9yZXNwb25zZV9qc29uID0ganNvbi5sb2Fkcyh1YWZfb2JiX3N0YXJ0X3Jlc3BvbnNlKQoKICAgICAgICAgICAgIyBQcmVwYXJlIFNUQVRVU19PQkIKICAgICAgICAgICAgI1RPRE86IFJlbW92ZSBuZWVkRGV0YWlscyBwYXJhbWV0ZXIKICAgICAgICAgICAgdWFmX29iYl9zdGF0dXNfcmVxdWVzdF9kaWN0aW9uYXJ5ID0geyAib3BlcmF0aW9uIjogIlNUQVRVU18lcyIgJSB1YWZfb2JiX2F1dGhfbWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VyTmFtZSI6IHVzZXIuZ2V0VXNlcklkKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5lZWREZXRhaWxzIjogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAib29iU3RhdHVzSGFuZGxlIjogdWFmX29iYl9zdGFydF9yZXNwb25zZV9qc29uWyJvb2JTdGF0dXNIYW5kbGUiXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgdWFmX29iYl9zdGF0dXNfcmVxdWVzdCA9IGpzb24uZHVtcHModWFmX29iYl9zdGF0dXNfcmVxdWVzdF9kaWN0aW9uYXJ5LCBzZXBhcmF0b3JzPSgnLCcsJzonKSkKICAgICAgICAgICAgcHJpbnQgIlVBRi4gUHJlcGFyZSBmb3Igc3RlcCAyLiBQcmVwYXJlZCBTVEFUVVMgcmVxdWVzdDogJyVzJyB0byBzZW5kIHRvICclcyciICUgKHVhZl9vYmJfc3RhdHVzX3JlcXVlc3QsIHVhZl9vYmJfc2VydmVyX3VyaSkKCiAgICAgICAgICAgIGlkZW50aXR5LnNldFdvcmtpbmdQYXJhbWV0ZXIoInVhZl9vYmJfYXV0aF9tZXRob2QiLCB1YWZfb2JiX2F1dGhfbWV0aG9kKQogICAgICAgICAgICBpZGVudGl0eS5zZXRXb3JraW5nUGFyYW1ldGVyKCJ1YWZfb2JiX3NlcnZlcl91cmkiLCB1YWZfb2JiX3NlcnZlcl91cmkpCiAgICAgICAgICAgIGlkZW50aXR5LnNldFdvcmtpbmdQYXJhbWV0ZXIoInVhZl9vYmJfc3RhcnRfcmVzcG9uc2UiLCB1YWZfb2JiX3N0YXJ0X3Jlc3BvbnNlKQogICAgICAgICAgICBpZGVudGl0eS5zZXRXb3JraW5nUGFyYW1ldGVyKCJxcl9pbWFnZSIsIHVhZl9vYmJfc3RhcnRfcmVzcG9uc2VfanNvblsibW9kZVJlc3VsdCJdWyJxckNvZGUiXVsicXJJbWFnZSJdKQogICAgICAgICAgICBpZGVudGl0eS5zZXRXb3JraW5nUGFyYW1ldGVyKCJ1YWZfb2JiX3N0YXR1c19yZXF1ZXN0IiwgdWFmX29iYl9zdGF0dXNfcmVxdWVzdCkKCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldEV4dHJhUGFyYW1ldGVyc0ZvclN0ZXAoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMsIHN0ZXApOgogICAgICAgIHJldHVybiBBcnJheXMuYXNMaXN0KCJ1YWZfYXV0aF9tZXRob2QiLCAidWFmX29iYl9hdXRoX21ldGhvZCIsICJ1YWZfb2JiX3NlcnZlcl91cmkiLCAidWFmX29iYl9zdGFydF9yZXNwb25zZSIpCgogICAgZGVmIGdldENvdW50QXV0aGVudGljYXRpb25TdGVwcyhzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcmV0dXJuIDIKCiAgICBkZWYgZ2V0UGFnZUZvclN0ZXAoc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMsIHN0ZXApOgogICAgICAgIGlmIChzdGVwID09IDIpOgogICAgICAgICAgICByZXR1cm4gIi9hdXRoL3VhZi9sb2dpbi54aHRtbCIKCiAgICAgICAgcmV0dXJuICIiCgogICAgZGVmIGdldE5leHRTdGVwKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycywgc3RlcCk6CiAgICAgICAgcmV0dXJuIC0xCgogICAgZGVmIGdldExvZ291dEV4dGVybmFsVXJsKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycyk6CiAgICAgICAgcHJpbnQgIkdldCBleHRlcm5hbCBsb2dvdXQgVVJMIGNhbGwiCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgbG9nb3V0KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycyk6CiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgc2V0UmVxdWVzdFNjb3BlZFBhcmFtZXRlcnMoc2VsZiwgaWRlbnRpdHkpOgogICAgICAgIGlmIHNlbGYucmVnaXN0cmF0aW9uX3VyaSAhPSBOb25lOgogICAgICAgICAgICBpZGVudGl0eS5zZXRXb3JraW5nUGFyYW1ldGVyKCJleHRlcm5hbF9yZWdpc3RyYXRpb25fdXJpIiwgc2VsZi5yZWdpc3RyYXRpb25fdXJpKQogICAgICAgIGlkZW50aXR5LnNldFdvcmtpbmdQYXJhbWV0ZXIoInFyX29wdGlvbnMiLCBzZWxmLmN1c3RvbVFyT3B0aW9ucykKCiAgICBkZWYgcHJvY2Vzc0Jhc2ljQXV0aGVudGljYXRpb24oc2VsZiwgY3JlZGVudGlhbHMpOgogICAgICAgIHVzZXJTZXJ2aWNlID0gQ2RpVXRpbC5iZWFuKFVzZXJTZXJ2aWNlKQogICAgICAgIGF1dGhlbnRpY2F0aW9uU2VydmljZSA9IENkaVV0aWwuYmVhbihBdXRoZW50aWNhdGlvblNlcnZpY2UpCgogICAgICAgIHVzZXJfbmFtZSA9IGNyZWRlbnRpYWxzLmdldFVzZXJuYW1lKCkKICAgICAgICB1c2VyX3Bhc3N3b3JkID0gY3JlZGVudGlhbHMuZ2V0UGFzc3dvcmQoKQoKICAgICAgICBsb2dnZWRfaW4gPSBGYWxzZQogICAgICAgIGlmIFN0cmluZ0hlbHBlci5pc05vdEVtcHR5U3RyaW5nKHVzZXJfbmFtZSkgYW5kIFN0cmluZ0hlbHBlci5pc05vdEVtcHR5U3RyaW5nKHVzZXJfcGFzc3dvcmQpOgogICAgICAgICAgICBsb2dnZWRfaW4gPSBhdXRoZW50aWNhdGlvblNlcnZpY2UuYXV0aGVudGljYXRlKHVzZXJfbmFtZSwgdXNlcl9wYXNzd29yZCkKCiAgICAgICAgaWYgbm90IGxvZ2dlZF9pbjoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgZmluZF91c2VyX2J5X3VpZCA9IGF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRBdXRoZW50aWNhdGVkVXNlcigpCiAgICAgICAgaWYgZmluZF91c2VyX2J5X3VpZCA9PSBOb25lOgogICAgICAgICAgICBwcmludCAiVUFGLiBQcm9jZXNzIGJhc2ljIGF1dGhlbnRpY2F0aW9uLiBGYWlsZWQgdG8gZmluZCB1c2VyICclcyciICUgdXNlcl9uYW1lCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgCiAgICAgICAgcmV0dXJuIGZpbmRfdXNlcl9ieV91aWQKCiAgICBkZWYgZmluZEVucm9sbG1lbnRzKHNlbGYsIGNyZWRlbnRpYWxzKToKICAgICAgICByZXN1bHQgPSBbXQoKICAgICAgICB1c2VyU2VydmljZSA9IENkaVV0aWwuYmVhbihVc2VyU2VydmljZSkKICAgICAgICB1c2VyX25hbWUgPSBjcmVkZW50aWFscy5nZXRVc2VybmFtZSgpCiAgICAgICAgdXNlciA9IHVzZXJTZXJ2aWNlLmdldFVzZXIodXNlcl9uYW1lLCAib3hFeHRlcm5hbFVpZCIpCiAgICAgICAgaWYgdXNlciA9PSBOb25lOgogICAgICAgICAgICBwcmludCAiVUFGLiBGaW5kIGVucm9sbG1lbnRzLiBGYWlsZWQgdG8gZmluZCB1c2VyIgogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICAgICAgdXNlcl9jdXN0b21fZXh0X2F0dHJpYnV0ZSA9IHVzZXJTZXJ2aWNlLmdldEN1c3RvbUF0dHJpYnV0ZSh1c2VyLCAib3hFeHRlcm5hbFVpZCIpCiAgICAgICAgaWYgdXNlcl9jdXN0b21fZXh0X2F0dHJpYnV0ZSA9PSBOb25lOgogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICAgICAgdWFmX3ByZWZpeCA9ICJ1YWY6IgogICAgICAgIHVhZl9wcmVmaXhfbGVuZ3RoID0gbGVuKHVhZl9wcmVmaXgpIAogICAgICAgIGZvciB1c2VyX2V4dGVybmFsX3VpZCBpbiB1c2VyX2N1c3RvbV9leHRfYXR0cmlidXRlLmdldFZhbHVlcygpOgogICAgICAgICAgICBpbmRleCA9IHVzZXJfZXh0ZXJuYWxfdWlkLmZpbmQodWFmX3ByZWZpeCkKICAgICAgICAgICAgaWYgaW5kZXggIT0gLTE6CiAgICAgICAgICAgICAgICBlbnJvbGxtZW50X3VpZCA9IHVzZXJfZXh0ZXJuYWxfdWlkW3VhZl9wcmVmaXhfbGVuZ3RoOl0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZW5yb2xsbWVudF91aWQpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGRlZiBleGVjdXRlUG9zdChzZWxmLCByZXF1ZXN0X3VyaSwgcmVxdWVzdF9kYXRhKToKICAgICAgICBodHRwU2VydmljZSA9IENkaVV0aWwuYmVhbihIdHRwU2VydmljZSkKCiAgICAgICAgcmVxdWVzdF9oZWFkZXJzID0geyAiQ29udGVudC10eXBlIiA6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04IiwgIkFjY2VwdCIgOiAiYXBwbGljYXRpb24vanNvbiIgfQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGh0dHBfc2VydmljZV9yZXNwb25zZSA9IGh0dHBTZXJ2aWNlLmV4ZWN1dGVQb3N0KHNlbGYuaHR0cF9jbGllbnQsIHJlcXVlc3RfdXJpLCBOb25lLCByZXF1ZXN0X2hlYWRlcnMsIHJlcXVlc3RfZGF0YSkKICAgICAgICAgICAgaHR0cF9yZXNwb25zZSA9IGh0dHBfc2VydmljZV9yZXNwb25zZS5nZXRIdHRwUmVzcG9uc2UoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQgIlVBRi4gVmFsaWRhdGUgUE9TVCByZXNwb25zZS4gRXhjZXB0aW9uOiAiLCBzeXMuZXhjX2luZm8oKVsxXQogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG5vdCBodHRwU2VydmljZS5pc1Jlc3BvbnNlU3Rhc3R1c0NvZGVPayhodHRwX3Jlc3BvbnNlKToKICAgICAgICAgICAgICAgIHByaW50ICJVQUYuIFZhbGlkYXRlIFBPU1QgcmVzcG9uc2UuIEdldCBpbnZhbGlkIHJlc3BvbnNlIGZyb20gIHNlcnZlcjogJXMiICUgc3RyKGh0dHBfcmVzcG9uc2UuZ2V0U3RhdHVzTGluZSgpLmdldFN0YXR1c0NvZGUoKSkKICAgICAgICAgICAgICAgIGh0dHBTZXJ2aWNlLmNvbnN1bWUoaHR0cF9yZXNwb25zZSkKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAKICAgICAgICAgICAgcmVzcG9uc2VfYnl0ZXMgPSBodHRwU2VydmljZS5nZXRSZXNwb25zZUNvbnRlbnQoaHR0cF9yZXNwb25zZSkKICAgICAgICAgICAgcmVzcG9uc2Vfc3RyaW5nID0gaHR0cFNlcnZpY2UuY29udmVydEVudGl0eVRvU3RyaW5nKHJlc3BvbnNlX2J5dGVzKQogICAgICAgICAgICBodHRwU2VydmljZS5jb25zdW1lKGh0dHBfcmVzcG9uc2UpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Vfc3RyaW5nCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgaHR0cF9zZXJ2aWNlX3Jlc3BvbnNlLmNsb3NlQ29ubmVjdGlvbigpCiAgICAgICAgcmV0dXJuIE5vbmUK
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=5018-D4BF,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: HOTP/TOPT authentication module
displayName: otp
oxEnabled: false
inum: 5018-D4BF
oxConfigurationProperty: {"value1":"otp_type","value2":"totp","description":""}
oxConfigurationProperty: {"value1":"otp_conf_file","value2":"/etc/certs/otp_configuration.json","description":""}
oxConfigurationProperty: {"value1":"issuer","value2":"Gluu Inc","description":""}
oxConfigurationProperty: {"value1":"label","value2":"Gluu OTP","description":""}
oxConfigurationProperty: {"value1":"qr_options","value2":"{ size: 400, mSize: 0.05 }","description":""}
oxConfigurationProperty: {"value1":"registration_uri","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal/identity/register","description":""}
oxLevel: 40
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=5018-F9CF,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: DUO authentication module
displayName: duo
oxEnabled: false
inum: 5018-F9CF
oxConfigurationProperty: {"value1":"duo_creds_file","value2":"/etc/certs/duo_creds.json","description":""}
oxConfigurationProperty: {"value1":"duo_host","value2":"api-random.duosecurity.com","description":""}
oxLevel: 50
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=522F-CDC5,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Update User script
displayName: update_user
oxEnabled: false
inum: 522F-CDC5
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUudXNlciBpbXBvcnQgVXBkYXRlVXNlclR5cGUKZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIsIEFycmF5SGVscGVyCmZyb20gamF2YS51dGlsIGltcG9ydCBBcnJheXMsIEFycmF5TGlzdAoKaW1wb3J0IGphdmEKCmNsYXNzIFVwZGF0ZVVzZXIoVXBkYXRlVXNlclR5cGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToKICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMKCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiVXBkYXRlIHVzZXIuIEluaXRpYWxpemF0aW9uIgogICAgICAgIHByaW50ICJVcGRhdGUgdXNlci4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgoKICAgICAgICByZXR1cm4gVHJ1ZSAgIAoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiVXBkYXRlIHVzZXIuIERlc3Ryb3kiCiAgICAgICAgcHJpbnQgIlVwZGF0ZSB1c2VyLiBEZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHJldHVybiBUcnVlICAgCgogICAgZGVmIGdldEFwaVZlcnNpb24oc2VsZik6CiAgICAgICAgcmV0dXJuIDExCgogICAgZGVmIG5ld1VzZXIoc2VsZiwgdXNlciwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJVcGRhdGUgdXNlci4gbmV3VXNlciBtZXRob2QiCgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIGFkZFVzZXIoc2VsZiwgdXNlciwgcGVyc2lzdGVkLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIlVwZGF0ZSB1c2VyLiBhZGRVc2VyIG1ldGhvZCIKCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgcG9zdEFkZFVzZXIoc2VsZiwgdXNlciwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJVcGRhdGUgdXNlci4gcG9zdEFkZFVzZXIgbWV0aG9kIgoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICMgVXBkYXRlIHVzZXIgZW50cnkgYmVmb3JlIHBlcnNpc3RlbnQgaXQKICAgICMgICB1c2VyIGlzIG9yZy5nbHV1Lm94dHJ1c3QubW9kZWwuR2x1dUN1c3RvbVBlcnNvbgogICAgIyAgIHBlcnNpc3RlZCBpcyBib29sZWFuIHZhbHVlIHRvIHNwZWNpZnkgaWYgb3BlcmF0aW9uIHR5cGU6IGFkZC9tb2RpZnkKICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+CiAgICBkZWYgdXBkYXRlVXNlcihzZWxmLCB1c2VyLCBwZXJzaXN0ZWQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiVXBkYXRlIHVzZXIuIHVwZGF0ZVVzZXIgbWV0aG9kIgoKICAgICAgICB1aWQgPSB1c2VyLmdldFVpZCgpCiAgICAgICAgcHJpbnQgIlVwZGF0ZSB1c2VyLiBVc2VyIHVpZDoge30iLmZvcm1hdCh1aWQpCiAgICAgICAKICAgICAgICBtYWlsID0gdWlkICsgIkBleGFtcGxlLm9yZyIKICAgICAgICB1c2VyLnNldE1haWwobWFpbCkKCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgcG9zdFVwZGF0ZVVzZXIoc2VsZiwgdXNlciwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJVcGRhdGUgdXNlci4gcG9zdFVwZGF0ZVVzZXIgbWV0aG9kIgoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZWxldGVVc2VyKHNlbGYsIHVzZXIsIHBlcnNpc3RlZCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJVcGRhdGUgdXNlci4gZGVsZXRlVXNlciBtZXRob2QiCgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIHBvc3REZWxldGVVc2VyKHNlbGYsIHVzZXIsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiVXBkYXRlIHVzZXIuIHBvc3REZWxldGVVc2VyIG1ldGhvZCIKCiAgICAgICAgcmV0dXJuIFRydWUK
oxScriptType: update_user
programmingLanguage: python

dn: inum=6EA0-8F0C,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample User Registration script
displayName: user_registration
oxEnabled: false
inum: 6EA0-8F0C
oxConfigurationProperty: {"value1":"enable_user","value2":"false","description":""}
oxLevel: 90
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNiwgR2x1dQ0KIw0KIyBBdXRob3I6IFl1cml5IE1vdmNoYW4NCiMNCg0KZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUudXNlciBpbXBvcnQgVXNlclJlZ2lzdHJhdGlvblR5cGUNCmZyb20gb3JnLmdsdXUudXRpbCBpbXBvcnQgU3RyaW5nSGVscGVyLCBBcnJheUhlbHBlcg0KZnJvbSBqYXZhLnV0aWwgaW1wb3J0IEFycmF5cywgQXJyYXlMaXN0DQoNCmltcG9ydCBqYXZhDQoNCmNsYXNzIFVzZXJSZWdpc3RyYXRpb24oVXNlclJlZ2lzdHJhdGlvblR5cGUpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6DQogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcw0KDQogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHByaW50ICJVc2VyIHJlZ2lzdHJhdGlvbi4gSW5pdGlhbGl6YXRpb24iDQoNCiAgICAgICAgc2VsZi5lbmFibGVfdXNlciA9IFN0cmluZ0hlbHBlci50b0Jvb2xlYW4oY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuZ2V0KCJlbmFibGVfdXNlciIpLmdldFZhbHVlMigpLCBGYWxzZSkNCg0KICAgICAgICBwcmludCAiVXNlciByZWdpc3RyYXRpb24uIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSINCg0KICAgICAgICByZXR1cm4gVHJ1ZSAgIA0KDQogICAgZGVmIGRlc3Ryb3koc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiVXNlciByZWdpc3RyYXRpb24uIERlc3Ryb3kiDQogICAgICAgIHByaW50ICJVc2VyIHJlZ2lzdHJhdGlvbi4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSINCiAgICAgICAgcmV0dXJuIFRydWUgICANCg0KICAgICMgVXNlciByZWdpc3RyYXRpb24gaW5pdCBtZXRob2QNCiAgICAjICAgdXNlciBpcyBvcmcuZ2x1dS5veHRydXN0Lm1vZGVsLkdsdXVDdXN0b21QZXJzb24NCiAgICAjICAgcmVxdWVzdFBhcmFtZXRlcnMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFN0cmluZ1tdPg0KICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+DQogICAgZGVmIGluaXRSZWdpc3RyYXRpb24oc2VsZiwgdXNlciwgcmVxdWVzdFBhcmFtZXRlcnMsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIlVzZXIgcmVnaXN0cmF0aW9uLiBJbml0IG1ldGhvZCINCg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgIyBVc2VyIHJlZ2lzdHJhdGlvbiBwcmUgbWV0aG9kDQogICAgIyAgIHVzZXIgaXMgb3JnLmdsdXUub3h0cnVzdC5tb2RlbC5HbHV1Q3VzdG9tUGVyc29uDQogICAgIyAgIHJlcXVlc3RQYXJhbWV0ZXJzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTdHJpbmdbXT4NCiAgICAjICAgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFNpbXBsZUN1c3RvbVByb3BlcnR5Pg0KICAgIGRlZiBwcmVSZWdpc3RyYXRpb24oc2VsZiwgdXNlciwgcmVxdWVzdFBhcmFtZXRlcnMsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIlVzZXIgcmVnaXN0cmF0aW9uLiBQcmUgbWV0aG9kIg0KDQogICAgICAgIHVzZXJTdGF0dXMgPSAiYWN0aXZlIg0KICAgICAgICBpZiBub3Qgc2VsZi5lbmFibGVfdXNlcjoNCiAgICAgICAgICAgIHVzZXJTdGF0dXMgPSAiaW5hY3RpdmUiDQoNCiAgICAgICAgIyBEaXNhYmxlL0VuYWJsZSByZWdpc3RlcmVkIHVzZXINCiAgICAgICAgdXNlci5zZXRTdGF0dXModXNlclN0YXR1cykNCg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgIyBVc2VyIHJlZ2lzdHJhdGlvbiBwb3N0IG1ldGhvZA0KICAgICMgICB1c2VyIGlzIG9yZy5nbHV1Lm94dHJ1c3QubW9kZWwuR2x1dUN1c3RvbVBlcnNvbg0KICAgICMgICByZXF1ZXN0UGFyYW1ldGVycyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU3RyaW5nW10+DQogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4NCiAgICBkZWYgcG9zdFJlZ2lzdHJhdGlvbihzZWxmLCB1c2VyLCByZXF1ZXN0UGFyYW1ldGVycywgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiVXNlciByZWdpc3RyYXRpb24uIFBvc3QgbWV0aG9kIg0KDQogICAgICAgIHJldHVybiBUcnVlDQogICAgDQogICAgIyBVc2VyIGNvbmZpcm0gTmV3IFJlZ2lzdHJhdGlvbiBtZXRob2QNCiAgICAjICAgdXNlciBpcyBvcmcuZ2x1dS5veHRydXN0Lm1vZGVsLkdsdXVDdXN0b21QZXJzb24NCiAgICAjICAgcmVxdWVzdFBhcmFtZXRlcnMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFN0cmluZ1tdPg0KICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+DQogICAgZGVmIGNvbmZpcm1SZWdpc3RyYXRpb24oc2VsZiwgdXNlciwgcmVxdWVzdFBhcmFtZXRlcnMsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIlVzZXIgcmVnaXN0cmF0aW9uLiBDb25maXJtIHJlZ2lzdHJhdGlvbiBtZXRob2QiDQoNCiAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOg0KICAgICAgICByZXR1cm4gMTENCg==
oxScriptType: user_registration
programmingLanguage: python

dn: inum=6EA0-8F0D,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Confirm User Registration  script
displayName: user_confirm_registration
oxEnabled: false
inum: 6EA0-8F0D
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuDQojIENvcHlyaWdodCAoYykgMjAxNiwgR2x1dQ0KIw0KDQpmcm9tIG9yZy5nbHV1LnNlcnZpY2UuY2RpLnV0aWwgaW1wb3J0IENkaVV0aWwNCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLnVzZXIgaW1wb3J0IFVzZXJSZWdpc3RyYXRpb25UeXBlDQpmcm9tIG9yZy5nbHV1LnNlcnZpY2UgaW1wb3J0IE1haWxTZXJ2aWNlDQpmcm9tIG9yZy5nbHV1Lm94dHJ1c3Quc2VydmljZSBpbXBvcnQgUGVyc29uU2VydmljZQ0KZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIsIEFycmF5SGVscGVyDQpmcm9tIGphdmEudXRpbCBpbXBvcnQgQXJyYXlzLCBBcnJheUxpc3QNCmZyb20gb3JnLmdsdXUuY29uZmlnLm94dHJ1c3QgaW1wb3J0IEFwcENvbmZpZ3VyYXRpb24NCmZyb20gamF2YXguZmFjZXMuY29udGV4dCBpbXBvcnQgRXh0ZXJuYWxDb250ZXh0DQpmcm9tIG9yZy5nbHV1Lm94dHJ1c3Quc2VydmljZSBpbXBvcnQgQ29uZmlndXJhdGlvblNlcnZpY2UNCg0KaW1wb3J0IGphdmENCg0KY2xhc3MgVXNlclJlZ2lzdHJhdGlvbihVc2VyUmVnaXN0cmF0aW9uVHlwZSk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToNCiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzDQoNCiAgICBkZWYgaW5pdChzZWxmLCBjdXN0b21TY3JpcHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIlVzZXIgQ29uZmlybSByZWdpc3RyYXRpb24uIEluaXRpYWxpemF0aW9uIg0KICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Ig0KDQogICAgICAgIHJldHVybiBUcnVlICAgDQoNCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6DQogICAgICAgIHByaW50ICJVc2VyIENvbmZpcm0gcmVnaXN0cmF0aW9uLiBEZXN0cm95Ig0KICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSINCiAgICAgICAgcmV0dXJuIFRydWUgICANCg0KICAgICMgVXNlciByZWdpc3RyYXRpb24gaW5pdCBtZXRob2QNCiAgICAjICAgdXNlciBpcyBvcmcuZ2x1dS5veHRydXN0Lm1vZGVsLkdsdXVDdXN0b21QZXJzb24NCiAgICAjICAgcmVxdWVzdFBhcmFtZXRlcnMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFN0cmluZ1tdPg0KICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+DQogICAgZGVmIGluaXRSZWdpc3RyYXRpb24oc2VsZiwgdXNlciwgcmVxdWVzdFBhcmFtZXRlcnMsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToNCiAgICAgICAgcHJpbnQgIlVzZXIgQ29uZmlybSByZWdpc3RyYXRpb24uIEluaXQgbWV0aG9kIg0KICAgICAgICAjaG9zdE5hbWUgPSByZXF1ZXN0UGFyYW1ldGVycy5nZXQoImhvc3ROYW1lIilbMF0NCiAgICAgICAgI3ByaW50ICJIb3N0TmFtZSBJbml0aWFsaXphdGlvbiA6ICVzIiAlIGhvc3ROYW1lDQogICAgICAgIHJldHVybiBUcnVlDQoNCiAgICAjIFVzZXIgcmVnaXN0cmF0aW9uIHByZSBtZXRob2QNCiAgICAjICAgdXNlciBpcyBvcmcuZ2x1dS5veHRydXN0Lm1vZGVsLkdsdXVDdXN0b21QZXJzb24NCiAgICAjICAgcmVxdWVzdFBhcmFtZXRlcnMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFN0cmluZ1tdPg0KICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+DQogICAgZGVmIHByZVJlZ2lzdHJhdGlvbihzZWxmLCB1c2VyLCByZXF1ZXN0UGFyYW1ldGVycywgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gUHJlIG1ldGhvZCINCiAgICAgICAgdXNlclN0YXR1cyA9ICJpbmFjdGl2ZSINCg0KICAgICAgICAjIERpc2FibGUvRW5hYmxlIHJlZ2lzdGVyZWQgdXNlcg0KICAgICAgICB1c2VyLnNldFN0YXR1cyh1c2VyU3RhdHVzKQ0KICAgICAgICBzZWxmLmd1aWQgPSBTdHJpbmdIZWxwZXIuZ2V0UmFuZG9tU3RyaW5nKDE2KQ0KICAgICAgICB1c2VyLnNldEd1aWQoc2VsZi5ndWlkKQ0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgIyBVc2VyIHJlZ2lzdHJhdGlvbiBwb3N0IG1ldGhvZA0KICAgICMgICB1c2VyIGlzIG9yZy5nbHV1Lm94dHJ1c3QubW9kZWwuR2x1dUN1c3RvbVBlcnNvbg0KICAgICMgICByZXF1ZXN0UGFyYW1ldGVycyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU3RyaW5nW10+DQogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4NCiAgICBkZWYgcG9zdFJlZ2lzdHJhdGlvbihzZWxmLCB1c2VyLCByZXF1ZXN0UGFyYW1ldGVycywgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gUG9zdCBtZXRob2QiDQogICAgICAgIGV4dGVybmFsQ29udGV4dCA9IENkaVV0aWwuYmVhbihFeHRlcm5hbENvbnRleHQpDQogICAgICAgIGNvbnRleHRQYXRoID0gZXh0ZXJuYWxDb250ZXh0LmdldFJlcXVlc3QoKS5nZXRDb250ZXh0UGF0aCgpDQogICAgICAgIGhvc3ROYW1lID0gIGV4dGVybmFsQ29udGV4dC5nZXRSZXF1ZXN0U2VydmVyTmFtZSgpDQogICAgICAgIHByaW50ICJIb3N0TmFtZSBmcm9tIGNvbnRleHQgOiAlcyIgJSBob3N0TmFtZQ0KICAgICAgICBtYWlsU2VydmljZSA9IENkaVV0aWwuYmVhbihNYWlsU2VydmljZSkNCiAgICAgICAgc3ViamVjdCA9ICJSZWdpc3RyYXRpb24gY29uZmlybWF0aW9uIg0KICAgICAgICBhY3RpdmF0aW9uTGluayA9ICJodHRwczovLyVzJXMvY29uZmlybS9yZWdpc3RyYXRpb24uaHRtP2NvZGU9JXMiICUoaG9zdE5hbWUsIGNvbnRleHRQYXRoLCBzZWxmLmd1aWQpDQogICAgICAgIGJvZHkgPSAiPGgyIHN0eWxlPSdtYXJnaW4tbGVmdDoxMCUlO2NvbG9yOiAjMzM3YWI3Oyc+V2VsY29tZTwvaDI+PGhyIHN0eWxlPSd3aWR0aDo4MCUlO2JvcmRlcjogMXB4IHNvbGlkICMzMzdhYjc7Jz48L2hyPjxkaXYgc3R5bGU9J3RleHQtYWxpZ246Y2VudGVyOyc+PHA+RGVhciA8c3BhbiBzdHlsZT0nY29sb3I6ICMzMzdhYjc7Jz4lczwvc3Bhbj4sPC9wPjxwPllvdXIgQWNjb3VudCBoYXMgYmVlbiBjcmVhdGVkLCB3ZWxjb21lIHRvIDxzcGFuIHN0eWxlPSdjb2xvcjogIzMzN2FiNzsnPiVzPC9zcGFuPi48L3A+PHA+WW91IGFyZSBqdXN0IG9uZSBzdGVwIHdheSBmcm9tIGFjdGl2YXRpbmcgeW91ciBhY2NvdW50IG9uIDxzcGFuIHN0eWxlPSdjb2xvcjogIzMzN2FiNzsnPiVzPC9zcGFuPi48L3A+PHA+Q2xpY2sgdGhlIGJ1dHRvbiBhbmQgc3RhcnQgdXNpbmcgeW91ciBhY2NvdW50LjwvcD48L2Rpdj48YSBjbGFzcz0nYnRuJyBocmVmPSclcyc+PGJ1dHRvbiBzdHlsZT0nYmFja2dyb3VuZDogIzMzN2FiNzsgY29sb3I6IHdoaXRlOyBtYXJnaW4tbGVmdDogMzAlJTsgYm9yZGVyLXJhZGl1czogNXB4OyBib3JkZXI6IDBweDsgcGFkZGluZzogNXB4OycgdHlwZT0nYnV0dG9uJz5BY3RpdmF0ZSB5b3VyIGFjY291bnQgbm93ITwvYnV0dG9uPjwvYT4iICAlICh1c2VyLmdldFVpZCgpLCBob3N0TmFtZSwgaG9zdE5hbWUsIGFjdGl2YXRpb25MaW5rKQ0KICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gUG9zdCBtZXRob2QuIEF0dGVtcHRpbmcgdG8gc2VuZCBlLW1haWwgdG8gJyVzJyBtZXNzYWdlICclcyciICUgKHVzZXIuZ2V0TWFpbCgpLCBib2R5KQ0KICAgICAgICBtYWlsU2VydmljZS5zZW5kTWFpbCh1c2VyLmdldE1haWwoKSwgTm9uZSwgc3ViamVjdCwgYm9keSwgYm9keSk7DQogICAgICAgIHJldHVybiBUcnVlDQoNCiAgICBkZWYgY29uZmlybVJlZ2lzdHJhdGlvbihzZWxmLCB1c2VyLCByZXF1ZXN0UGFyYW1ldGVycywgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOg0KICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gQ29uZmlybSBtZXRob2QiDQogICAgICAgIGNvZGVfYXJyYXkgPSByZXF1ZXN0UGFyYW1ldGVycy5nZXQoImNvZGUiKQ0KICAgICAgICBpZiBBcnJheUhlbHBlci5pc0VtcHR5KGNvZGVfYXJyYXkpOg0KICAgICAgICAgICAgcHJpbnQgIlVzZXIgQ29uZmlybSByZWdpc3RyYXRpb24uIENvbmZpcm0gbWV0aG9kLiBjb2RlIGlzIGVtcHR5Ig0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgY29uZmlybWF0aW9uX2NvZGUgPSBjb2RlX2FycmF5WzBdDQogICAgICAgIHByaW50ICJVc2VyIENvbmZpcm0gcmVnaXN0cmF0aW9uLiBDb25maXJtIG1ldGhvZC4gY29kZTogJyVzJyIgJSBjb25maXJtYXRpb25fY29kZQ0KDQogICAgICAgIGlmIGNvbmZpcm1hdGlvbl9jb2RlID09IE5vbmU6DQogICAgICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gQ29uZmlybSBtZXRob2QuIENvbmZpcm1hdGlvbiBjb2RlIG5vdCBleGlzdCBpbiByZXF1ZXN0Ig0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgcGVyc29uU2VydmljZSA9IENkaVV0aWwuYmVhbihQZXJzb25TZXJ2aWNlKQ0KICAgICAgICB1c2VyID0gcGVyc29uU2VydmljZS5nZXRQZXJzb25CeUF0dHJpYnV0ZSgib3hHdWlkIiwgY29uZmlybWF0aW9uX2NvZGUpDQogICAgICAgIGlmIHVzZXIgPT0gTm9uZToNCiAgICAgICAgICAgIHByaW50ICJVc2VyIENvbmZpcm0gcmVnaXN0cmF0aW9uLiBDb25maXJtIG1ldGhvZC4gVGhlcmUgaXMgbm8gdXNlciBieSBjb25maXJtYXRpb24gY29kZTogJyVzJyIgJSBjb25maXJtYXRpb25fY29kZQ0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgaWYgY29uZmlybWF0aW9uX2NvZGUgPT0gdXNlci5nZXRHdWlkKCk6DQogICAgICAgICAgICB1c2VyLnNldFN0YXR1cygiYWN0aXZlIikNCiAgICAgICAgICAgIHVzZXIuc2V0R3VpZCgiIikNCiAgICAgICAgICAgIHBlcnNvblNlcnZpY2UudXBkYXRlUGVyc29uKHVzZXIpDQogICAgICAgICAgICBwcmludCAiVXNlciBDb25maXJtIHJlZ2lzdHJhdGlvbi4gQ29uZmlybSBtZXRob2QuIFVzZXIgJyVzJyBjb25maXJtZWQgaGlzIHJlZ2lzdHJhdGlvbiIgJSB1c2VyLmdldFVpZCgpDQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgICAgIHByaW50ICJVc2VyIENvbmZpcm0gcmVnaXN0cmF0aW9uLiBDb25maXJtIG1ldGhvZC4gQ29uZmlybWF0aW9uIGNvZGUgZm9yIHVzZXIgJyVzJyBpcyBpbnZhbGlkIiAlIHVzZXIuZ2V0VWlkKCkNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToNCiAgICAgICAgcmV0dXJuIDExDQo=
oxScriptType: user_registration
programmingLanguage: python

dn: inum=8BAF-80D6,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Fido U2F authentication module
displayName: u2f
oxEnabled: false
inum: 8BAF-80D6
oxConfigurationProperty: {"value1":"u2f_application_id","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal","description":""}
oxConfigurationProperty: {"value1":"u2f_server_uri","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal","description":""}
oxLevel: 50
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=8BAF-80D7,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Fido2 authentication module
displayName: fido2
oxEnabled: false
inum: 8BAF-80D7
oxConfigurationProperty: {"value1":"fido2_server_uri","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal","hide":false,"description":""}
oxLevel: 70
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=92F0-BF9E,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Super Gluu authentication module
displayName: super_gluu
oxEnabled: false
inum: 92F0-BF9E
oxConfigurationProperty: {"value1":"qr_options","value2":"{ size: 500, mSize: 0.05 }","description":""}
oxConfigurationProperty: {"value1":"label","value2":"Super Gluu","description":""}
oxConfigurationProperty: {"value1":"registration_uri","value2":"https://instance-1.us-central1-a.c.nifty-canyon-287111.internal/identity/register","description":""}
oxConfigurationProperty: {"value1":"authentication_mode","value2":"two_step","description":""}
oxConfigurationProperty: {"value1":"notification_service_mode","value2":"gluu","description":""}
oxConfigurationProperty: {"value1":"credentials_file","value2":"/etc/certs/super_gluu_creds.json","description":""}
oxConfigurationProperty: {"value1":"supergluu_android_download_url","value2":"https://play.google.com/store/apps/details?id=gluu.org.super.gluu&hl=en_US","description":""}
oxConfigurationProperty: {"value1":"supergluu_ios_download_url","value2":"https://itunes.apple.com/us/app/super-gluu/id1093479646","description":""}
oxLevel: 60
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=92F0-759E,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: ThumbSignIn authentication module
displayName: thumb_sign_in
oxEnabled: false
inum: 92F0-759E
oxConfigurationProperty: {"value1":"ts_host","value2":"https://ts.host.com","description":""}
oxConfigurationProperty: {"value1":"ts_apiKey","value2":"ts_api_key","description":""}
oxConfigurationProperty: {"value1":"ts_apiSecret","value2":"ts_api_secret","description":""}
oxLevel: 50
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=A51E-76DA,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample authentication module
displayName: basic
oxEnabled: false
inum: A51E-76DA
oxLevel: 10
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5zZXJ2aWNlLmNkaS51dGlsIGltcG9ydCBDZGlVdGlsCmZyb20gb3JnLmdsdXUub3hhdXRoLnNlY3VyaXR5IGltcG9ydCBJZGVudGl0eQpmcm9tIG9yZy5nbHV1Lm1vZGVsLmN1c3RvbS5zY3JpcHQudHlwZS5hdXRoIGltcG9ydCBQZXJzb25BdXRoZW50aWNhdGlvblR5cGUKZnJvbSBvcmcuZ2x1dS5veGF1dGguc2VydmljZSBpbXBvcnQgQXV0aGVudGljYXRpb25TZXJ2aWNlCmZyb20gb3JnLmdsdXUudXRpbCBpbXBvcnQgU3RyaW5nSGVscGVyCgppbXBvcnQgamF2YQoKY2xhc3MgUGVyc29uQXV0aGVudGljYXRpb24oUGVyc29uQXV0aGVudGljYXRpb25UeXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCAgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJCYXNpYy4gSW5pdGlhbGl6YXRpb24iCiAgICAgICAgcHJpbnQgIkJhc2ljLiBJbml0aWFsaXplZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUgICAKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkJhc2ljLiBEZXN0cm95IgogICAgICAgIHByaW50ICJCYXNpYy4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIAogICAgZGVmIGdldEF1dGhlbnRpY2F0aW9uTWV0aG9kQ2xhaW1zKHNlbGYsIHJlcXVlc3RQYXJhbWV0ZXJzKToKICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIAogICAgZGVmIGdldEFwaVZlcnNpb24oc2VsZik6CiAgICAgICAgcmV0dXJuIDExCgogICAgZGVmIGlzVmFsaWRBdXRoZW50aWNhdGlvbk1ldGhvZChzZWxmLCB1c2FnZVR5cGUsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBbHRlcm5hdGl2ZUF1dGhlbnRpY2F0aW9uTWV0aG9kKHNlbGYsIHVzYWdlVHlwZSwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIGF1dGhlbnRpY2F0ZShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMsIHN0ZXApOgogICAgICAgIGF1dGhlbnRpY2F0aW9uU2VydmljZSA9IENkaVV0aWwuYmVhbihBdXRoZW50aWNhdGlvblNlcnZpY2UpCgogICAgICAgIGlmIChzdGVwID09IDEpOgogICAgICAgICAgICBwcmludCAiQmFzaWMuIEF1dGhlbnRpY2F0ZSBmb3Igc3RlcCAxIgoKICAgICAgICAgICAgaWRlbnRpdHkgPSBDZGlVdGlsLmJlYW4oSWRlbnRpdHkpCiAgICAgICAgICAgIGNyZWRlbnRpYWxzID0gaWRlbnRpdHkuZ2V0Q3JlZGVudGlhbHMoKQoKICAgICAgICAgICAgdXNlcl9uYW1lID0gY3JlZGVudGlhbHMuZ2V0VXNlcm5hbWUoKQogICAgICAgICAgICB1c2VyX3Bhc3N3b3JkID0gY3JlZGVudGlhbHMuZ2V0UGFzc3dvcmQoKQoKICAgICAgICAgICAgbG9nZ2VkX2luID0gRmFsc2UKICAgICAgICAgICAgaWYgKFN0cmluZ0hlbHBlci5pc05vdEVtcHR5U3RyaW5nKHVzZXJfbmFtZSkgYW5kIFN0cmluZ0hlbHBlci5pc05vdEVtcHR5U3RyaW5nKHVzZXJfcGFzc3dvcmQpKToKICAgICAgICAgICAgICAgIGxvZ2dlZF9pbiA9IGF1dGhlbnRpY2F0aW9uU2VydmljZS5hdXRoZW50aWNhdGUodXNlcl9uYW1lLCB1c2VyX3Bhc3N3b3JkKQoKICAgICAgICAgICAgaWYgKG5vdCBsb2dnZWRfaW4pOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBwcmVwYXJlRm9yU3RlcChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgcmVxdWVzdFBhcmFtZXRlcnMsIHN0ZXApOgogICAgICAgIGlmIChzdGVwID09IDEpOgogICAgICAgICAgICBwcmludCAiQmFzaWMuIFByZXBhcmUgZm9yIFN0ZXAgMSIKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ2V0RXh0cmFQYXJhbWV0ZXJzRm9yU3RlcChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgc3RlcCk6CiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgZ2V0Q291bnRBdXRoZW50aWNhdGlvblN0ZXBzKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICByZXR1cm4gMQoKICAgIGRlZiBnZXRQYWdlRm9yU3RlcChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcywgc3RlcCk6CiAgICAgICAgcmV0dXJuICIiCgogICAgZGVmIGdldE5leHRTdGVwKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycywgc3RlcCk6CiAgICAgICAgcmV0dXJuIC0xCgogICAgZGVmIGdldExvZ291dEV4dGVybmFsVXJsKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycyk6CiAgICAgICAgcHJpbnQgIkdldCBleHRlcm5hbCBsb2dvdXQgVVJMIGNhbGwiCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgbG9nb3V0KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLCByZXF1ZXN0UGFyYW1ldGVycyk6CiAgICAgICAgcmV0dXJuIFRydWUK
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=A910-56AB,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample script for SCIM events
displayName: scim_event_handler
oxEnabled: false
inum: A910-56AB
oxConfigurationProperty: {"value1":"testProp1","value2":"Test value 1","description":""}
oxConfigurationProperty: {"value1":"testProp2","value2":"Test value 2","description":""}
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveFRydXN0IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKDIwMDgpLiBTZWUgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVCBmb3IgZnVsbCB0ZXh0LgojIENvcHlyaWdodCAoYykgMjAxNCwgR2x1dQojCiMgQXV0aG9yOiBKb3NlIEdvbnphbGV6CiMKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuc2NpbSBpbXBvcnQgU2NpbVR5cGUKZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIsIEFycmF5SGVscGVyCmZyb20gamF2YS51dGlsIGltcG9ydCBBcnJheXMsIEFycmF5TGlzdApmcm9tIG9yZy5nbHV1Lm94dHJ1c3QubGRhcC5zZXJ2aWNlIGltcG9ydCBQZXJzb25TZXJ2aWNlCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIG9yZy5nbHV1Lm94dHJ1c3QubW9kZWwgaW1wb3J0IEdsdXVDdXN0b21QZXJzb24KCmltcG9ydCBqYXZhCgpjbGFzcyBTY2ltRXZlbnRIYW5kbGVyKFNjaW1UeXBlKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJTY2ltRXZlbnRIYW5kbGVyIChpbml0KTogSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHJldHVybiBUcnVlICAgCgogICAgZGVmIGRlc3Ryb3koc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJTY2ltRXZlbnRIYW5kbGVyIChkZXN0cm95KTogRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZSAgIAoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgICNyZXR1cm4gMiBpZiB5b3Ugd2FudCB0aGUgcG9zdCogc2NyaXB0cyBiZWluZyBleGVjdXRlZAogICAgICAgIHJldHVybiAxMQoKICAgIGRlZiBjcmVhdGVVc2VyKHNlbGYsIHVzZXIsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKCiAgICAgICAgcHJpbnQgIlNjaW1FdmVudEhhbmRsZXIgKGNyZWF0ZVVzZXIpOiBDdXJyZW50IGlkID0gIiArIHVzZXIuZ2V0VWlkKCkKCiAgICAgICAgdGVzdFByb3AxID0gY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuZ2V0KCJ0ZXN0UHJvcDEiKS5nZXRWYWx1ZTIoKQogICAgICAgIHRlc3RQcm9wMiA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgidGVzdFByb3AyIikuZ2V0VmFsdWUyKCkKCiAgICAgICAgcHJpbnQgIlNjaW1FdmVudEhhbmRsZXIgKGNyZWF0ZVVzZXIpOiB0ZXN0UHJvcDEgPSAiICsgdGVzdFByb3AxCiAgICAgICAgcHJpbnQgIlNjaW1FdmVudEhhbmRsZXIgKGNyZWF0ZVVzZXIpOiB0ZXN0UHJvcDIgPSAiICsgdGVzdFByb3AyCgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIHVwZGF0ZVVzZXIoc2VsZiwgdXNlciwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHBlcnNvblNlcnZpY2UgPSBDZGlVdGlsLmJlYW4oUGVyc29uU2VydmljZSkKICAgICAgICBvbGRVc2VyID0gcGVyc29uU2VydmljZS5nZXRQZXJzb25CeVVpZCh1c2VyLmdldFVpZCgpKQogICAgICAgIHByaW50ICJTY2ltRXZlbnRIYW5kbGVyICh1cGRhdGVVc2VyKTogT2xkIGRpc3BsYXlOYW1lICVzIiAlIG9sZFVzZXIuZ2V0RGlzcGxheU5hbWUoKQogICAgICAgIHByaW50ICJTY2ltRXZlbnRIYW5kbGVyICh1cGRhdGVVc2VyKTogTmV3IGRpc3BsYXlOYW1lICIgKyB1c2VyLmdldERpc3BsYXlOYW1lKCkKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZWxldGVVc2VyKHNlbGYsIHVzZXIsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiU2NpbUV2ZW50SGFuZGxlciAoZGVsZXRlVXNlcik6IEN1cnJlbnQgaWQgPSAiICsgdXNlci5nZXRVaWQoKQogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIGNyZWF0ZUdyb3VwKHNlbGYsIGdyb3VwLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIlNjaW1FdmVudEhhbmRsZXIgKGNyZWF0ZUdyb3VwKTogQ3VycmVudCBkaXNwbGF5TmFtZSA9ICIgKyBncm91cC5nZXREaXNwbGF5TmFtZSgpCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgdXBkYXRlR3JvdXAoc2VsZiwgZ3JvdXAsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiU2NpbUV2ZW50SGFuZGxlciAodXBkYXRlR3JvdXApOiBDdXJyZW50IGRpc3BsYXlOYW1lID0gIiArIGdyb3VwLmdldERpc3BsYXlOYW1lKCkKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZWxldGVHcm91cChzZWxmLCBncm91cCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJTY2ltRXZlbnRIYW5kbGVyIChkZWxldGVHcm91cCk6IEN1cnJlbnQgZGlzcGxheU5hbWUgPSAiICsgZ3JvdXAuZ2V0RGlzcGxheU5hbWUoKQogICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICBkZWYgcG9zdENyZWF0ZVVzZXIoc2VsZiwgdXNlciwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIHBvc3RVcGRhdGVVc2VyKHNlbGYsIHVzZXIsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBwb3N0RGVsZXRlVXNlcihzZWxmLCB1c2VyLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgcG9zdFVwZGF0ZUdyb3VwKHNlbGYsIGdyb3VwLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgcG9zdENyZWF0ZUdyb3VwKHNlbGYsIGdyb3VwLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgcG9zdERlbGV0ZUdyb3VwKHNlbGYsIGdyb3VwLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcmV0dXJuIFRydWU=
oxScriptType: scim
programmingLanguage: python

dn: inum=D40C-1CA4,ou=scripts,o=gluu
objectClass: oxCustomScript
objectClass: top
description: Passport SAML authentication module
displayName: passport_saml
oxEnabled: true
inum: D40C-1CA4
oxConfigurationProperty: {"value1":"key_store_file","value2":"/etc/certs/passport-rp.jks","hide":false,"description":""}
oxConfigurationProperty: {"value1":"key_store_password","value2":"secret","hide":false,"description":""}
oxLevel: 60
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=DAA9-B788,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Client Registration script
displayName: client_registration
oxEnabled: false
inum: DAA9-B788
oxLevel: 100
oxConfigurationProperty: {"value1":"client_redirect_uris","value2":"https://client.example.com/example1, https://client.example.com/example2","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuY2xpZW50IGltcG9ydCBDbGllbnRSZWdpc3RyYXRpb25UeXBlCmZyb20gb3JnLmdsdXUuc2VydmljZS5jZGkudXRpbCBpbXBvcnQgQ2RpVXRpbApmcm9tIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlIGltcG9ydCBTY29wZVNlcnZpY2UKZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIsIEFycmF5SGVscGVyCmZyb20gamF2YS51dGlsIGltcG9ydCBBcnJheXMsIEFycmF5TGlzdCwgSGFzaFNldAoKaW1wb3J0IGphdmEKCmNsYXNzIENsaWVudFJlZ2lzdHJhdGlvbihDbGllbnRSZWdpc3RyYXRpb25UeXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkNsaWVudCByZWdpc3RyYXRpb24uIEluaXRpYWxpemF0aW9uIgogICAgICAgIAogICAgICAgIHNlbGYuY2xpZW50UmVkaXJlY3RVcmlzU2V0ID0gc2VsZi5wcmVwYXJlQ2xpZW50UmVkaXJlY3RVcmlzKGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKQoKICAgICAgICBwcmludCAiQ2xpZW50IHJlZ2lzdHJhdGlvbi4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHJldHVybiBUcnVlICAgCgogICAgZGVmIGRlc3Ryb3koc2VsZiwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJDbGllbnQgcmVnaXN0cmF0aW9uLiBEZXN0cm95IgogICAgICAgIHByaW50ICJDbGllbnQgcmVnaXN0cmF0aW9uLiBEZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHJldHVybiBUcnVlICAgCgogICAgIyBVcGRhdGUgY2xpZW50IGVudHJ5IGJlZm9yZSBwZXJzaXN0ZW50IGl0CiAgICAjICAgcmVnaXN0ZXJSZXF1ZXN0IGlzIG9yZy5nbHV1Lm94YXV0aC5jbGllbnQuUmVnaXN0ZXJSZXF1ZXN0CiAgICAjICAgY2xpZW50IGlzIG9yZy5nbHV1Lm94YXV0aC5tb2RlbC5yZWdpc3RyYXRpb24uQ2xpZW50CiAgICAjICAgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMgaXMgamF2YS51dGlsLk1hcDxTdHJpbmcsIFNpbXBsZUN1c3RvbVByb3BlcnR5PgogICAgZGVmIGNyZWF0ZUNsaWVudChzZWxmLCByZWdpc3RlclJlcXVlc3QsIGNsaWVudCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJDbGllbnQgcmVnaXN0cmF0aW9uLiBDcmVhdGVDbGllbnQgbWV0aG9kIgoKICAgICAgICByZWRpcmVjdFVyaXMgPSBjbGllbnQuZ2V0UmVkaXJlY3RVcmlzKCkKICAgICAgICBwcmludCAiQ2xpZW50IHJlZ2lzdHJhdGlvbi4gUmVkaXJlY3QgVXJpczogJXMiICUgcmVkaXJlY3RVcmlzCgogICAgICAgIGFkZEFkZHJlc3NTY29wZSA9IEZhbHNlCiAgICAgICAgZm9yIHJlZGlyZWN0VXJpIGluIHJlZGlyZWN0VXJpczoKICAgICAgICAgICAgaWYgKHNlbGYuY2xpZW50UmVkaXJlY3RVcmlzU2V0LmNvbnRhaW5zKHJlZGlyZWN0VXJpKSk6CiAgICAgICAgICAgICAgICBhZGRBZGRyZXNzU2NvcGUgPSBUcnVlCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIAogICAgICAgIHByaW50ICJDbGllbnQgcmVnaXN0cmF0aW9uLiBJcyBhZGQgYWRkcmVzcyBzY29wZTogJXMiICUgYWRkQWRkcmVzc1Njb3BlCgogICAgICAgIGlmIGFkZEFkZHJlc3NTY29wZToKICAgICAgICAgICAgY3VycmVudFNjb3BlcyA9IGNsaWVudC5nZXRTY29wZXMoKQogICAgICAgICAgICBwcmludCAiQ2xpZW50IHJlZ2lzdHJhdGlvbi4gQ3VycmVudCBzY29wZXM6ICVzIiAlIGN1cnJlbnRTY29wZXMKICAgICAgICAgICAgCiAgICAgICAgICAgIHNjb3BlU2VydmljZSA9IENkaVV0aWwuYmVhbihTY29wZVNlcnZpY2UpCiAgICAgICAgICAgIGFkZHJlc3NTY29wZSA9IHNjb3BlU2VydmljZS5nZXRTY29wZUJ5RGlzcGxheU5hbWUoImFkZHJlc3MiKQogICAgICAgICAgICBuZXdTY29wZXMgPSBBcnJheUhlbHBlci5hZGRJdGVtVG9TdHJpbmdBcnJheShjdXJyZW50U2NvcGVzLCBhZGRyZXNzU2NvcGUuZ2V0RG4oKSkKICAgIAogICAgICAgICAgICBwcmludCAiQ2xpZW50IHJlZ2lzdHJhdGlvbi4gUmVzdWx0IHNjb3BlczogJXMiICUgbmV3U2NvcGVzCiAgICAgICAgICAgIGNsaWVudC5zZXRTY29wZXMobmV3U2NvcGVzKQoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICMgVXBkYXRlIGNsaWVudCBlbnRyeSBiZWZvcmUgcGVyc2lzdGVudCBpdAogICAgIyAgIHJlZ2lzdGVyUmVxdWVzdCBpcyBvcmcuZ2x1dS5veGF1dGguY2xpZW50LlJlZ2lzdGVyUmVxdWVzdAogICAgIyAgIGNsaWVudCBpcyBvcmcuZ2x1dS5veGF1dGgubW9kZWwucmVnaXN0cmF0aW9uLkNsaWVudAogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiB1cGRhdGVDbGllbnQoc2VsZiwgcmVnaXN0ZXJSZXF1ZXN0LCBjbGllbnQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ2xpZW50IHJlZ2lzdHJhdGlvbi4gVXBkYXRlQ2xpZW50IG1ldGhvZCIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQoKICAgIGRlZiBwcmVwYXJlQ2xpZW50UmVkaXJlY3RVcmlzKHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBjbGllbnRSZWRpcmVjdFVyaXNTZXQgPSBIYXNoU2V0KCkKICAgICAgICBpZiBub3QgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMuY29udGFpbnNLZXkoImNsaWVudF9yZWRpcmVjdF91cmlzIik6CiAgICAgICAgICAgIHJldHVybiBjbGllbnRSZWRpcmVjdFVyaXNTZXQKCiAgICAgICAgY2xpZW50UmVkaXJlY3RVcmlzTGlzdCA9IGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzLmdldCgiY2xpZW50X3JlZGlyZWN0X3VyaXMiKS5nZXRWYWx1ZTIoKQogICAgICAgIGlmIFN0cmluZ0hlbHBlci5pc0VtcHR5KGNsaWVudFJlZGlyZWN0VXJpc0xpc3QpOgogICAgICAgICAgICBwcmludCAiQ2xpZW50IHJlZ2lzdHJhdGlvbi4gVGhlIHByb3BlcnR5IGNsaWVudF9yZWRpcmVjdF91cmlzIGlzIGVtcHR5IgogICAgICAgICAgICByZXR1cm4gY2xpZW50UmVkaXJlY3RVcmlzU2V0ICAgIAoKICAgICAgICBjbGllbnRSZWRpcmVjdFVyaXNBcnJheSA9IFN0cmluZ0hlbHBlci5zcGxpdChjbGllbnRSZWRpcmVjdFVyaXNMaXN0LCAiLCIpCiAgICAgICAgaWYgQXJyYXlIZWxwZXIuaXNFbXB0eShjbGllbnRSZWRpcmVjdFVyaXNBcnJheSk6CiAgICAgICAgICAgIHByaW50ICJDbGllbnQgcmVnaXN0cmF0aW9uLiBObyBjbGllbnRzIHNwZWNpZmllZCBpbiBjbGllbnRfcmVkaXJlY3RfdXJpcyBwcm9wZXJ0eSIKICAgICAgICAgICAgcmV0dXJuIGNsaWVudFJlZGlyZWN0VXJpc1NldAogICAgICAgIAogICAgICAgICMgQ29udmVydCB0byBIYXNoU2V0IHRvIHF1aWNrIHNlYXJjaAogICAgICAgIGkgPSAwCiAgICAgICAgY291bnQgPSBsZW4oY2xpZW50UmVkaXJlY3RVcmlzQXJyYXkpCiAgICAgICAgd2hpbGUgaSA8IGNvdW50OgogICAgICAgICAgICB1cmlzID0gY2xpZW50UmVkaXJlY3RVcmlzQXJyYXlbaV0KICAgICAgICAgICAgY2xpZW50UmVkaXJlY3RVcmlzU2V0LmFkZCh1cmlzKQogICAgICAgICAgICBpID0gaSArIDEKCiAgICAgICAgcmV0dXJuIGNsaWVudFJlZGlyZWN0VXJpc1NldAo=
oxScriptType: client_registration
programmingLanguage: python

dn: inum=09A0-93D6,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Twilio SMS authentication module
displayName: twilio_sms
oxEnabled: false
inum: 09A0-93D6
oxConfigurationProperty: {"value1":"twilio_sid","value2":"","description":"Twilio account SID"}
oxConfigurationProperty: {"value1":"twilio_token","value2":"","description":"Twilio API token"}
oxConfigurationProperty: {"value1":"from_number","value2":"","description":"Twilio phone number with SMS capabilities"}
oxLevel: 50
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=09A0-93D7,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: SMPP SMS authentication module
displayName: smpp
oxEnabled: false
inum: 09A0-93D7
oxConfigurationProperty: {"value1":"smpp_server","value2":"","description":"IP or FQDN of SMPP server"}
oxConfigurationProperty: {"value1":"smpp_port","value2":"","description":"TCP port of the SMPP server"}
oxConfigurationProperty: {"value1":"system_id","value2":"","description":"Use if SMPP server requires authentication"}
oxConfigurationProperty: {"value1":"password","value2":"","description":"Use if SMPP server requires authentication"}
oxConfigurationProperty: {"value1":"source_addr_ton","value2":"","description":"Type of number, eg ALPHANUMERIC, INTERNATIONAL"}
oxConfigurationProperty: {"value1":"source_addr","value2":"","description":"From number/name"}
oxLevel: 45
oxModuleProperty: {"value1":"usage_type","value2":"interactive","description":""}
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: 
oxScriptType: person_authentication
programmingLanguage: python

dn: inum=DAA9-B789,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Sample Application Session script
displayName: application_session
oxEnabled: false
inum: DAA9-B789
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE2LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuc2Vzc2lvbiBpbXBvcnQgQXBwbGljYXRpb25TZXNzaW9uVHlwZQpmcm9tIG9yZy5nbHV1LnNlcnZpY2UuY2RpLnV0aWwgaW1wb3J0IENkaVV0aWwKZnJvbSBvcmcuZ2x1dS5wZXJzaXN0IGltcG9ydCBQZXJzaXN0ZW5jZUVudHJ5TWFuYWdlcgpmcm9tIG9yZy5nbHV1Lm94YXV0aC5tb2RlbC5jb25maWcgaW1wb3J0IFN0YXRpY0NvbmZpZ3VyYXRpb24KZnJvbSBvcmcuZ2x1dS5veGF1dGgubW9kZWwubGRhcCBpbXBvcnQgVG9rZW5MZGFwCmZyb20gamF2YXguZmFjZXMuYXBwbGljYXRpb24gaW1wb3J0IEZhY2VzTWVzc2FnZQpmcm9tIG9yZy5nbHV1LmpzZjIubWVzc2FnZSBpbXBvcnQgRmFjZXNNZXNzYWdlcwpmcm9tIG9yZy5nbHV1LnV0aWwgaW1wb3J0IFN0cmluZ0hlbHBlciwgQXJyYXlIZWxwZXIKZnJvbSBvcmcuZ2x1dS5veGF1dGgubW9kZWwuY29uZmlnIGltcG9ydCBDb25zdGFudHMKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IEFycmF5cywgQXJyYXlMaXN0CmZyb20gb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuZXh0ZXJuYWwuc2Vzc2lvbiBpbXBvcnQgU2Vzc2lvbkV2ZW50VHlwZQoKaW1wb3J0IGphdmEKCmNsYXNzIEFwcGxpY2F0aW9uU2Vzc2lvbihBcHBsaWNhdGlvblNlc3Npb25UeXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkFwcGxpY2F0aW9uIHNlc3Npb24uIEluaXRpYWxpemF0aW9uIgoKICAgICAgICBzZWxmLmVudHJ5TWFuYWdlciA9IENkaVV0aWwuYmVhbihQZXJzaXN0ZW5jZUVudHJ5TWFuYWdlcikKICAgICAgICBzZWxmLnN0YXRpY0NvbmZpZ3VyYXRpb24gPSBDZGlVdGlsLmJlYW4oU3RhdGljQ29uZmlndXJhdGlvbikKCiAgICAgICAgcHJpbnQgIkFwcGxpY2F0aW9uIHNlc3Npb24uIEluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSIKCiAgICAgICAgcmV0dXJuIFRydWUgICAKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkFwcGxpY2F0aW9uIHNlc3Npb24uIERlc3Ryb3kiCiAgICAgICAgcHJpbnQgIkFwcGxpY2F0aW9uIHNlc3Npb24uIERlc3Ryb3llZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUgICAKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICAjIENhbGxlZCBlYWNoIHRpbWUgc3BlY2lmaWMgc2Vzc2lvbiBldmVudCBvY2N1cnMKICAgICMgZXZlbnQgaXMgb3JnLmdsdXUub3hhdXRoLnNlcnZpY2UuZXh0ZXJuYWwuc2Vzc2lvbi5TZXNzaW9uRXZlbnQKICAgIGRlZiBvbkV2ZW50KHNlbGYsIGV2ZW50KToKICAgICAgICBpZiBldmVudC5nZXRUeXBlKCkgPT0gU2Vzc2lvbkV2ZW50VHlwZS5BVVRIRU5USUNBVEVEOgogICAgICAgICAgICBwcmludCAiU2Vzc2lvbiBpcyBhdXRoZW50aWNhdGVkLCBzZXNzaW9uOiAiICsgZXZlbnQuZ2V0U2Vzc2lvbklkKCkuZ2V0SWQoKQogICAgICAgIHJldHVybgoKICAgICMgQXBwbGljYXRpb24gY2FsbHMgaXQgYXQgc3RhcnQgc2Vzc2lvbiByZXF1ZXN0IHRvIGFsbG93IG5vdGlmeSAzcmQgcGFydCBzeXN0ZW1zCiAgICAjICAgaHR0cFJlcXVlc3QgaXMgamF2YXguc2VydmxldC5odHRwLkh0dHBTZXJ2bGV0UmVxdWVzdAogICAgIyAgIHNlc3Npb25JZCBpcyBvcmcuZ2x1dS5veGF1dGgubW9kZWwuY29tbW9uLlNlc3Npb25JZAogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiBzdGFydFNlc3Npb24oc2VsZiwgaHR0cFJlcXVlc3QsIHNlc3Npb25JZCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJBcHBsaWNhdGlvbiBzZXNzaW9uLiBTdGFydGluZyBleHRlcm5hbCBzZXNzaW9uIgoKICAgICAgICB1c2VyX25hbWUgPSBzZXNzaW9uSWQuZ2V0U2Vzc2lvbkF0dHJpYnV0ZXMoKS5nZXQoQ29uc3RhbnRzLkFVVEhFTlRJQ0FURURfVVNFUikKCiAgICAgICAgZmlyc3Rfc2Vzc2lvbiA9IHNlbGYuaXNGaXJzdFNlc3Npb24odXNlcl9uYW1lKQogICAgICAgIGlmIG5vdCBmaXJzdF9zZXNzaW9uOgogICAgICAgICAgICBmYWNlc01lc3NhZ2VzID0gQ2RpVXRpbC5iZWFuKEZhY2VzTWVzc2FnZXMpCiAgICAgICAgICAgIGZhY2VzTWVzc2FnZXMuYWRkKEZhY2VzTWVzc2FnZS5TRVZFUklUWV9FUlJPUiwgIlBsZWFzZSwgZW5kIGFjdGl2ZSBzZXNzaW9uIGZpcnN0ISIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBwcmludCAiQXBwbGljYXRpb24gc2Vzc2lvbi4gRXh0ZXJuYWwgc2Vzc2lvbiBzdGFydGVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICMgQXBwbGljYXRpb24gY2FsbHMgaXQgYXQgZW5kIHNlc3Npb24gcmVxdWVzdCB0byBhbGxvdyBub3RpZnkgM3JkIHBhcnQgc3lzdGVtcwogICAgIyAgIGh0dHBSZXF1ZXN0IGlzIGphdmF4LnNlcnZsZXQuaHR0cC5IdHRwU2VydmxldFJlcXVlc3QKICAgICMgICBzZXNzaW9uSWQgaXMgb3JnLmdsdXUub3hhdXRoLm1vZGVsLmNvbW1vbi5TZXNzaW9uSWQKICAgICMgICBjb25maWd1cmF0aW9uQXR0cmlidXRlcyBpcyBqYXZhLnV0aWwuTWFwPFN0cmluZywgU2ltcGxlQ3VzdG9tUHJvcGVydHk+CiAgICBkZWYgZW5kU2Vzc2lvbihzZWxmLCBodHRwUmVxdWVzdCwgc2Vzc2lvbklkLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkFwcGxpY2F0aW9uIHNlc3Npb24uIFN0YXJ0aW5nIGV4dGVybmFsIHNlc3Npb24gZW5kIgoKICAgICAgICBwcmludCAiQXBwbGljYXRpb24gc2Vzc2lvbi4gRXh0ZXJuYWwgc2Vzc2lvbiBlbmRlZCBzdWNjZXNzZnVsbHkiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgaXNGaXJzdFNlc3Npb24oc2VsZiwgdXNlcl9uYW1lKToKICAgICAgICB0b2tlbkxkYXAgPSBUb2tlbkxkYXAoKQogICAgICAgIHRva2VuTGRhcC5zZXREbihzZWxmLnN0YXRpY0NvbmZpZ3VyYXRpb24uZ2V0QmFzZURuKCkuZ2V0Q2xpZW50cygpKQogICAgICAgIHRva2VuTGRhcC5zZXRVc2VySWQodXNlcl9uYW1lKQoKICAgICAgICB0b2tlbkxkYXBMaXN0ID0gc2VsZi5lbnRyeU1hbmFnZXIuZmluZEVudHJpZXModG9rZW5MZGFwLCAxKQogICAgICAgIHByaW50ICJBcHBsaWNhdGlvbiBzZXNzaW9uLiBpc0ZpcnN0U2Vzc2lvbi4gR2V0IHJlc3VsdDogJyVzJyIgJSB0b2tlbkxkYXBMaXN0CgogICAgICAgIGlmICh0b2tlbkxkYXBMaXN0ICE9IE5vbmUpIGFuZCAodG9rZW5MZGFwTGlzdC5zaXplKCkgPiAwKToKICAgICAgICAgICAgcHJpbnQgIkFwcGxpY2F0aW9uIHNlc3Npb24uIGlzRmlyc3RTZXNzaW9uOiBGYWxzZSIKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIHByaW50ICJBcHBsaWNhdGlvbiBzZXNzaW9uLiBpc0ZpcnN0U2Vzc2lvbjogVHJ1ZSIKICAgICAgICByZXR1cm4gVHJ1ZQo=
oxScriptType: application_session
programmingLanguage: python

dn: inum=DAA9-BA60,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Consent Gathering script
displayName: consent_gathering
oxEnabled: false
inum: DAA9-BA60
oxLevel: 10
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE3LCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5zZXJ2aWNlLmNkaS51dGlsIGltcG9ydCBDZGlVdGlsCmZyb20gb3JnLmdsdXUub3hhdXRoLnNlY3VyaXR5IGltcG9ydCBJZGVudGl0eQpmcm9tIG9yZy5nbHV1Lm1vZGVsLmN1c3RvbS5zY3JpcHQudHlwZS5hdXRoeiBpbXBvcnQgQ29uc2VudEdhdGhlcmluZ1R5cGUKZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIKCmltcG9ydCBqYXZhCmltcG9ydCByYW5kb20KCmNsYXNzIENvbnNlbnRHYXRoZXJpbmcoQ29uc2VudEdhdGhlcmluZ1R5cGUpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkNvbnNlbnQtR2F0aGVyaW5nLiBJbml0aWFsaXppbmcgLi4uIgogICAgICAgIHByaW50ICJDb25zZW50LUdhdGhlcmluZy4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiQ29uc2VudC1HYXRoZXJpbmcuIERlc3Ryb3lpbmcgLi4uIgogICAgICAgIHByaW50ICJDb25zZW50LUdhdGhlcmluZy4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMQoKICAgICMgTWFpbiBjb25zZW50LWdhdGhlciBtZXRob2QuIE11c3QgcmV0dXJuIFRydWUgKGlmIGdhdGhlcmluZyBwZXJmb3JtZWQgc3VjY2Vzc2Z1bGx5KSBvciBGYWxzZSAoaWYgZmFpbCkuCiAgICAjIEFsbCB1c2VyIGVudGVyZWQgdmFsdWVzIGNhbiBiZSBhY2Nlc3MgdmlhIE1hcDxTdHJpbmcsIFN0cmluZz4gY29udGV4dC5nZXRQYWdlQXR0cmlidXRlcygpCiAgICBkZWYgYXV0aG9yaXplKHNlbGYsIHN0ZXAsIGNvbnRleHQpOiAjIGNvbnRleHQgaXMgcmVmZXJlbmNlIG9mIG9yZy5nbHV1Lm94YXV0aC5zZXJ2aWNlLmV4dGVybmFsLmNvbnRleHQuQ29uc2VudEdhdGhlcmluZ0NvbnRleHQKICAgICAgICBwcmludCAiQ29uc2VudC1HYXRoZXJpbmcuIEF1dGhvcml6aW5nLi4uIgoKICAgICAgICBpZiBzdGVwID09IDE6CiAgICAgICAgICAgIGFsbG93QnV0dG9uID0gY29udGV4dC5nZXRSZXF1ZXN0UGFyYW1ldGVycygpLmdldCgiYXV0aG9yaXplRm9ybTphbGxvd0J1dHRvbiIpCiAgICAgICAgICAgIGlmIChhbGxvd0J1dHRvbiAhPSBOb25lKSBhbmQgKGxlbihhbGxvd0J1dHRvbikgPiAwKToKICAgICAgICAgICAgICAgIHByaW50ICJDb25zZW50LUdhdGhlcmluZy4gQXV0aG9yaXphdGlvbiBzdWNjZXNzIGZvciBzdGVwIDEiCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICAgICAgcHJpbnQgIkNvbnNlbnQtR2F0aGVyaW5nLiBBdXRob3JpemF0aW9uIGRlY2xpbmVkIGZvciBzdGVwIDEiCiAgICAgICAgZWxpZiBzdGVwID09IDI6CiAgICAgICAgICAgIGFsbG93QnV0dG9uID0gY29udGV4dC5nZXRSZXF1ZXN0UGFyYW1ldGVycygpLmdldCgiYXV0aG9yaXplRm9ybTphbGxvd0J1dHRvbiIpCiAgICAgICAgICAgIGlmIChhbGxvd0J1dHRvbiAhPSBOb25lKSBhbmQgKGxlbihhbGxvd0J1dHRvbikgPiAwKToKICAgICAgICAgICAgICAgIHByaW50ICJDb25zZW50LUdhdGhlcmluZy4gQXV0aG9yaXphdGlvbiBzdWNjZXNzIGZvciBzdGVwIDIiCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICAgICAgcHJpbnQgIkNvbnNlbnQtR2F0aGVyaW5nLiBBdXRob3JpemF0aW9uIGRlY2xpbmVkIGZvciBzdGVwIDIiCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBnZXROZXh0U3RlcChzZWxmLCBzdGVwLCBjb250ZXh0KToKICAgICAgICByZXR1cm4gLTEKCiAgICBkZWYgcHJlcGFyZUZvclN0ZXAoc2VsZiwgc3RlcCwgY29udGV4dCk6CiAgICAgICAgaWYgbm90IGNvbnRleHQuaXNBdXRoZW50aWNhdGVkKCk6CiAgICAgICAgICAgIHByaW50ICJVc2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkLiBBYm9ydGluZyBhdXRob3JpemF0aW9uIGZsb3cgLi4uIgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgaWYgc3RlcCA9PSAyOgogICAgICAgICAgICBwYWdlQXR0cmlidXRlcyA9IGNvbnRleHQuZ2V0UGFnZUF0dHJpYnV0ZXMoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBHZW5lcmF0ZSByYW5kb20gY29uc2VudCBnYXRoZXJpbmcgcmVxdWVzdAogICAgICAgICAgICBjb25zZW50UmVxdWVzdCA9ICJSZXF1ZXN0ZWQgdHJhbnNhY3Rpb24gIyVzIGFwcHJvdmFsIGZvciB0aGUgYW1vdW50IG9mIHN1bSAkICVzLjAwIiAlICggcmFuZG9tLnJhbmRpbnQoMTAwMDAwLCAxMDAwMDAwKSwgcmFuZG9tLnJhbmRpbnQoMSwgMTAwKSApCiAgICAgICAgICAgIHBhZ2VBdHRyaWJ1dGVzLnB1dCgiY29uc2VudF9yZXF1ZXN0IiwgY29uc2VudFJlcXVlc3QpCiAgICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIGdldFN0ZXBzQ291bnQoc2VsZiwgY29udGV4dCk6CiAgICAgICAgcmV0dXJuIDExCgogICAgZGVmIGdldFBhZ2VGb3JTdGVwKHNlbGYsIHN0ZXAsIGNvbnRleHQpOgogICAgICAgIGlmIHN0ZXAgPT0gMToKICAgICAgICAgICAgcmV0dXJuICIvYXV0aHovYXV0aG9yaXplLnhodG1sIgogICAgICAgIGVsaWYgc3RlcCA9PSAyOgogICAgICAgICAgICByZXR1cm4gIi9hdXRoei90cmFuc2FjdGlvbi54aHRtbCIKCiAgICAgICAgcmV0dXJuICIiCg==
oxScriptType: consent_gathering
programmingLanguage: python

dn: inum=8AF7.D82A,ou=scripts,o=gluu
objectClass: oxCustomScript
objectClass: top
displayName: persistence_extension
inum: 8AF7.D82A
oxEnabled: false
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDIwLCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5zZXJ2aWNlLmNkaS51dGlsIGltcG9ydCBDZGlVdGlsCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLnBlcnNpc3RlbmNlIGltcG9ydCBQZXJzaXN0ZW5jZVR5cGUKZnJvbSBvcmcuZ2x1dS51dGlsIGltcG9ydCBTdHJpbmdIZWxwZXIKZnJvbSBvcmcuZ2x1dS5wZXJzaXN0Lm9wZXJhdGlvbi5hdXRoIGltcG9ydCBQYXNzd29yZEVuY3J5cHRpb25IZWxwZXIKZnJvbSBvcmcuZ2x1dS5wZXJzaXN0Lm9wZXJhdGlvbi5hdXRoIGltcG9ydCBQYXNzd29yZEVuY3J5cHRpb25NZXRob2QKCmltcG9ydCBqYXZhCgpjbGFzcyBQZXJzaXN0ZW5jZUV4dGVuc2lvbihQZXJzaXN0ZW5jZVR5cGUpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjdXJyZW50VGltZU1pbGxpcyk6CiAgICAgICAgc2VsZi5jdXJyZW50VGltZU1pbGxpcyA9IGN1cnJlbnRUaW1lTWlsbGlzCgogICAgZGVmIGluaXQoc2VsZiwgY3VzdG9tU2NyaXB0LCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIlBlcnNpc3RlbmNlIGV4dGVuc2lvbi4gSW5pdGlhbGl6YXRpb24iCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIlBlcnNpc3RlbmNlIGV4dGVuc2lvbi4gRGVzdHJveSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxMQoKICAgIGRlZiBvbkFmdGVyQ3JlYXRlKHNlbGYsIGNvbnRleHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiUGVyc2lzdGVuY2UgZXh0ZW5zaW9uLiBNZXRob2Q6IG9uQWZ0ZXJDcmVhdGUiCgogICAgZGVmIG9uQWZ0ZXJEZXN0cm95KHNlbGYsIGNvbnRleHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiUGVyc2lzdGVuY2UgZXh0ZW5zaW9uLiBNZXRob2Q6IG9uQWZ0ZXJEZXN0cm95IgoKICAgIGRlZiBjcmVhdGVIYXNoZWRQYXNzd29yZChzZWxmLCBjcmVkZW50aWFsKToKICAgICAgICBwcmludCAiUGVyc2lzdGVuY2UgZXh0ZW5zaW9uLiBNZXRob2Q6IGNyZWF0ZUhhc2hlZFBhc3N3b3JkIgoKICAgICAgICBoYXNoZWRfcGFzc3dvcmQ9IFBhc3N3b3JkRW5jcnlwdGlvbkhlbHBlci5jcmVhdGVTdG9yYWdlUGFzc3dvcmQoY3JlZGVudGlhbCwgUGFzc3dvcmRFbmNyeXB0aW9uTWV0aG9kLkhBU0hfTUVUSE9EX1BLQ1M1UzIpCgogICAgICAgIHJldHVybiBoYXNoZWRfcGFzc3dvcmQKCiAgICBkZWYgY29tcGFyZUhhc2hlZFBhc3N3b3JkcyhzZWxmLCBjcmVkZW50aWFsLCBzdG9yZWRDcmVkZW50aWFsKToKICAgICAgICBwcmludCAiUGVyc2lzdGVuY2UgZXh0ZW5zaW9uLiBNZXRob2Q6IGNvbXBhcmVIYXNoZWRQYXNzd29yZHMiCiAgICAgICAgCiAgICAgICAgYXV0aF9yZXN1bHQgPSBQYXNzd29yZEVuY3J5cHRpb25IZWxwZXIuY29tcGFyZUNyZWRlbnRpYWxzKGNyZWRlbnRpYWwsIHN0b3JlZENyZWRlbnRpYWwpCgogICAgICAgIHJldHVybiBhdXRoX3Jlc3VsdCAK
oxScriptType: persistence_extension
programmingLanguage: python

dn: inum=8AF7.D82B,ou=scripts,o=gluu
objectClass: oxCustomScript
objectClass: top
displayName: idp
inum: 8AF7.D82B
oxEnabled: false
oxLevel: 100
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveFNoaWJib2xldGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDIwLCBHbHV1CiMKIyBBdXRob3I6IFl1cml5IE1vdmNoYW4KIwoKZnJvbSBvcmcuZ2x1dS5tb2RlbC5jdXN0b20uc2NyaXB0LnR5cGUuaWRwIGltcG9ydCBJZHBUeXBlCmZyb20gb3JnLmdsdXUudXRpbCBpbXBvcnQgU3RyaW5nSGVscGVyCmZyb20gb3JnLmdsdXUuaWRwLmV4dGVybmFsYXV0aCBpbXBvcnQgQXV0aGVudGljYXRlZE5hbWVUcmFuc2xhdG9yCmZyb20gbmV0LnNoaWJib2xldGguaWRwLmF1dGhuLnByaW5jaXBhbCBpbXBvcnQgVXNlcm5hbWVQcmluY2lwYWwsIElkUEF0dHJpYnV0ZVByaW5jaXBhbApmcm9tIG5ldC5zaGliYm9sZXRoLmlkcC5hdXRobiBpbXBvcnQgRXh0ZXJuYWxBdXRoZW50aWNhdGlvbgpmcm9tIG5ldC5zaGliYm9sZXRoLmlkcC5hdHRyaWJ1dGUgaW1wb3J0IElkUEF0dHJpYnV0ZSwgU3RyaW5nQXR0cmlidXRlVmFsdWUKZnJvbSBuZXQuc2hpYmJvbGV0aC5pZHAuYXV0aG4uY29udGV4dCBpbXBvcnQgQXV0aGVudGljYXRpb25Db250ZXh0LCBFeHRlcm5hbEF1dGhlbnRpY2F0aW9uQ29udGV4dApmcm9tIG5ldC5zaGliYm9sZXRoLmlkcC5hdHRyaWJ1dGUuY29udGV4dCBpbXBvcnQgQXR0cmlidXRlQ29udGV4dApmcm9tIGphdmF4LnNlY3VyaXR5LmF1dGggaW1wb3J0IFN1YmplY3QKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IENvbGxlY3Rpb25zLCBIYXNoU2V0LCBBcnJheUxpc3QsIEFycmF5cwoKaW1wb3J0IGphdmEKCmNsYXNzIElkcEV4dGVuc2lvbihJZHBUeXBlKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgY3VycmVudFRpbWVNaWxsaXMpOgogICAgICAgIHNlbGYuY3VycmVudFRpbWVNaWxsaXMgPSBjdXJyZW50VGltZU1pbGxpcwoKICAgIGRlZiBpbml0KHNlbGYsIGN1c3RvbVNjcmlwdCwgY29uZmlndXJhdGlvbkF0dHJpYnV0ZXMpOgogICAgICAgIHByaW50ICJJZHAgZXh0ZW5zaW9uLiBJbml0aWFsaXphdGlvbiIKICAgICAgICAKICAgICAgICBzZWxmLmRlZmF1bHROYW1lVHJhbnNsYXRvciA9IEF1dGhlbnRpY2F0ZWROYW1lVHJhbnNsYXRvcigpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZGVzdHJveShzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIklkcCBleHRlbnNpb24uIERlc3Ryb3kiCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgZ2V0QXBpVmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gMTEKCiAgICAjIFRyYW5zbGF0ZSBhdHRyaWJ1dGVzIGZyb20gdXNlciBwcm9maWxlCiAgICAjICAgY29udGV4dCBpcyBvcmcuZ2x1dS5pZHAuZXh0ZXJuYWxhdXRoLlRyYW5zbGF0ZUF0dHJpYnV0ZXNDb250ZXh0IChodHRwczovL2dpdGh1Yi5jb20vR2x1dUZlZGVyYXRpb24vc2hpYi1veGF1dGgtYXV0aG4zL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvb3JnL2dsdXUvaWRwL2V4dGVybmFsYXV0aC9UcmFuc2xhdGVBdHRyaWJ1dGVzQ29udGV4dC5qYXZhKQogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiB0cmFuc2xhdGVBdHRyaWJ1dGVzKHNlbGYsIGNvbnRleHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiSWRwIGV4dGVuc2lvbi4gTWV0aG9kOiB0cmFuc2xhdGVBdHRyaWJ1dGVzIgogICAgICAgIAogICAgICAgICMgUmV0dXJuIEZhbHNlIHRvIHVzZSBkZWZhdWx0IG1ldGhvZAogICAgICAgICNyZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICByZXF1ZXN0ID0gY29udGV4dC5nZXRSZXF1ZXN0KCkKICAgICAgICB1c2VyUHJvZmlsZSA9IGNvbnRleHQuZ2V0VXNlclByb2ZpbGUoKQogICAgICAgIHByaW5jaXBhbEF0dHJpYnV0ZXMgPSBzZWxmLmRlZmF1bHROYW1lVHJhbnNsYXRvci5wcm9kdWNlSWRwQXR0cmlidXRlUHJpbmNpcGFsKHVzZXJQcm9maWxlLmdldEF0dHJpYnV0ZXMoKSkKICAgICAgICBwcmludCAiSWRwIGV4dGVuc2lvbi4gQ29udmVydGVkIHVzZXIgcHJvZmlsZTogJyVzJyB0byBhdHRyaWJ1dGUgcHJpbmNpcGFsOiAnJXMnIiAlICh1c2VyUHJvZmlsZSwgcHJpbmNpcGFsQXR0cmlidXRlcykKCiAgICAgICAgaWYgbm90IHByaW5jaXBhbEF0dHJpYnV0ZXMuaXNFbXB0eSgpOgogICAgICAgICAgICBwcmludCAiSWRwIGV4dGVuc2lvbi4gRm91bmQgYXR0cmlidXRlcyBmcm9tIG94QXV0aC4gUHJvY2Vzc2luZy4uLiIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU3RhcnQ6IEN1c3RvbSBwYXJ0CiAgICAgICAgICAgICMgQWRkIGdpdmVuTmFtZSBhdHRyaWJ1dGUKICAgICAgICAgICAgZ2l2ZW5OYW1lQXR0cmlidXRlID0gSWRQQXR0cmlidXRlKCJveEVucm9sbG1lbnRDb2RlIikKICAgICAgICAgICAgZ2l2ZW5OYW1lQXR0cmlidXRlLnNldFZhbHVlcyhBcnJheUxpc3QoQXJyYXlzLmFzTGlzdChTdHJpbmdBdHRyaWJ1dGVWYWx1ZSgiRHVtbXkiKSkpKQogICAgICAgICAgICBwcmluY2lwYWxBdHRyaWJ1dGVzLmFkZChJZFBBdHRyaWJ1dGVQcmluY2lwYWwoZ2l2ZW5OYW1lQXR0cmlidXRlKSkKICAgICAgICAgICAgcHJpbnQgIklkcCBleHRlbnNpb24uIFVwZGF0ZWQgYXR0cmlidXRlIHByaW5jaXBhbDogJyVzJyIgJSBwcmluY2lwYWxBdHRyaWJ1dGVzCiAgICAgICAgICAgICMgRW5kOiBDdXN0b20gcGFydAoKICAgICAgICAgICAgcHJpbmNpcGFscyA9IEhhc2hTZXQoKQogICAgICAgICAgICBwcmluY2lwYWxzLmFkZEFsbChwcmluY2lwYWxBdHRyaWJ1dGVzKQogICAgICAgICAgICBwcmluY2lwYWxzLmFkZChVc2VybmFtZVByaW5jaXBhbCh1c2VyUHJvZmlsZS5nZXRJZCgpKSkKCiAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKEV4dGVybmFsQXV0aGVudGljYXRpb24uU1VCSkVDVF9LRVksIFN1YmplY3QoRmFsc2UsIENvbGxlY3Rpb25zLnNpbmdsZXRvbihwcmluY2lwYWxzKSwKICAgICAgICAgICAgICAgIENvbGxlY3Rpb25zLmVtcHR5U2V0KCksIENvbGxlY3Rpb25zLmVtcHR5U2V0KCkpKQoKICAgICAgICAgICAgcHJpbnQgIkNyZWF0ZWQgYW4gSWRQIHN1YmplY3QgaW5zdGFuY2Ugd2l0aCBwcmluY2lwYWxzIGNvbnRhaW5pbmcgYXR0cmlidXRlcyBmb3I6ICclcyciICUgdXNlclByb2ZpbGUuZ2V0SWQoKQoKICAgICAgICAgICAgaWYgRmFsc2U6CiAgICAgICAgICAgICAgICBpZHBBdHRyaWJ1dGVzID0gQXJyYXlMaXN0KCkKICAgICAgICAgICAgICAgIGZvciBwcmluY2lwYWxBdHRyaWJ1dGUgaW4gcHJpbmNpcGFsQXR0cmlidXRlczoKICAgICAgICAgICAgICAgICAgICBpZHBBdHRyaWJ1dGVzLmFkZChwcmluY2lwYWxBdHRyaWJ1dGUuZ2V0QXR0cmlidXRlKCkpCiAgICAKICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKEV4dGVybmFsQXV0aGVudGljYXRpb24uQVRUUklCVVRFU19LRVksIGlkcEF0dHJpYnV0ZXMpCiAgICAKICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uS2V5ID0gY29udGV4dC5nZXRBdXRoZW50aWNhdGlvbktleSgpCiAgICAgICAgICAgICAgICBwcm9maWxlUmVxdWVzdENvbnRleHQgPSBFeHRlcm5hbEF1dGhlbnRpY2F0aW9uLmdldFByb2ZpbGVSZXF1ZXN0Q29udGV4dChhdXRoZW50aWNhdGlvbktleSwgcmVxdWVzdCkKICAgICAgICAgICAgICAgIGF1dGhDb250ZXh0ID0gcHJvZmlsZVJlcXVlc3RDb250ZXh0LmdldFN1YmNvbnRleHQoQXV0aGVudGljYXRpb25Db250ZXh0KQogICAgICAgICAgICAgICAgZXh0Q29udGV4dCA9IGF1dGhDb250ZXh0LmdldFN1YmNvbnRleHQoRXh0ZXJuYWxBdXRoZW50aWNhdGlvbkNvbnRleHQpCiAgICAKICAgICAgICAgICAgICAgIGV4dENvbnRleHQuc2V0U3ViamVjdChTdWJqZWN0KEZhbHNlLCBDb2xsZWN0aW9ucy5zaW5nbGV0b24ocHJpbmNpcGFscyksIENvbGxlY3Rpb25zLmVtcHR5U2V0KCksIENvbGxlY3Rpb25zLmVtcHR5U2V0KCkpKTsKICAgIAogICAgICAgICAgICAgICAgZXh0Q29udGV4dC5nZXRTdWJjb250ZXh0KEF0dHJpYnV0ZUNvbnRleHQsIFRydWUpLnNldFVuZmlsdGVyZWRJZFBBdHRyaWJ1dGVzKGlkcEF0dHJpYnV0ZXMpCiAgICAgICAgICAgICAgICBleHRDb250ZXh0LmdldFN1YmNvbnRleHQoQXR0cmlidXRlQ29udGV4dCkuc2V0SWRQQXR0cmlidXRlcyhpZHBBdHRyaWJ1dGVzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50ICJObyBhdHRyaWJ1dGVzIHJlbGVhc2VkIGZyb20gb3hBdXRoLiBDcmVhdGluZyBhbiBJZFAgcHJpbmNpcGFsIGZvcjogJyVzJyIgJSB1c2VyUHJvZmlsZS5nZXRJZCgpCiAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKEV4dGVybmFsQXV0aGVudGljYXRpb24uUFJJTkNJUEFMX05BTUVfS0VZLCB1c2VyUHJvZmlsZS5nZXRJZCgpKQoKICAgICAgICAjUmV0dXJuIFRydWUgdG8gc3BlY2lmeSB0aGF0IGRlZmF1bHQgbWV0aG9kIGlzIG5vdCBuZWVkZWQKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIFVwZGF0ZSBhdHRyaWJ1dGVzIGJlZm9yZSByZWxlYXNpbmcgdGhlbQogICAgIyAgIGNvbnRleHQgaXMgb3JnLmdsdXUuaWRwLmNvbnNlbnQucHJvY2Vzc29yLlBvc3RQcm9jZXNzQXR0cmlidXRlc0NvbnRleHQgKGh0dHBzOi8vZ2l0aHViLmNvbS9HbHV1RmVkZXJhdGlvbi9zaGliLW94YXV0aC1hdXRobjMvYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvZ2x1dS9pZHAvY29uc2VudC9wcm9jZXNzb3IvUG9zdFByb2Nlc3NBdHRyaWJ1dGVzQ29udGV4dC5qYXZhKQogICAgIyAgIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzIGlzIGphdmEudXRpbC5NYXA8U3RyaW5nLCBTaW1wbGVDdXN0b21Qcm9wZXJ0eT4KICAgIGRlZiB1cGRhdGVBdHRyaWJ1dGVzKHNlbGYsIGNvbnRleHQsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiSWRwIGV4dGVuc2lvbi4gTWV0aG9kOiB1cGRhdGVBdHRyaWJ1dGVzIgogICAgICAgIHJldHVybiBUcnVlCg==
oxScriptType: idp
programmingLanguage: python

dn: inum=C1BA-C1BA,ou=scripts,o=gluu
objectClass: top
objectClass: oxCustomScript
description: Firebase notification sender
displayName: firebase_ciba_end_user_notification
oxEnabled: false
inum: C1BA-C1BA
oxLevel: 10
oxModuleProperty: {"value1":"location_type","value2":"ldap","description":""}
oxRevision: 1
oxScript:: IyBveEF1dGggaXMgYXZhaWxhYmxlIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoMjAwOCkuIFNlZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIGZvciBmdWxsIHRleHQuCiMgQ29weXJpZ2h0IChjKSAyMDE4LCBHbHV1CiMKIyBBdXRob3I6IE1pbHRvbiBCTwojCiMKCmZyb20gb3JnLmdsdXUub3hhdXRoLmNsaWVudC5mY20gaW1wb3J0IEZpcmViYXNlQ2xvdWRNZXNzYWdpbmdSZXNwb25zZQpmcm9tIG9yZy5nbHV1Lm94YXV0aC5jbGllbnQuZmNtIGltcG9ydCBGaXJlYmFzZUNsb3VkTWVzc2FnaW5nQ2xpZW50CmZyb20gb3JnLmdsdXUub3hhdXRoLmNsaWVudC5mY20gaW1wb3J0IEZpcmViYXNlQ2xvdWRNZXNzYWdpbmdSZXF1ZXN0CmZyb20gb3JnLmdsdXUub3hhdXRoLnV0aWwgaW1wb3J0IFJlZGlyZWN0VXJpCmZyb20gb3JnLmdsdXUubW9kZWwuY3VzdG9tLnNjcmlwdC50eXBlLmNpYmEgaW1wb3J0IEVuZFVzZXJOb3RpZmljYXRpb25UeXBlCmZyb20gamF2YS5sYW5nIGltcG9ydCBTdHJpbmcKZnJvbSBqYXZhLnV0aWwgaW1wb3J0IFVVSUQKCmNsYXNzIEVuZFVzZXJOb3RpZmljYXRpb24oRW5kVXNlck5vdGlmaWNhdGlvblR5cGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGN1cnJlbnRUaW1lTWlsbGlzKToKICAgICAgICBzZWxmLmN1cnJlbnRUaW1lTWlsbGlzID0gY3VycmVudFRpbWVNaWxsaXMKCiAgICBkZWYgaW5pdChzZWxmLCBjb25maWd1cmF0aW9uQXR0cmlidXRlcyk6CiAgICAgICAgcHJpbnQgIkZpcmViYXNlIEVuZFVzZXJOb3RpZmljYXRpb24gc2NyaXB0LiBJbml0aWFsaXppbmcgLi4uIgogICAgICAgIHByaW50ICJGaXJlYmFzZSBFbmRVc2VyTm90aWZpY2F0aW9uIHNjcmlwdC4gSW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5IgoKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBkZXN0cm95KHNlbGYsIGNvbmZpZ3VyYXRpb25BdHRyaWJ1dGVzKToKICAgICAgICBwcmludCAiRmlyZWJhc2UgRW5kVXNlck5vdGlmaWNhdGlvbiBzY3JpcHQuIERlc3Ryb3lpbmcgLi4uIgogICAgICAgIHByaW50ICJGaXJlYmFzZSBFbmRVc2VyTm90aWZpY2F0aW9uIHNjcmlwdC4gRGVzdHJveWVkIHN1Y2Nlc3NmdWxseSIKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBnZXRBcGlWZXJzaW9uKHNlbGYpOgogICAgICAgIHJldHVybiAxCgogICAgIyBSZXR1cm5zIGJvb2xlYW4gdHJ1ZSBvciBmYWxzZSBkZXBlbmRpbmcgb24gdGhlIHByb2Nlc3MsIGlmIHRoZSBub3RpZmljYXRpb24KICAgICMgaXMgc2VudCBzdWNjZXNzZnVsbHkgb3Igbm90LgogICAgZGVmIG5vdGlmeUVuZFVzZXIoc2VsZiwgY29udGV4dCk6CiAgICAgICAgcHJpbnQgJ1NlbmRpbmcgcHVzaCBub3RpZmljYXRpb24gdXNpbmcgRmlyZWJhc2UgQ2xvdWQgTWVzc2FnaW5nJwogICAgICAgIGFwcENvbmZpZ3VyYXRpb24gPSBjb250ZXh0LmdldEFwcENvbmZpZ3VyYXRpb24oKQogICAgICAgIGVuY3J5cHRpb25TZXJ2aWNlID0gY29udGV4dC5nZXRFbmNyeXB0aW9uU2VydmljZSgpCiAgICAgICAgY2xpZW50SWQgPSBhcHBDb25maWd1cmF0aW9uLmdldEJhY2tjaGFubmVsQ2xpZW50SWQoKQogICAgICAgIHJlZGlyZWN0VXJpID0gYXBwQ29uZmlndXJhdGlvbi5nZXRCYWNrY2hhbm5lbFJlZGlyZWN0VXJpKCkKICAgICAgICB1cmwgPSBhcHBDb25maWd1cmF0aW9uLmdldENpYmFFbmRVc2VyTm90aWZpY2F0aW9uQ29uZmlnKCkuZ2V0Tm90aWZpY2F0aW9uVXJsKCkKICAgICAgICBrZXkgPSBlbmNyeXB0aW9uU2VydmljZS5kZWNyeXB0KGFwcENvbmZpZ3VyYXRpb24uZ2V0Q2liYUVuZFVzZXJOb3RpZmljYXRpb25Db25maWcoKS5nZXROb3RpZmljYXRpb25LZXkoKSwgVHJ1ZSkKICAgICAgICB0byA9IGNvbnRleHQuZ2V0RGV2aWNlUmVnaXN0cmF0aW9uVG9rZW4oKQogICAgICAgIHRpdGxlID0gIm94QXV0aCBBdXRoZW50aWNhdGlvbiBSZXF1ZXN0IgogICAgICAgIGJvZHkgPSAiQ2xpZW50IEluaXRpYXRlZCBCYWNrY2hhbm5lbCBBdXRoZW50aWNhdGlvbiAoQ0lCQSkiCgogICAgICAgIGF1dGhvcml6YXRpb25SZXF1ZXN0VXJpID0gUmVkaXJlY3RVcmkoYXBwQ29uZmlndXJhdGlvbi5nZXRBdXRob3JpemF0aW9uRW5kcG9pbnQoKSkKICAgICAgICBhdXRob3JpemF0aW9uUmVxdWVzdFVyaS5hZGRSZXNwb25zZVBhcmFtZXRlcigiY2xpZW50X2lkIiwgY2xpZW50SWQpCiAgICAgICAgYXV0aG9yaXphdGlvblJlcXVlc3RVcmkuYWRkUmVzcG9uc2VQYXJhbWV0ZXIoInJlc3BvbnNlX3R5cGUiLCAiaWRfdG9rZW4iKQogICAgICAgIGF1dGhvcml6YXRpb25SZXF1ZXN0VXJpLmFkZFJlc3BvbnNlUGFyYW1ldGVyKCJzY29wZSIsIGNvbnRleHQuZ2V0U2NvcGUoKSkKICAgICAgICBhdXRob3JpemF0aW9uUmVxdWVzdFVyaS5hZGRSZXNwb25zZVBhcmFtZXRlcigiYWNyX3ZhbHVlcyIsIGNvbnRleHQuZ2V0QWNyVmFsdWVzKCkpCiAgICAgICAgYXV0aG9yaXphdGlvblJlcXVlc3RVcmkuYWRkUmVzcG9uc2VQYXJhbWV0ZXIoInJlZGlyZWN0X3VyaSIsIHJlZGlyZWN0VXJpKQogICAgICAgIGF1dGhvcml6YXRpb25SZXF1ZXN0VXJpLmFkZFJlc3BvbnNlUGFyYW1ldGVyKCJzdGF0ZSIsIFVVSUQucmFuZG9tVVVJRCgpLnRvU3RyaW5nKCkpCiAgICAgICAgYXV0aG9yaXphdGlvblJlcXVlc3RVcmkuYWRkUmVzcG9uc2VQYXJhbWV0ZXIoIm5vbmNlIiwgVVVJRC5yYW5kb21VVUlEKCkudG9TdHJpbmcoKSkKICAgICAgICBhdXRob3JpemF0aW9uUmVxdWVzdFVyaS5hZGRSZXNwb25zZVBhcmFtZXRlcigicHJvbXB0IiwgImNvbnNlbnQiKQogICAgICAgIGF1dGhvcml6YXRpb25SZXF1ZXN0VXJpLmFkZFJlc3BvbnNlUGFyYW1ldGVyKCJhdXRoX3JlcV9pZCIsIGNvbnRleHQuZ2V0QXV0aFJlcUlkKCkpCgogICAgICAgIGNsaWNrQWN0aW9uID0gYXV0aG9yaXphdGlvblJlcXVlc3RVcmkudG9TdHJpbmcoKQoKICAgICAgICBmaXJlYmFzZUNsb3VkTWVzc2FnaW5nUmVxdWVzdCA9IEZpcmViYXNlQ2xvdWRNZXNzYWdpbmdSZXF1ZXN0KGtleSwgdG8sIHRpdGxlLCBib2R5LCBjbGlja0FjdGlvbikKICAgICAgICBmaXJlYmFzZUNsb3VkTWVzc2FnaW5nQ2xpZW50ID0gRmlyZWJhc2VDbG91ZE1lc3NhZ2luZ0NsaWVudCh1cmwpCiAgICAgICAgZmlyZWJhc2VDbG91ZE1lc3NhZ2luZ0NsaWVudC5zZXRSZXF1ZXN0KGZpcmViYXNlQ2xvdWRNZXNzYWdpbmdSZXF1ZXN0KQogICAgICAgIGZpcmViYXNlQ2xvdWRNZXNzYWdpbmdSZXNwb25zZSA9IGZpcmViYXNlQ2xvdWRNZXNzYWdpbmdDbGllbnQuZXhlYygpCgogICAgICAgIHJlc3BvbnNlU3RhdHVzID0gZmlyZWJhc2VDbG91ZE1lc3NhZ2luZ1Jlc3BvbnNlLmdldFN0YXR1cygpCiAgICAgICAgcHJpbnQgIkNJQkE6IGZpcmViYXNlIGNsb3VkIG1lc3NhZ2luZyByZXN1bHQgc3RhdHVzICIgKyBzdHIocmVzcG9uc2VTdGF0dXMpCiAgICAgICAgcmV0dXJuIChyZXNwb25zZVN0YXR1cyA+PSAyMDAgYW5kIHJlc3BvbnNlU3RhdHVzIDwgMzAwICkKCg==
oxScriptType: ciba_end_user_notification
programmingLanguage: python
